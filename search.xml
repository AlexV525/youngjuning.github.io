<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于travis-ci实现vuepress自动部署</title>
    <url>/2018/09/%E5%9F%BA%E4%BA%8Etravis-ci%E5%AE%9E%E7%8E%B0vuepress%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<img src="https://i.loli.net/2018/09/26/5baba6f2be8eb.jpeg" style="zoom:25%;" />

<a id="more"></a>

<h2 id="一、安装-vuepress"><a href="#一、安装-vuepress" class="headerlink" title="一、安装 vuepress"></a>一、安装 vuepress</h2><blockquote>
<p>这里只是按照</p>
</blockquote>
<p>如果你想在一个现有项目中使用 VuePress，同时想要在该项目中管理文档，则应该将 VuePress 安装为本地依赖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 VuePress 作为一个本地依赖安装</span></span><br><span class="line">yarn add -D vuepress <span class="comment"># 或者：npm install -D vuepress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个 docs 文件夹</span></span><br><span class="line">mkdir docs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个 markdown 文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# Hello VuePress!&quot;</span> &gt; docs/README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始写作</span></span><br><span class="line">npx vuepress dev docs</span><br></pre></td></tr></table></figure>

<p>接着，在 <code>package.json</code> 里加一些脚本:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;docs:dev&quot;</span>: <span class="string">&quot;vuepress dev docs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;docs:build&quot;</span>: <span class="string">&quot;vuepress build docs&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就可以开始写作了:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn docs:dev <span class="comment"># 或者：npm run docs:dev</span></span><br></pre></td></tr></table></figure>

<h2 id="二、GitHub-Pages-部署"><a href="#二、GitHub-Pages-部署" class="headerlink" title="二、GitHub Pages 部署"></a>二、GitHub Pages 部署</h2><ol>
<li>在 <strong>docs/.vuepress/config.js</strong> 中设置正确的 <strong>base</strong>。</li>
</ol>
<p>如果你打算发布到 <code>https://&lt;USERNAME&gt;.github.io/</code>，则可以省略这一步，因为 <strong>base</strong> 默认即是 “/“。</p>
<p>在你的项目中，创建一个如下的 deploy.sh 文件（请自行判断去掉高亮行的注释）:<code>https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;/</code>（也就是说你的仓库在 <code>https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code>），则将 <strong>base</strong> 设置为 <code>&quot;/&lt;REPO&gt;/&quot;</code>。</p>
<ol start="2">
<li>在你的项目中，创建一个如下的 <strong>deploy.sh</strong> 文件（请自行判断去掉高亮行的注释）:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保脚本抛出遇到的错误</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">npm run docs:build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入生成的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> docs/.vuepress/dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是发布到自定义域名</span></span><br><span class="line"><span class="comment"># echo &#x27;www.example.com&#x27; &gt; CNAME</span></span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&#x27;deploy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure>

<h2 id="三、集成-travis-ci"><a href="#三、集成-travis-ci" class="headerlink" title="三、集成 travis-ci"></a>三、集成 travis-ci</h2><p>先用 github 账号登录 travis 网站，然后同步你的仓库， 然后勾选我们的项目仓库（是保存文档的仓库而不是放生成页面的仓库）</p>
<h3 id="配置-travis-yml"><a href="#配置-travis-yml" class="headerlink" title="配置 .travis.yml"></a>配置 .travis.yml</h3><p>然后在你的项目文件夹新建文件 <strong>.travis.yml</strong>， 这个文件内容根据你的项目而定，比如我们的项目可以是这样的。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.11</span><span class="number">.3</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span> <span class="comment"># 设置时区</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./deploy.sh</span></span><br></pre></td></tr></table></figure>

<h3 id="access-token"><a href="#access-token" class="headerlink" title="access_token"></a>access_token</h3><p>首先在 github 的 <strong>setting</strong> -&gt; <strong>developer setting</strong> -&gt; <strong>personal access token</strong>一栏点击<strong>generate new token</strong>， 这下面的选项全选，然后就会生成一个 token，复制这个 token。</p>
<p>进入 travis 后台，在环境变量（Environment Variables）里设置键值对，比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">access_token &lt;把复制的token黏贴在这&gt;</span><br></pre></td></tr></table></figure>

<h3 id="修改-deploy-sh"><a href="#修改-deploy-sh" class="headerlink" title="修改 deploy.sh"></a>修改 deploy.sh</h3><p>集成 travis 还需要我们修改 <code>deploy.sh</code>,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保脚本抛出遇到的错误</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">npm run docs:build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入生成的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> docs/.vuepress/dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是发布到自定义域名</span></span><br><span class="line"><span class="comment"># echo &#x27;www.example.com&#x27; &gt; CNAME</span></span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&#x27;deploy&#x27;</span></span><br><span class="line"></span><br><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">&quot;杨俊宁&quot;</span></span><br><span class="line">git config --<span class="built_in">local</span> user.email <span class="string">&quot;1003719811@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用 travis 持续集成</span></span><br><span class="line">git push -f https://<span class="variable">$&#123;access_token&#125;</span>@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure>

<h3 id="将-deploy-sh-变成可执行文件"><a href="#将-deploy-sh-变成可执行文件" class="headerlink" title="将 deploy.sh 变成可执行文件"></a>将 deploy.sh 变成可执行文件</h3><blockquote>
<p>在项目根目录下执行该命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update-index --add --chmod=+x build.sh</span><br></pre></td></tr></table></figure>

<p>现在在试着 push，观察 travis 服务器日志是否成功。</p>
<h2 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjM5MDY2Ng==" title="https://zhuanlan.zhihu.com/p/36390666">搭建持续集成、基于 vuepress 的 Github Page - 知乎<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>travis</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native 引入第三方SDK</title>
    <url>/2019/06/React%20Native%20%E5%BC%95%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9SDK/</url>
    <content><![CDATA[<p>在 React Native 开发中，如果一个原生 SDK 没有适配 React Native 的插件，原则上我们不推荐你使用。但是万不得已的情况下，我们有办法吗？答案是肯定的。步骤大致分为集成 SDK、编写桥接代码。知难行易，本文就是顺着这个思路来解决让前端工程师脑壳疼的集成第三方 SDK 并编写桥接代码的问题。</p>
<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><blockquote>
<p>在我们开发安卓项目的时候，不会所有的功能都自己去造轮子，经常要使用到各种的其他包，其中有谷歌给我们提供的各种 <code>support</code> 包，也有各种第三方的功能库，有时候我们自己也会将一些功能封装成包。这些包存在和导入的形式也多种多样，有远程仓库的，有直接拷贝到本地的，<code>jar</code> 包、<code>aar</code> 包、<code>so</code> 包等。所幸我们都可以在主工程和各个 <code>Module</code> 的 <code>build.gradle</code> 里进行统一管理。— <span class="exturl" data-url="aHR0cDovL3QuY24vQWk5VDAySnE=" title="http://t.cn/Ai9T02Jq">Android 依赖导入全攻略<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="依赖引入方式"><a href="#依赖引入方式" class="headerlink" title="依赖引入方式"></a>依赖引入方式</h3><p><code>Android Gradle plugin 3.0</code> 几个引入依赖的方法：</p>
<p><strong>implementation</strong></p>
<p>对于使用了该命令编译的依赖，对该项目有依赖的项目将无法访问到使用该命令编译的依赖中的任何程序，也就是将该依赖隐藏在内部，而不对外部公开。<code>react-native link</code> 命令即使用该方式</p>
<p>使用 <code>implementation</code> 会使编译速度有所增快：比如我在一个 <code>library</code> 中使用 <code>implementation</code> 依赖了 <code>gson</code> 库，然后我的主项目依赖了 <code>library</code>，那么，我的主项目就无法访问 <code>gson</code> 库中的方法。这样的好处是编译速度会加快，我换了一个版本的 <code>Gson</code> 库，但只要 <code>library</code> 的代码不改动，就不会重新编译主项目的代码。</p>
<p><strong>api</strong></p>
<p>等同于 compile 指令</p>
<p><strong>compileOnly</strong></p>
<p>等同于 <code>provided</code>，只在编译时有效，不会参与打包，不会包含到 <code>apk</code> 文件中。可以用来解决重复导入库的冲突。</p>
<h2 id="远程仓库依赖"><a href="#远程仓库依赖" class="headerlink" title="远程仓库依赖"></a>远程仓库依赖</h2><blockquote>
<p>这里我们以 LeanCloud Android SDK 的引入来演示</p>
</blockquote>
<p>引入远程仓库依赖是很方便的，但在之前我们需要在项目根目录的 <code>build.gradle</code> 声明远程仓库的地址。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line"><span class="addition">+        //这里是 LeanCloud 的包仓库</span></span><br><span class="line"><span class="addition">+        maven &#123;</span></span><br><span class="line"><span class="addition">+            url &quot;http://mvn.leancloud.cn/nexus/content/repositories/public&quot;</span></span><br><span class="line"><span class="addition">+        &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#x27;com.android.tools.build:gradle:1.0.0&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line"><span class="addition">+        //这里是 LeanCloud 的包仓库</span></span><br><span class="line"><span class="addition">+        maven &#123;</span></span><br><span class="line"><span class="addition">+            url &quot;http://mvn.leancloud.cn/nexus/content/repositories/public&quot;</span></span><br><span class="line"><span class="addition">+        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后打开 <code>app</code> 目录下的 <code>build.gradle</code> 进行如下配置：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line"><span class="addition">+    //为了解决部分第三方库重复打包了META-INF的问题</span></span><br><span class="line"><span class="addition">+    packagingOptions&#123;</span></span><br><span class="line"><span class="addition">+        exclude &#x27;META-INF/LICENSE.txt&#x27;</span></span><br><span class="line"><span class="addition">+        exclude &#x27;META-INF/NOTICE.txt&#x27;</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile (&#x27;com.android.support:support-v4:21.0.3&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="addition">+    // LeanCloud 基础包</span></span><br><span class="line"><span class="addition">+    compile (&#x27;cn.leancloud.android:avoscloud-sdk:4.7.10&#x27;)</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+    // 推送与即时通讯需要的包</span></span><br><span class="line"><span class="addition">+    compile (&#x27;cn.leancloud.android:avoscloud-push:4.7.10@aar&#x27;)&#123;transitive = true&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="本地依赖"><a href="#本地依赖" class="headerlink" title="本地依赖"></a>本地依赖</h2><blockquote>
<p>使用 Android Studio 的同学请参考: <span class="exturl" data-url="aHR0cDovL3QuY24vQWk5VEZzSEg=" title="http://t.cn/Ai9TFsHH">Android Studio 引入 jar 包和 so 文件（armeabi 和 armeabi-v7a）<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h3 id="jar-包"><a href="#jar-包" class="headerlink" title="jar 包"></a>jar 包</h3><p>1、将 <code>jar</code> 文件复制、粘贴到 <code>app/libs</code> 目录中，React Native 默认没有该文件夹，清新建一个</p>
<p>2、打开 <code>app/build.gradle</code>，进行如下配置以列出包含 <code>jar</code> 包的文件夹路径。</p>
<blockquote>
<p>注意：React Native 默认已经进行了这个配置</p>
</blockquote>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和远程仓库依赖引入方式不同，如果本地同时存在两个不同的 <code>jar</code> 包，或者本地已有 <code>jar</code> 包，再去远程依赖不同版本的 <code>jar</code> 包，就会报错。</p>
<p><img src="https://i.loli.net/2019/06/05/5cf73b7ea3e2b53276.jpg" alt=""></p>
<p>解决方式：将其中的一个采用 <code>compileOnly</code> 替换 <code>implementation</code>。顾名思义，<code>compileOnly</code> 只在编译时起作用，不会包含到 <code>APK</code> 里面，在运行时也就避免找到重复的类了。</p>
<h3 id="aar-包"><a href="#aar-包" class="headerlink" title="aar 包"></a>aar 包</h3><p><code>arr</code> 全称是 <code>Andorid Archive</code>,是一个 Android 库项目的二进制归档文件，使用 Android Studio ，非常简单可以生成一个 AAR 文件。</p>
<p>和 <code>jar</code> 包不同，<code>aar</code> 包存放的路径声明和依赖引入是分开的：</p>
<p>1、将 <code>aar</code> 包复制到 <code>lib</code> 目录下</p>
<p>2、在项目根目录 <code>build.gradle</code>中声明 <code>aar</code> 文件存放路径</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line"><span class="addition">+    flatDir &#123; // 引用本项目的libs下的aar</span></span><br><span class="line"><span class="addition">+      dir &quot;$rootDir/libs&quot;</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">allprojects &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line"><span class="addition">+    flatDir &#123; // 引用本项目的libs下的aar</span></span><br><span class="line"><span class="addition">+      dir &quot;$rootDir/libs&quot;</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、在 <code>app/build.gradle</code> 中注入依赖</p>
<blockquote>
<p>注意：远程 <code>aar</code> 引入形式是：<code>implementation(&#39;com.sishu.android:watermelondb:0.7.0@aar&#39;)</code></p>
</blockquote>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"><span class="addition">+    implementation(name: &#x27;aar名字&#x27;, ext: &#x27;aar&#x27;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="so-文件"><a href="#so-文件" class="headerlink" title="so 文件"></a>so 文件</h3><p>直接在 <code>src-&gt;main</code> 下新建一个文件夹 <code>jniLib</code> ，然后再把 <code>so</code> 文件所在的那个文件夹 <code>armeabi</code> 复制过去。</p>
<blockquote>
<p>注：<code>jniLib</code> 是 so 文件默认的放置目录</p>
</blockquote>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><h3 id="都是-Proguard-惹的祸"><a href="#都是-Proguard-惹的祸" class="headerlink" title="都是 Proguard 惹的祸"></a>都是 Proguard 惹的祸</h3><p>有时候明明导入了 <code>jar</code> 包，却仍然找不到 <code>jar</code> 包中的方法呢？八成是因为你开启了混淆，最安全的就是空间换安全。但是一个较真的程序员不能满足于此，我们还是要搞清楚 Proguard 惹了什么祸的。这里分享给大家一招：</p>
<p>打开 Android Studio 像原生开发工程师一样使用 Logcat 查看应用日志，比如你找到是 <code>com.huawei.**</code> 这个库找不到，那么进行如下配置：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ -dontwarn com.huawei.**</span></span><br><span class="line"><span class="addition">+ -keep class com.huawei.**&#123;*;&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>-dontwarn</code> 表示让 ProGuard 不要警告找不到 <code>com.huawei.**</code> 这个包里面的类的相关引用</li>
<li><code>-keep class</code> 表示保持 <code>com.huawei.**</code> 这个包里面的所有类和所有方法不被混淆。再次编译打包，发现 apk 大小要明显大于之前的包。运行 app，问题解决！</li>
</ul>
<h3 id="aar-包中的资源文件重复了"><a href="#aar-包中的资源文件重复了" class="headerlink" title="aar 包中的资源文件重复了"></a>aar 包中的资源文件重复了</h3><p>资源文件重复了，主工程的资源文件会直接覆盖 <code>aar</code> 包中的文件，并且不会有任何报错或者提示，最终 <code>aar</code> 包中也会直接用主工程的资源文件，所以需要注意命名方式。暂时没有更好的解决方法。</p>
<h3 id="AndroidManifest-合并错误"><a href="#AndroidManifest-合并错误" class="headerlink" title="AndroidManifest 合并错误"></a>AndroidManifest 合并错误</h3><p>同样也是发生在 <code>aar</code> 包上， Android Studio 项目每个 module 中都可以有一个 <code>AndroidManifest.xml</code> 文件，但最终的 APK 文件只能包含一个 <code>AndroidManifest.xml</code> 文件。在构建应用时，Gradle 构建会将所有清单文件合并到一个封装到 APK 的清单文件中。aar 包的清单文件和我们的 app 清单文件属性冲突时：用 <code>tools:replace=&quot;属性名&quot;</code> 解决。</p>
<h3 id="annotationProcessor-与-compileOnly-的区别"><a href="#annotationProcessor-与-compileOnly-的区别" class="headerlink" title="annotationProcessor 与 compileOnly 的区别"></a>annotationProcessor 与 compileOnly 的区别</h3><p>上文说了 <code>annotationProcessor</code> 与 <code>compileOnly</code> 都是只编译并不打入 apk 中，他俩到底有什么区别呢？扮演的角色不一样，<code>annotationProcessor</code> 作用是编译时生成代码，编译完真的就不需要了，<code>compileOnly</code> 是有重复的库，为的是剃除只保留一个库，最终还是需要的。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWk5SG1sV2I=" title="http://t.cn/Ai9HmlWb">Android Studio 引入 jar 包和 so 库<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWk5VDAySnE=" title="http://t.cn/Ai9T02Jq">Android 依赖导入全攻略<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWk5OGJOYmo=" title="http://t.cn/Ai98bNbj">React-native 使用原生(ios, android)第三方 sdk<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>babel-plugin-root-import中文文档</title>
    <url>/2019/06/babel-plugin-root-import%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>一个可以让你基于根路径导入组件的 Babel 插件（支持 <code>import</code>、<code>require</code>）</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用这个插件...</span></span><br><span class="line"><span class="keyword">import</span> SomeExample <span class="keyword">from</span> <span class="string">&#x27;../../../some/example.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> OtherExample = <span class="built_in">require</span>(<span class="string">&#x27;../../../other/example.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 babel-plugin-root-import 你可以这么写...</span></span><br><span class="line"><span class="keyword">import</span> SomeExample <span class="keyword">from</span> <span class="string">&#x27;~/some/example.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> OtherExample = <span class="built_in">require</span>(<span class="string">&#x27;~/other/example.js&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install babel-plugin-root-import -D</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ yarn add babel-plugin-root-import -D</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>添加到 babel 配置文件的 <code>plugins</code> 数组中，例如 <code>.babelrc</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;babel-plugin-root-import&quot;</span>]</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最近的 react-native 版本中，Babel 配置文件是<code>babel.config.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [[<span class="string">&#x27;babel-plugin-root-import&#x27;</span>]],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;babel-plugin-root-import&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        rootPathSuffix: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">        rootPathPrefix: <span class="string">&#x27;~&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义-rootPathSuffix"><a href="#自定义-rootPathSuffix" class="headerlink" title="自定义 rootPathSuffix"></a>自定义 rootPathSuffix</h4><blockquote>
<p>该配置用来改变根目录。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;babel-plugin-root-import&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        rootPathSuffix: <span class="string">&#x27;src&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>&quot;src&quot;</code> 和 <code>&quot;./src&quot;</code> 是一样的。</p>
<h4 id="自定义-rootPathPrefix"><a href="#自定义-rootPathPrefix" class="headerlink" title="自定义 rootPathPrefix"></a>自定义 rootPathPrefix</h4><p>如果你不喜欢 <code>~</code> 符号，你可以使用你自己的符号（比如 <code>#</code> 或 <code>\</code>）。因为新版的 NPM 允许<code>@</code>作为包的名字，所以不推荐使用 <code>@</code>。</p>
<blockquote>
<p>注意：该配置项的值必须是 1 个或两个字符</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;babel-plugin-root-import&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        rootPathPrefix: <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 现在你就可以像下面一样使用</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&#x27;#my-file&#x27;</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&#x27;#/my-file&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果你设置成 <code>&quot;#/&quot;</code>，你就不能省略 <code>/</code>。</p>
<h4 id="多个自定义-prefixes-和-suffixes"><a href="#多个自定义-prefixes-和-suffixes" class="headerlink" title="多个自定义 prefixes 和 suffixes"></a>多个自定义 prefixes 和 suffixes</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;babel-plugin-root-import&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        paths: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// `~` is the default so you can remove this if you want</span></span><br><span class="line">            rootPathPrefix: <span class="string">&#x27;~&#x27;</span>,</span><br><span class="line">            rootPathSuffix: <span class="string">&#x27;src/js&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            rootPathPrefix: <span class="string">&#x27;@&#x27;</span>,</span><br><span class="line">            rootPathSuffix: <span class="string">&#x27;other-src/js&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            rootPathPrefix: <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">            rootPathSuffix: <span class="string">&#x27;../../src/in/parent&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在你就可以像下面一样使用</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&#x27;~/foo&#x27;</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">require</span>(<span class="string">&#x27;@/bar&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="不要让-ESLint-迷惑"><a href="#不要让-ESLint-迷惑" class="headerlink" title="不要让 ESLint 迷惑"></a>不要让 ESLint 迷惑</h4><p>如果你使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Jlbm1vc2hlci9lc2xpbnQtcGx1Z2luLWltcG9ydA==" title="https://github.com/benmosher/eslint-plugin-import">eslint-plugin-import<i class="fa fa-external-link"></i></span> 验证组件导入，就必须知道 ESLint 来解析根目录导入。你可以使用 <span class="exturl" data-url="aHR0cDovL3QuY24vRWFaS2FUSw==" title="http://t.cn/EaZKaTK">eslint-import-resolver-babel-plugin-root-import<i class="fa fa-external-link"></i></span></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add eslint-plugin-import eslint-import-resolver-babel-plugin-root-import -D</span><br></pre></td></tr></table></figure>

<p>在 ESLint 配置文件中添加如下配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  settings: &#123;</span><br><span class="line">    <span class="string">&#x27;import/resolver&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;babel-plugin-root-import&#x27;</span>: &#123;</span><br><span class="line">        rootPathPrefix: <span class="string">&#x27;~&#x27;</span>,</span><br><span class="line">        rootPathSuffix: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="不要让-VSCode-迷惑"><a href="#不要让-VSCode-迷惑" class="headerlink" title="不要让 VSCode 迷惑"></a>不要让 VSCode 迷惑</h4><p>在 <code>tsconfig.json</code> 中配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;allowJS&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;~/*&quot;</span>: [<span class="string">&quot;./*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>Babel</category>
      </categories>
      <tags>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>react-native-create-library 中文文档</title>
    <url>/2019/06/react-native-create-library%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>使用一个命令创建 React Native 原生库的工具</p>
<h3 id="一、你为什么需要这个？"><a href="#一、你为什么需要这个？" class="headerlink" title="一、你为什么需要这个？"></a>一、你为什么需要这个？</h3><p>如果您要为 React Native 创建原生模块，则需要为要支持的每个平台提供一些原生代码，然后和一些 JavaScript 代码绑定在一起。自己设置可能非常耗时。</p>
<p>这就是这个工具的用武之地。它创建了一个包含所有当前最佳实践的样板。为什么不用 <code>react-native new-library</code>？不幸的是，该命令不会创建一个最新的库，需要一个已经初始化的 React Native 项目，并且只设置 iOS 方面的东西。</p>
<blockquote>
<p>警告：这仅创建没有视图组件的原生模块。</p>
</blockquote>
<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g react-native-create-library</span><br></pre></td></tr></table></figure>

<p>这个命令将会创建一个 <code>MyFancyLibrary</code> 文件夹，现在可以执行 <code>yarn install</code> 来为你新创建的 <code>Library</code> 安装依赖。</p>
<h3 id="三、命令"><a href="#三、命令" class="headerlink" title="三、命令"></a>三、命令</h3><blockquote>
<p><code>react-native-create-library [options] &lt;name&gt;</code></p>
</blockquote>
<p><strong>选项：</strong></p>
<ul>
<li><code>-h</code>、<code>--help</code>: 输入有用的信息</li>
<li><code>-V</code>、<code>--version</code>: 输出版本号</li>
<li><code>-p</code>、<code>--prefix &lt;prefix&gt;</code>: 库的前缀（默认：<code>RN</code>）</li>
<li><code>--module-prefix &lt;modulePrefix&gt;</code>: 库的模块前缀（npm）（默认<code>react-native</code>）</li>
<li><code>--package-identifier &lt;packageIdentifier&gt;</code>: (Android only!) The package name for the Android module (Default: <code>com.reactlibrary</code>)</li>
<li><code>--namespace &lt;namespace&gt;</code>: (Windows only!) The namespace for the Windows module(Default: The name as PascalCase)</li>
<li><code>--platforms &lt;platforms&gt;</code>: 支持的平台（用逗号隔开，默认：<code>ios,android,windows</code>）</li>
<li><code>--github-account &lt;github_account&gt;</code>: 托管库的 github 账号（默认：<code>github_account</code>）</li>
<li><code>--author-name &lt;name&gt;</code>: 作者的名字（默认：<code>Your Name</code>）</li>
<li><code>--author-name &lt;email&gt;</code>: 作者的邮箱（默认：<code>yourname@email.com</code>）</li>
<li><code>--license &lt;license&gt;</code>: The license type of this library (Default: <code>Apache-2.0</code>)</li>
<li><code>--generate-example &lt;shouldGenerate&gt;</code>: 会生成一个 RN 例子并且 <code>link</code> 刚生成的库（默认：<code>false</code>）</li>
</ul>
<h3 id="四、程序化使用"><a href="#四、程序化使用" class="headerlink" title="四、程序化使用"></a>四、程序化使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> createLibrary = <span class="built_in">require</span>(<span class="string">&#x27;react-native-create-library&#x27;</span>)</span><br><span class="line"></span><br><span class="line">createLibrary(&#123;</span><br><span class="line">  name: <span class="string">&#x27;MyFancyLibrary&#x27;</span>,</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Oh yay! My library has been created!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: <span class="built_in">String</span>, <span class="comment">/* The name of the library (Default: Library) */</span></span><br><span class="line">  prefix: <span class="built_in">String</span>, <span class="comment">/* The prefix for the library (Default: RN) */</span></span><br><span class="line">  modulePrefix: <span class="built_in">String</span>, <span class="comment">/* The module prefix for the library (Default: react-native) */</span></span><br><span class="line">  platforms: <span class="built_in">Array</span>, <span class="comment">/* Platforms the library will be created for. (Default: [&#x27;ios&#x27;, &#x27;android&#x27;, &#x27;windows&#x27;]) */</span></span><br><span class="line">  packageIdentifier: <span class="built_in">String</span>, <span class="comment">/* (Android only!) The package name for the Android module (Default: com.reactlibrary) */</span></span><br><span class="line">  namespace: <span class="built_in">String</span>, <span class="comment">/* (Windows only!) The namespace for the Windows module (Default: The package identifier as PascalCase, which is `Com.Reactlibrary`) */</span></span><br><span class="line">  githubAccount: <span class="built_in">String</span>, <span class="comment">/* The github account where the library is hosted (Default: `github_account`) */</span></span><br><span class="line">  authorName: <span class="built_in">String</span>, <span class="comment">/* The author&#x27;s name (Default: `Your Name`) */</span></span><br><span class="line">  authorEmail: <span class="built_in">String</span>, <span class="comment">/* The author&#x27;s email (Default: `yourname@email.com`) */</span></span><br><span class="line">  license: <span class="built_in">String</span>, <span class="comment">/* The license type of this library (Default: `Apache-2.0`) */</span></span><br><span class="line">  generateExample: <span class="built_in">Boolean</span>, <span class="comment">/* Will generate a RN example project and link the new library to it (Default: `false`) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>bridge</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 异步编程</title>
    <url>/2020/01/JavaScript%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>围绕异步编程领域，现代软件设计正在加速旋转，就为了让程序在一个时间内做更多的事情。当你使用更新更强大的 API 时，你会发现在更多的情况下，使用异步编程是唯一的途径。以前写异步代码很困难，现在也需要你来适应，但是已经变容易了很多。</p>
<a id="more"></a>

<h2 id="回调函数（Callback）"><a href="#回调函数（Callback）" class="headerlink" title="回调函数（Callback）"></a>回调函数（Callback）</h2><p>回调函数是异步操作最基本的方法。以下代码就是一个回调函数的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ajax(url, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但是回调函数有一个致命的弱点，就是容易写出回调地狱（Callback hell）。假设多个请求存在依赖性，你可能就会写出如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ajax(url, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理逻辑</span></span><br><span class="line">  ajax(url1, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    ajax(url2, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 处理逻辑</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>回调函数的优点是简单、容易理解和实现，缺点是不利于代码的阅读和维护，各个部分之间高度耦合，使得程序结构混乱、流程难以追踪（尤其是多个回调函数嵌套的情况），而且每个任务只能指定一个回调函数。此外它不能使用 try catch 捕获错误，不能直接 return。</p>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="Promise-状态"><a href="#Promise-状态" class="headerlink" title="Promise 状态"></a>Promise 状态</h3><ul>
<li>pending: 初始状态，既不是成功，也不是失败状态。</li>
<li>fulfilled: 意味着操作成功完成。</li>
<li>rejected: 意味着操作失败。</li>
<li>Settled: Promise 要么被完成，要么被拒绝。Promise 一旦达成，它的状态就不再改变。</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2019/8/14/16c8d7189886fcc7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>ES6 规定，Promise 对象是一个构造函数，用来生成 Promise 实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="短路特性"><a href="#短路特性" class="headerlink" title="短路特性"></a>短路特性</h3><ul>
<li><code>Promise.all()</code>: 如果参数中 promise 有一个失败（rejected），此实例回调失败（reject）</li>
<li><code>Promise.race()</code>: 如果参数中某个 promise 解决或拒绝，返回的 promise 就会解决或拒绝。</li>
</ul>
<h3 id="Promise-all-于-Array-prototype-map"><a href="#Promise-all-于-Array-prototype-map" class="headerlink" title="Promise.all 于 Array.prototype.map"></a>Promise.all 于 Array.prototype.map</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> urls = [<span class="string">&#x27;http://example.com/first.txt&#x27;</span>, <span class="string">&#x27;http://example.com/second.txt&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promises = urls.map(<span class="function"><span class="params">url</span> =&gt;</span> downloadText(url))</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h3><p><code>Promise.allSettled</code> 这一特性是由 Jason Williams，Robert Pamely 和 Mathias Bynens 提出。</p>
<p>它返回一个 Array 的 Promise，其元素具有以下类型特征：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SettlementObject&lt;T&gt; = FulfillmentObject&lt;T&gt; | RejectionObject</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> FulfillmentObject&lt;T&gt; &#123;</span><br><span class="line">  status: <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">  value: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> RejectionObject &#123;</span><br><span class="line">  status: <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">  reason: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>react-native-exception-handler 中文文档</title>
    <url>/2019/06/react-native-exception-handler%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="react-native-exception-handler"><a href="#react-native-exception-handler" class="headerlink" title="react-native-exception-handler "></a>react-native-exception-handler <img src="https://img.shields.io/npm/dm/react-native-exception-handler.svg" alt="npm"></h1><p><a href="https://www.npmjs.com/package/react-native-exception-handler"><img src="https://nodei.co/npm/react-native-exception-handler.png?downloads=true&downloadRank=true&stars=true" alt="https://nodei.co/npm/react-native-exception-handler.png?downloads=true&amp;downloadRank=true&amp;stars=true"></a></p>
<p>一个允许您注册一个全局错误处理程序，可以捕获致命/非致命未捕获异常 的 react native 模块。该模块有助于防止 RN 应用程序突然崩溃，而无需向用户发送优雅消息</p>
<p>在当前的情况下：</p>
<ul>
<li><code>DEV mode</code>：你会得到一个程序错误的红屏警告</li>
<li><code>Bundled mode</code>：App 在没有任何提示的情况下退出！🙄</li>
</ul>
<p>为了解决这个问题，我们注册了一个全局错误处理程序，可用于例如：</p>
<ol>
<li>当 App 崩溃时给开发团队发送 BUG 反馈</li>
<li>展示一个交互式的弹窗告诉用户应该重启应用</li>
</ol>
<h4 id="升级-V2"><a href="#升级-V2" class="headerlink" title="升级 - V2:"></a>升级 - V2:</h4><p><strong>V2 现在支持捕获未处理的原生和 JS 异常 ✌🏻🍻</strong>，这是向后兼容的。因此你可以安全地从 V1 升级到 V2，快快升级吧。</p>
<p><strong>V2.9</strong></p>
<ul>
<li>添加对执行先前设置的错误处理程序的支持（现在这个模块可以与其他分析模块一起使用）</li>
<li>添加了一种改进的方法来覆盖本机错误处理程序。</li>
<li>感谢 @ <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rzb2xpbWFuZG8=" title="https://github.com/dsolimando">Damien Solimando<i class="fa fa-external-link"></i></span></li>
</ul>
<blockquote>
<p>Demo：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hc3Rlci1hdHVsL3JlYWN0LW5hdGl2ZS1leGNlcHRpb24taGFuZGxlci1leGFtcGxl" title="https://github.com/master-atul/react-native-exception-handler-example">https://github.com/master-atul/react-native-exception-handler-example<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add react-native-exception-handler</span><br></pre></td></tr></table></figure>

<h2 id="自动化配置"><a href="#自动化配置" class="headerlink" title="自动化配置"></a>自动化配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ react-native link react-native-exception-handler</span><br></pre></td></tr></table></figure>

<h2 id="手动配置"><a href="#手动配置" class="headerlink" title="手动配置"></a>手动配置</h2><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><ol>
<li>In XCode, in the project navigator, right click <code>Libraries</code> ➜ <code>Add Files to [your project&#39;s name]</code></li>
<li>Go to <code>node_modules</code> ➜ <code>react-native-exception-handler</code> and add <code>ReactNativeExceptionHandler.xcodeproj</code></li>
<li>In XCode, in the project navigator, select your project. Add <code>libReactNativeExceptionHandler.a</code> to your project’s <code>Build Phases</code> ➜ <code>Link Binary With Libraries</code></li>
<li>Run your project (<code>Cmd+R</code>)&lt;</li>
</ol>
<h5 id="Using-Cocoapods"><a href="#Using-Cocoapods" class="headerlink" title="Using Cocoapods"></a>Using Cocoapods</h5><ol>
<li>add <code>pod &#39;ReactNativeExceptionHandler&#39;, :podspec =&gt; &#39;../node_modules/react-native-exception-handler/ReactNativeExceptionHandler.podspec&#39;</code> to your Podfile</li>
<li>run <code>pod install</code></li>
</ol>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><ol>
<li>Open up <code>android/app/src/main/java/[...]/MainApplication.java</code></li>
</ol>
<ul>
<li>Add <code>import com.masteratul.exceptionhandler.ReactNativeExceptionHandlerPackage;</code> to the imports at the top of the file</li>
<li>Add <code>new ReactNativeExceptionHandlerPackage()</code> to the list returned by the <code>getPackages()</code> method</li>
</ul>
<ol start="2">
<li>Append the following lines to <code>android/settings.gradle</code>:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include &#39;:react-native-exception-handler&#39;</span><br><span class="line">project(&#39;:react-native-exception-handler&#39;).projectDir &#x3D; new File(rootProject.projectDir,     &#39;..&#x2F;node_modules&#x2F;react-native-exception-handler&#x2F;android&#39;)</span><br></pre></td></tr></table></figure></li>
<li>Insert the following lines inside the dependencies block in <code>android/app/build.gradle</code>:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile project(&#39;:react-native-exception-handler&#39;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="请在使用部分之前阅读"><a href="#请在使用部分之前阅读" class="headerlink" title="请在使用部分之前阅读"></a>请在使用部分之前阅读</h2><p>让我先给你介绍下 RN App 中的错误：</p>
<ul>
<li>由 Javascript 代码引起的（包括所有的 react 代码）。我们将把这些标记为 <strong>JS_Exceptions</strong></li>
<li>由原生代码引起的。我们将把他们标记为 <strong>Native_Exceptions</strong></li>
</ul>
<p>未处理的异常会使应用程序处于严重状态</p>
<p>在 <strong>JS_Exceptions</strong> 的情况下，您可以捕获这些未处理的异常并执行显示警报或弹出窗口，在关闭应用程序之前，先进行清理甚至调用 API 以通知开发团队</p>
<p>在 <strong>Native_Exceptions</strong> 的情况下，它变得更糟。虽然您可以捕获这些未处理的异常并执行清理或注销等任务，甚至可以在关闭应用程序之前点击 API 以通知开发团队，但是你不能展示 JS 弹窗或者通过 JS 代码做任何 UI 相关的事情。你必须通过原生层来展示 UI，这个模块提供一个默认的错误页面，当然你也可以自定义，请参考后边自定义的部分</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>捕获 <strong>JS_Exceptions</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; setJSExceptionHandler, getJSExceptionHandler &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-exception-handler&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于大多数用例:</span></span><br><span class="line"><span class="comment">// 注册错误处理器（你可以在 index.js 中做这个事情）</span></span><br><span class="line">setJSExceptionHandler(<span class="function">(<span class="params">error, isFatal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这是你自定义的全局错误处理器</span></span><br><span class="line">  <span class="comment">// 你可以做一些像是展示弹窗、触发谷歌分析来跟踪崩溃或触发自定义的api来通知开发团队</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高级用例:</span></span><br><span class="line"><span class="keyword">const</span> JSExceptionhandler = <span class="function">(<span class="params">error, isFatal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 你的错误处理程序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// exceptionhandler：错误处理回调函数</span></span><br><span class="line"><span class="comment">// allowInDevMode：一个可选的布尔类型参数，默认false。如果你设置为 true，在开发模式下也会组织红屏</span></span><br><span class="line">setJSExceptionHandler(exceptionhandler, allowInDevMode)</span><br><span class="line"></span><br><span class="line"><span class="comment">// getJSExceptionHandler 给出当前设置的 JS exception handler</span></span><br><span class="line"><span class="keyword">const</span> currentHandler = getJSExceptionHandler()</span><br></pre></td></tr></table></figure>

<p>捕获 <strong>Native_Exceptions</strong></p>
<blockquote>
<p>注意：正如前文提到的，对于<strong>Native_Exceptions</strong> 弹窗提示或者通过 JS 展示任何 UI 都是不起作用的</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; setNativeExceptionHandler &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-exception-handler&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于大多数用例:</span></span><br><span class="line">setNativeExceptionHandler(<span class="function"><span class="params">errorString</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这是你自定义的全局错误处理器</span></span><br><span class="line">  <span class="comment">// 你可以触发谷歌分析来跟踪崩溃或触发自定义的api来通知开发团队</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高级用例:</span></span><br><span class="line"><span class="keyword">const</span> NativeExceptionhandler = <span class="function"><span class="params">exceptionString</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// your exception handler code here</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// exceptionhandler：错误处理回调函数</span></span><br><span class="line"><span class="comment">// forceAppQuit：是一个可选的 ANDROID 特定参数，用于定义错误发生时是否应用程序应该强制退出。默认是 true</span></span><br><span class="line"><span class="comment">// executeDefaultHandler：是一个可选的布尔类型参数，如果你通过其它模块设置了，它将会先执行。当您使用任何其他崩溃分析模块时，它会派上用场，默认值是 false，如果你使用其他分析模块，请设置为 true</span></span><br><span class="line">setNativeExceptionHandler(exceptionhandler, forceAppQuit, executeDefaultHandler)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<strong>setNativeExceptionHandler</strong> 只在 bundled 模式下起作用 - 开发模式下还是红屏</p>
</blockquote>
<h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><p>默认情况下，如果您使用了 <code>setNativeExceptionHandler</code>，则每当发生 <code>Native_Exceptions</code> 时，连同指定的回调，您将看到一个弹出窗口（这是此模块设置的默认原生处理程序）</p>
<p>在 Android 和 iOS 中你会看到类似的东西：</p>
<p align="center">
  <img src="https://github.com/master-atul/react-native-exception-handler/raw/master/screens/android_native_exception.png" width="300"/>
  <img src="https://github.com/master-atul/react-native-exception-handler/raw/master/screens/ios_native_exception.png" width="300"/>
</p>

<h3 id="Android-1"><a href="#Android-1" class="headerlink" title="Android"></a>Android</h3><p>（必须写原生代码）建议您在 android studio 中执行此操作</p>
<ul>
<li>In the <code>android/app/src/main/java/[...]/MainApplication.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.masteratul.exceptionhandler.ReactNativeExceptionHandlerModule;</span><br><span class="line"><span class="keyword">import</span> com.masteratul.exceptionhandler.NativeExceptionHandlerIfc</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">ReactApplication</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    ReactNativeExceptionHandlerModule.setNativeExceptionHandler(<span class="keyword">new</span> NativeExceptionHandlerIfc() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleNativeException</span><span class="params">(Thread thread, Throwable throwable, Thread.UncaughtExceptionHandler originalHandler)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 在这放置你的错误处理代码</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);<span class="comment">// This will override the default behaviour of displaying the recover activity.</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h3><p>（必须写原生代码）建议您在 Xcode 中执行此操作</p>
<p>与 Android 不同，在 iOS 的情况下，如果应用程序崩溃，则无法重新启动应用程序。此外，在 Native_Exceptions 期间，由于主 UI 线程上发生异常，UI 变得非常不稳定。因此，点击或按下处理程序都不会起作用。</p>
<blockquote>
<p>牢记这些，我们最多只能向用户显示一个对话框并通知用户重新打开该应用程序</p>
</blockquote>
<p>如果您注意到默认的本机异常弹出窗口就是这样做的。自定义弹出窗口的 UI。</p>
<ul>
<li>In XCode, open the file <code>AppDelegate.m</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &quot;AppDelegate.h&quot;</span><br><span class="line"></span><br><span class="line">#import &lt;React&#x2F;RCTBundleURLProvider.h&gt;</span><br><span class="line">#import &lt;React&#x2F;RCTRootView.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Add the header file</span><br><span class="line">#import &quot;ReactNativeExceptionHandler.h&quot;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">@implementation AppDelegate</span><br><span class="line"></span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[ReactNativeExceptionHandler replaceNativeExceptionHandlerBlock:^(NSException *exception, NSString *readeableException)&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; THE CODE YOU WRITE HERE WILL REPLACE THE EXISTING NATIVE POPUP THAT COMES WITH THIS MODULE.</span><br><span class="line">    &#x2F;&#x2F;We create an alert box</span><br><span class="line">    UIAlertController* alert &#x3D; [UIAlertController</span><br><span class="line">                                alertControllerWithTitle:@&quot;Critical error occurred&quot;</span><br><span class="line">                                message: [NSString stringWithFormat:@&quot;%@\n%@&quot;,</span><br><span class="line">                                          @&quot;Apologies..The app will close now \nPlease restart the app\n&quot;,</span><br><span class="line">                                          readeableException]</span><br><span class="line">                                preferredStyle:UIAlertControllerStyleAlert];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; We show the alert box using the rootViewController</span><br><span class="line">    [rootViewController presentViewController:alert animated:YES completion:nil];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; THIS IS THE IMPORTANT PART</span><br><span class="line">    &#x2F;&#x2F; By default when an exception is raised we will show an alert box as per our code.</span><br><span class="line">    &#x2F;&#x2F; But since our buttons wont work because our click handlers wont work.</span><br><span class="line">    &#x2F;&#x2F; to close the app or to remove the UI lockup on exception.</span><br><span class="line">    &#x2F;&#x2F; we need to call this method</span><br><span class="line">    &#x2F;&#x2F; [ReactNativeExceptionHandler releaseExceptionHold]; &#x2F;&#x2F; to release the lock and let the app crash.</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Hence we set a timer of 4 secs and then call the method releaseExceptionHold to quit the app after</span><br><span class="line">    &#x2F;&#x2F; 4 secs of showing the popup</span><br><span class="line">    [NSTimer scheduledTimerWithTimeInterval:4.0</span><br><span class="line">                                     target:[ReactNativeExceptionHandler class]</span><br><span class="line">                                   selector:@selector(releaseExceptionHold)</span><br><span class="line">                                   userInfo:nil</span><br><span class="line">                                    repeats:NO];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; or  you can call</span><br><span class="line">    &#x2F;&#x2F; [ReactNativeExceptionHandler releaseExceptionHold]; when you are done to release the UI lock.</span><br><span class="line">  &#125;];</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>What is this <code>[ReactNativeExceptionHandler releaseExceptionHold];</code>?</p>
<p>In case of iOS we lock the UI thread after we show our popup to prevent the app from closing. Hence once we are done showing the popup we need to close our app after some time. But since our buttons wont work as our click handlers wont work (explained before). To close the app or to remove the UI lockup on exception, we need to call this method <code>[ReactNativeExceptionHandler releaseExceptionHold];</code></p>
<p>Hence we set a timer of 4 secs and then call the method releaseExceptionHold to quit the app after 4 secs of showing the popup</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[NSTimer scheduledTimerWithTimeInterval:4.0</span><br><span class="line">                                 target:[ReactNativeExceptionHandler class]</span><br><span class="line">                               selector:@selector(releaseExceptionHold)</span><br><span class="line">                               userInfo:nil</span><br><span class="line">                                repeats:NO];</span><br></pre></td></tr></table></figure>

<h2 id="给安卓平台的高级用法"><a href="#给安卓平台的高级用法" class="headerlink" title="给安卓平台的高级用法"></a>给安卓平台的高级用法</h2><ul>
<li><p>react-native-restart：错误发生时，允许用户手动重启应用</p>
</li>
<li><p>BackAndroid.exitApp：错误发生时，允许用户手动退出应用</p>
</li>
</ul>
<h2 id="测试原生错误"><a href="#测试原生错误" class="headerlink" title="测试原生错误"></a>测试原生错误</h2><p><code>rn-test-exception-handler</code> 模块只做一件事，引起一个 <strong>Native_Exceptions</strong>。这有助于您验证自定义和此模块的能.</p>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>翻译</tag>
        <tag>exception</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>react-native-scrollable-tab-view</title>
    <url>/2020/01/react-native-scrollable-tab-view/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add react-native-scrollable-tab-view</span><br><span class="line"><span class="comment"># support AndroidX</span></span><br><span class="line">$ yarn add @react-native-community/viewpager</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="renderTabBar"><a href="#renderTabBar" class="headerlink" title="renderTabBar"></a>renderTabBar</h2><p>TabBar 的样式，系统提供了两种默认的，分别是 <code>DefaultTabBar</code> 和 <code>ScrollableTabBar</code>。当然，我们也可以自定义一个。</p>
<h3 id="DefaultTabBar"><a href="#DefaultTabBar" class="headerlink" title="DefaultTabBar"></a>DefaultTabBar</h3><p>Tab 会平分在水平方向的空间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ScrollableTabView, &#123; DefaultTabBar &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-scrollable-tab-view&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ScrollableTabView renderTabBar=&#123;<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">DefaultTabBar</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">      &lt;Text tabLabel=<span class="string">&quot;Tab #1&quot;</span>&gt;My&lt;/Text&gt;</span><br><span class="line">      &lt;Text tabLabel=<span class="string">&quot;Tab #2&quot;</span>&gt;favorite&lt;/Text&gt;</span><br><span class="line">      &lt;Text tabLabel=<span class="string">&quot;Tab #3&quot;</span>&gt;project&lt;/Text&gt;</span><br><span class="line">    &lt;/ScrollableTabView&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ScrollableTabBar"><a href="#ScrollableTabBar" class="headerlink" title="ScrollableTabBar"></a>ScrollableTabBar</h3><p>Tab 可以超过屏幕范围，滚动可以显示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ScrollableTabView, &#123; ScrollableTabsExample &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-scrollable-tab-view&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ScrollableTabView renderTabBar=&#123;<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">ScrollableTabsExample</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">      &lt;Text tabLabel=<span class="string">&quot;Tab #1&quot;</span>&gt;My&lt;/Text&gt;</span><br><span class="line">      &lt;Text tabLabel=<span class="string">&quot;Tab #2&quot;</span>&gt;favorite&lt;/Text&gt;</span><br><span class="line">      &lt;Text tabLabel=<span class="string">&quot;Tab #3&quot;</span>&gt;project&lt;/Text&gt;</span><br><span class="line">    &lt;/ScrollableTabView&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="children"><a href="#children" class="headerlink" title="children"></a>children</h3><p>表示所有子视图的数组，请设置 <code>tabLabel</code> 属性，你可以实现一个简单地包装组件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &#39;react&#39;</span><br><span class="line"></span><br><span class="line">interface Props &#123;</span><br><span class="line">  tabLabel: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const ScrollableTabViewItem: React.SFC&lt;Props&gt; &#x3D; props &#x3D;&gt; &lt;&gt;&#123;props.children&#125;&lt;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">export default ScrollableTabViewItem</span><br></pre></td></tr></table></figure>

<h3 id="onChangeTab"><a href="#onChangeTab" class="headerlink" title="onChangeTab"></a>onChangeTab</h3><p>Tab 切换之后会触发此方法，包含一个参数（<code>Object</code>类型），这个对象有两个参数</p>
<ul>
<li><code>i</code>: 被选中的 Tab 的下标（从 0 开始）</li>
<li><code>ref</code>: 被选中的 Tab 对象（基本用不到）</li>
</ul>
<h2 id="其他-Props"><a href="#其他-Props" class="headerlink" title="其他 Props"></a>其他 Props</h2><ul>
<li><code>tabBarPosition</code>(String) 默认值 <code>&#39;top&#39;</code><ul>
<li><code>top</code>：位于屏幕顶部</li>
<li><code>bottom</code>：位于屏幕底部</li>
<li><code>overlayTop</code>：位于屏幕顶部，悬浮在内容视图之上（看颜色区分：视图有颜色，Tab 栏没有颜色）</li>
<li><code>overlayBottom</code>：位于屏幕底部，悬浮在内容视图之上（看颜色区分：视图有颜色，Tab 栏没有颜色）</li>
</ul>
</li>
<li><code>onScroll</code> (Function): 视图正在滑动的时候触发此方法，包含一个 Float 类型的数字，范围是<code>[0, tab数量-1]</code></li>
<li><code>locked</code>(Bool): 表示手指是否能拖动视图，默认为 <code>false</code>（表示可以拖动）。设为 <code>true</code> 的话，我们只能“点击”Tab 来切换视图。</li>
<li><code>initialPage</code>(Integer): 初始化时被选中的 Tab 下标，默认是 0（即第一页）</li>
<li><code>tabBarUnderlineStyle</code>(style): 设置 <code>DefaultTabBar</code> 和<code>ScrollableTabBarTab</code> 选中时下方横线的样式</li>
<li><code>tabBarBackgroundColor</code>(String): 设置整个 Tab 这一栏的背景颜色</li>
<li><code>tabBarActiveTextColor</code>(String): 设置选中 Tab 的文字颜色</li>
<li><code>tabBarInactiveTextColor(String)</code>: 设置未选中 Tab 的文字颜色</li>
<li><code>tabBarTextStyle(Object)</code>: 设置 Tab 文字的样式，比如字号、字体等</li>
<li><code>style</code>: 系统 View 都拥有的属性，基本不会涉及到。</li>
<li><code>contentProps</code>: 这里要稍微说下 react-native-scrollable-tab-view 的实现，其实在 Android 平台底层用的是 <code>ViewPagerAndroid</code>，iOS 平台用的是 <code>ScrollView</code>。这个属性的意义是：比如我们设置了某个属性，最后这个属性会被应用在 <code>ScrollView</code>/<code>ViewPagerAndroid</code>，这样会覆盖库里面默认的，通常官方不建议我们去使用。</li>
<li><code>scrollWithoutAnimation</code>(Bool，默认为 <code>false</code>): 设置“点击”Tab 时，视图切换是否有动画，默认为 <code>false</code>（即：有动画效果）。</li>
<li><code>prerenderingSiblingsNumber</code> (Integer): 预加载相近的兄弟节点数量，<code>Infinity</code> 表示渲染所有的兄弟节点， 默认值是 <code>0</code> 表示渲染当前页面</li>
</ul>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>指南</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>在 React Native 中使用 mobx</title>
    <url>/2020/01/%E5%9C%A8%20React%20Native%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20mobx/</url>
    <content><![CDATA[<p>Mobx 是简单、可扩展的状态管理，React 和 MobX 是一对强力组合。React 通过提供机制把应用状态转换为可渲染组件树并对其进行渲染。而 MobX 提供机制来存储和更新应用状态供 React 使用。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/8/6/16c66572c68cbabc?imageslim" alt=""></p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add mobx</span><br><span class="line"><span class="comment"># React 绑定库</span></span><br><span class="line">$ yarn add mobx-react</span><br></pre></td></tr></table></figure>

<h2 id="启用装饰器语法"><a href="#启用装饰器语法" class="headerlink" title="启用装饰器语法"></a>启用装饰器语法</h2><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>在 <code>tsconfig.json</code> 中启用编译器选项 <code>&quot;experimentalDecorators&quot;: true</code> 。</p>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>在 Babel 中配置 MobX 的方式是使用 mobx preset，这种方式更方便，其中包含了装饰器及其他几个经常与 mobx 一起使用的插件:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add babel-preset-mobx -D</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [<span class="string">&#x27;module:metro-react-native-babel-preset&#x27;</span>, <span class="string">&#x27;mobx&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="observable-可观察的状态"><a href="#observable-可观察的状态" class="headerlink" title="@observable: 可观察的状态"></a><code>@observable</code>: 可观察的状态</h3><p>装饰器可以在 ES7 或者 TypeScript 类属性中属性使用，将其转换成可观察的。 <code>@observable</code> 可以在实例字段和属性 <code>getter</code> 上使用。 对于对象的哪部分需要成为可观察的，<code>@observable</code> 提供了细粒度的控制。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderLine</span> </span>&#123;</span><br><span class="line">  @observable price = <span class="number">0</span></span><br><span class="line">  @observable amount = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  @computed <span class="keyword">get</span> <span class="title">total</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.price * <span class="built_in">this</span>.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="computed-计算值"><a href="#computed-计算值" class="headerlink" title="@computed: 计算值"></a><code>@computed</code>: 计算值</h3><blockquote>
<p>黄金法则: 如果你想创建一个基于当前状态的值时，请使用 <code>computed</code>。</p>
</blockquote>
<p>计算值(computed values)是可以根据现有的状态或其它计算值衍生出的值。 概念上来说，它们与 excel 表格中的公式十分相似。 不要低估计算值，因为它们有助于使实际可修改的状态尽可能的小。 此外计算值还是高度优化过的，所以尽可能的多使用它们。</p>
<p>不要把 <code>computed</code> 和 <code>autorun</code> 搞混。它们都是响应式调用的表达式，但是，如果你想响应式的产生一个可以被其它 <code>observer</code> 使用的值，请使用 <code>@computed</code>，如果你不想产生一个新值，而想要达到一个效果，请使用 <code>autorun</code>。 举例来说，效果是像打印日志、发起网络请求等这样命令式的副作用。</p>
<h3 id="action-修改可观察状态"><a href="#action-修改可观察状态" class="headerlink" title="@action: 修改可观察状态"></a><code>@action</code>: 修改可观察状态</h3><p>只有在严格模式(默认是不启用)下使用 MobX 时才需要 <code>action</code> 包装。 建议使用 <code>action</code>，因为它将帮助你更好地组织应用，并表达出一个函数修改状态的意图。 同时,</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticker</span> </span>&#123;</span><br><span class="line">  @observable tick = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  @action increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.tick++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ticker = <span class="keyword">new</span> Ticker()</span><br><span class="line"><span class="built_in">setInterval</span>(ticker.increment, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="runInAction-异步-Action"><a href="#runInAction-异步-Action" class="headerlink" title="runInAction: 异步 Action"></a><code>runInAction</code>: 异步 Action</h3><p><code>runInAction</code> 是个简单的工具函数，它接收代码块并在(异步的)动作中执行。这对于即时创建和执行动作非常有用，例如在异步过程中。<code>runInAction(f)</code> 是 <code>action(f)()</code> 的语法糖。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  @observable data = []</span><br><span class="line"></span><br><span class="line">  asyncAction = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> getData = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(&#123; <span class="attr">data</span>: [] &#125;)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> getData()</span><br><span class="line">    runInAction(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul>
<li>不要传递基础类型值给子组件，使用对象包裹或将整个 store 传给子组件</li>
<li>在所有渲染 <code>@observable</code> 的组件上使用 <code>@observer</code></li>
<li>不要拷贝可观察属性并存储在本地</li>
<li>Render 回调函数不是 render 方法的一部分</li>
<li>间接引用值尽可能晚的使用</li>
<li>使用大量的小组件</li>
<li>在专用组件中渲染列表项</li>
</ul>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>mobx</tag>
      </tags>
  </entry>
  <entry>
    <title>ES标准中相等比较算法SameValue和SameValueZero</title>
    <url>/2020/02/ES%E6%A0%87%E5%87%86%E4%B8%AD%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83%E7%AE%97%E6%B3%95SameValue%E5%92%8CSameValueZero/</url>
    <content><![CDATA[<p>JavaScript 对值的相等判断有很多不同的算法，<code>==</code> 只是最常用的一种。由于 <code>NaN</code> 和正负零的涉入，除了 <code>==</code> 和 <code>===</code> 之外还有 SameValue 和 SameValueZero 算法。</p>
<a id="more"></a>

<h2 id="、-、SameValue"><a href="#、-、SameValue" class="headerlink" title="==、===、SameValue"></a><code>==</code>、<code>===</code>、SameValue</h2><table>
<thead>
<tr>
<th></th>
<th>==</th>
<th>===</th>
<th>SameValue（Object.is）</th>
</tr>
</thead>
<tbody><tr>
<td><code>NaN</code></td>
<td><code>NaN == NaN</code> <code>false</code></td>
<td><code>NaN === NaN</code> <code>false</code></td>
<td><code>Object.is(NaN, NaN)</code> <code>true</code></td>
</tr>
<tr>
<td><code>0</code>、<code>-0</code></td>
<td><code>0 == -0</code> <code>true</code></td>
<td><code>0 === -0</code> <code>true</code></td>
<td><code>Object.is(0, -0)</code> <code>false</code></td>
</tr>
</tbody></table>
<h2 id="SameValueZero"><a href="#SameValueZero" class="headerlink" title="SameValueZero"></a>SameValueZero</h2><p>但是你在使用es6中有没有疑惑这种情况：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">set.add(<span class="number">0</span>)</span><br><span class="line">set.add(<span class="literal">NaN</span>)</span><br><span class="line">set.has(<span class="number">-0</span>) <span class="comment">// true</span></span><br><span class="line">set.has(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>是不是与上述的三种算法的表现多不一样，这就是第四种比较算法 SameValueZero，它与 SameValue 的区别主要在于 <code>0</code> 与 <code>-0</code> 是否相等。</p>
<p>所以你在实践 <code>includes</code> 方法时，遇到：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">0</span>, <span class="literal">NaN</span>]</span><br><span class="line">array.includes(<span class="number">-0</span>) <span class="comment">// true</span></span><br><span class="line">array.includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>就不用大惊小怪了，因为 <code>includes</code> 内部使用的比较算法就是SameValueZero。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 浅比较和深比较</title>
    <url>/2020/02/JavaScript%20%E6%B5%85%E6%AF%94%E8%BE%83%E5%92%8C%E6%B7%B1%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<h2 id="基本类型和引用类型的值"><a href="#基本类型和引用类型的值" class="headerlink" title="基本类型和引用类型的值"></a>基本类型和引用类型的值</h2><p>ECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。<strong>基本类型值</strong>指的是简单的数据段，而<strong>引用类型的值</strong>指那些可能由多个值构成的对象。</p>
<p>在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。</p>
<p>ECMAScript 中有五种基本类型: Undefined、Null、Boolean、Number 和 String。这五种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。</p>
<p>引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存中的位置。也就是说不能直接操作对象的内存空间。在复制保存着对象的某个变量时，操作的是对象的引用。但在为对象添加属性时，操作的是实际的对象。</p>
<blockquote>
<p>在很多语言中，字符串以对象的形式来表示，因此被认为是引用类型的。ECMAScript 放弃了这一传统</p>
</blockquote>
<a id="more"></a>

<h2 id="浅比较"><a href="#浅比较" class="headerlink" title="浅比较"></a>浅比较</h2><p><strong>浅比较</strong>也称引用相等，在 javascript 中， <code>===</code> 是作<strong>浅比较</strong>,只检查左右两边是否是同一个对象的引用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> n = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> x = m</span><br><span class="line"><span class="built_in">console</span>.log(m === n) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(m === n) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量名只是指向栈内存的指针，也就是给这个栈内存取得别名</p>
</blockquote>
<h2 id="深比较"><a href="#深比较" class="headerlink" title="深比较"></a>深比较</h2><p><strong>深比较</strong>也称原值相等，深比较是指检查两个<strong>对象</strong>的所有属性是否<strong>都相等</strong>,深比较需要以递归的方式遍历两个对象的所有属性，操作比较耗时，深比较不管这两个对象是不是同一对象的引用。</p>
<h3 id="lodash-isEqual"><a href="#lodash-isEqual" class="headerlink" title="lodash.isEqual"></a>lodash.isEqual</h3><blockquote>
<p><code>_.isEqual</code>: 执行深比较来确定两者的值是否相等。<br>注意: 这个方法支持比较 <code>arrays</code>, <code>array buffers</code>, <code>booleans</code>, <code>date objects</code>, <code>error objects</code>, <code>maps</code>, <code>numbers</code>, <code>Object objects</code>, <code>regexes</code>, <code>sets</code>, <code>strings</code>, <code>symbols</code>, 以及 <code>typed arrays</code>. Object对象值比较自身的属性，不包括继承的和可枚举的属性。不支持函数和DOM节点比较。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">const</span> m = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">const</span> n = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(_.isEqual(m, n)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="fast-deep-equal"><a href="#fast-deep-equal" class="headerlink" title="fast-deep-equal"></a>fast-deep-equal</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> deepEqual <span class="keyword">from</span> <span class="string">&#x27;fast-deep-equal&#x27;</span></span><br><span class="line">deepEqual(&#123;<span class="attr">name</span>:<span class="string">&#x27;杨俊宁&#x27;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&#x27;杨俊宁&#x27;</span>&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 浅拷贝与深拷贝</title>
    <url>/2020/02/JavaScript%20%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h2 id="基础类型值和引用类型值的区别"><a href="#基础类型值和引用类型值的区别" class="headerlink" title="基础类型值和引用类型值的区别"></a>基础类型值和引用类型值的区别</h2><h3 id="保存方式"><a href="#保存方式" class="headerlink" title="保存方式"></a>保存方式</h3><blockquote>
<p>基础类型：变量 -&gt; 值<br>引用类型：变量 -&gt; 值的堆内存地址 -&gt; 值</p>
</blockquote>
<p>变量保存在栈内存中，栈内存是有序排列的，大小是固定的。在将一个值赋值给变量时，解析器必须确定这个值是基本类型值还是引用类型值。也就是说变量的值到底存的是实际值还是实际值的引用是根据实际值的类型决定的：基础类型的值是保存在变量中实际值，而引用类型的值是保存在堆内存中的堆内存是无序排列的，大小是不固定的），变量中存的值是实际值的堆内存地址。</p>
<a id="more"></a>

<h3 id="复制变量值"><a href="#复制变量值" class="headerlink" title="复制变量值"></a>复制变量值</h3><blockquote>
<p>基础类型：变量a -&gt; 值；变量b -&gt;值的副本<br>引用类型：变量b -&gt; 变量a -&gt; 值的堆内存地址 -&gt; 值</p>
</blockquote>
<p>在 ECMAScript 中，除了保存的方式不同之外，在从一个变量向另一个变量复制基本类型值和引用类型值时，也存在不同。</p>
<p>如果从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上。新值只是一个副本。</p>
<p>当从一个变量向另一个变量复制引用类型的值时，同样也会将存储在变量对象上的值复制一份放到为新变量分配的空间上。不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象。因此改变其中一个变量，就会影响另一个变量。</p>
<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>ECMAScript 中所有函数的参数都是按值（变量的值，不一定是实际值）传递的。也就是说，把函数外部的值复制给函数内部参数，就和把值从一个变量复制给另一个变量是一样的。</p>
<p>在向参数传递基本类型的值时，被传递的值会被复制给一个局部变量（即命名参数，或者用 ECMAScript 的概念来说，就是 <code>arguments</code> 对象中的一个元素）。</p>
<p>在向参数传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。虽然变量是按值传递的，但是这个值它是实际值的引用，所以局部变量也是按照这个引用访问了同一个对象。</p>
<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅复制只复制一层对象的属性，也就是说拷贝原对象的实例，但是对其内部的引用类型值，拷贝的是其引用</p>
<h3 id="自行实现浅拷贝"><a href="#自行实现浅拷贝" class="headerlink" title="自行实现浅拷贝"></a>自行实现浅拷贝</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dst = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (src.hasOwnProperty(prop)) &#123;</span><br><span class="line">      dst[prop] = src[prop]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dst</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">2</span>,<span class="number">3</span>] &#125;</span><br><span class="line"><span class="keyword">var</span> shallowObj = shallowCopy(obj)</span><br><span class="line"><span class="comment">// shallowObj.a = 1</span></span><br><span class="line"><span class="comment">// console.log(obj) // &#123; a:1, arr: [2,3] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shallowObj.arr[0] = 1</span></span><br><span class="line"><span class="comment">// console.log(obj) // &#123; a:1, arr: [1,3] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shallowObj.arr = [1,3]</span></span><br><span class="line"><span class="comment">// console.log(obj) // &#123; a:1, arr: [2,3] &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubG9kYXNoanMuY29tL2RvY3MvbGF0ZXN0I19jbG9uZXZhbHVl" title="https://www.lodashjs.com/docs/latest#_clonevalue">_.clone<i class="fa fa-external-link"></i></span>: 创建一个 value 的浅拷贝。</li>
</ul>
<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深拷贝是对对象以及对象的所有子对象进行拷贝。我们可以使用 lodash 的 <code>cloneDeep</code> 方法，但是深拷贝大数据的时候，由于内部实现是递归，所以最好换实现思路。</p>
<h3 id="JSON-parse-JSON-stringify-深拷贝的局限"><a href="#JSON-parse-JSON-stringify-深拷贝的局限" class="headerlink" title="JSON.parse(JSON.stringify) 深拷贝的局限"></a><code>JSON.parse(JSON.stringify)</code> 深拷贝的局限</h3><ol>
<li>如果被拷贝的对象中有 <code>function</code>，则拷贝之后的对象就会<strong>丢失</strong>这个 <code>function</code></li>
<li>如果被拷贝的对象中有正则表达式，则拷贝之后的正则表达式会变成 <code>Object</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">name</span>: <span class="string">&#x27;youngjuning&#x27;</span>, <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;alert(<span class="built_in">this</span>.name)&#125;, <span class="attr">numberReg</span>: <span class="regexp">/\d+/</span>&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</span><br><span class="line"><span class="comment">// sayName丢失，numberReg变为了对象</span></span><br><span class="line"><span class="built_in">console</span>.dir(b) <span class="comment">// &#123;name: &#x27;youngjuning&#x27;, numberReg: &#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="深拷贝与浅拷贝的区别"><a href="#深拷贝与浅拷贝的区别" class="headerlink" title="深拷贝与浅拷贝的区别"></a>深拷贝与浅拷贝的区别</h2><ul>
<li>深拷贝：将 B 对象拷贝到 A 对象中，包括 B 里面的子对象，</li>
<li>浅拷贝：将 B 对象拷贝到 A 对象中，但不包括 B 里面的子对象</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>React Native 收藏夹</title>
    <url>/2020/02/React%20Native%20%E6%94%B6%E8%97%8F%E5%A4%B9/</url>
    <content><![CDATA[<img src="https://i.loli.net/2020/02/19/6Vnx84tSCOP2XcE.jpg" style="zoom:50%;" />

<a id="more"></a>

<h2 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvY2xpLw==" title="https://github.com/react-native-community/cli/">@react-native-community/cli<i class="fa fa-external-link"></i></span>: Command line tools that ship with react-native</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdC1uYXRpdmUtY29tbXVuaXR5LmdpdGh1Yi5pby91cGdyYWRlLWhlbHBlci8=" title="https://react-native-community.github.io/upgrade-helper/">React Native upgrade helper<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdC1uYXZpZ2F0aW9uLmNhbm55Lmlv" title="https://react-navigation.canny.io">React Navigation FeedBack<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL21ldHJv" title="https://github.com/facebook/metro">metro<i class="fa fa-external-link"></i></span>:  🚇 The JavaScript bundler for React Native</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mYmZsaXBwZXIuY29tLw==" title="https://fbflipper.com/">Flipper<i class="fa fa-external-link"></i></span>: Extensible mobile app debugger</li>
</ul>
<h2 id="必备"><a href="#必备" class="headerlink" title="必备"></a>必备</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi1tb2JpbGUtcm4=" title="https://github.com/ant-design/ant-design-mobile-rn">ant-design/ant-design-mobile-rn<i class="fa fa-external-link"></i></span>: Ant Design for React Native</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdG5hdmlnYXRpb24ub3JnL3poLUhhbnMv" title="https://reactnavigation.org/zh-Hans/">react-navigation<i class="fa fa-external-link"></i></span>: React Native 应用程序的路由和导航</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9yZWFjdC1uYXRpdmUtY29kZS1wdXNo" title="https://github.com/Microsoft/react-native-code-push">react-native-code-push<i class="fa fa-external-link"></i></span> React Native module for CodePush<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0cmF3ZmVycnkvQ29kZVB1c2hEaWFsb2c=" title="https://github.com/strawferry/CodePushDialog">react-native-code-push-dialog<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vUk04R2c3cQ==" title="http://t.cn/RM8Gg7q">react-native-splash-screen<i class="fa fa-external-link"></i></span>): React Native 启动屏，解决 iOS，Android 启动白屏问题，支持 Android 和 iOS</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phc29ubWVyaW5vL3JlYWN0LW5hdGl2ZS1zaW1wbGUtc3RvcmU=" title="https://github.com/jasonmerino/react-native-simple-store">react-native-simple-store<i class="fa fa-external-link"></i></span>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phc29ubWVyaW5vL3JlYWN0LW5hdGl2ZS1zaW1wbGUtc3RvcmU=" title="https://github.com/jasonmerino/react-native-simple-store">https://github.com/jasonmerino/react-native-simple-store<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLWRldmljZS1pbmZv" title="https://github.com/react-native-community/react-native-device-info">react-native-device-info<i class="fa fa-external-link"></i></span>: Device Information for React Native iOS and Android</li>
</ul>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmMtZm9ybQ==" title="https://www.npmjs.com/package/rc-form">rc-form<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtbmF0aXZlLXZhbGlkYXRvcg==" title="https://www.npmjs.com/package/react-native-validator">react-native-validator<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtbmF0aXZlLWNvbmZpcm1hdGlvbi1jb2RlLWZpZWxk" title="https://www.npmjs.com/package/react-native-confirmation-code-field">react-native-confirmation-code-field<i class="fa fa-external-link"></i></span>: A react-native confirmation code field compatible with iOS, Android</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hhbGlsYi9yZWFjdC1uYXRpdmUtdGV4dGlucHV0LWVmZmVjdHM=" title="https://github.com/halilb/react-native-textinput-effects">react-native-textinput-effects<i class="fa fa-external-link"></i></span>: Text inputs with custom label and icon animations for iOS and android. Built with react native and inspired by Codrops.</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtbmF0aXZlLWhpZGUtc2hvdy1wYXNzd29yZC1pbnB1dA==" title="https://www.npmjs.com/package/react-native-hide-show-password-input">react-native-hide-show-password-input<i class="fa fa-external-link"></i></span>: React Native Hide Show Password InputText Component</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLWRhdGV0aW1lcGlja2Vy" title="https://github.com/react-native-community/react-native-datetimepicker">react-native-community/react-native-datetimepicker<i class="fa fa-external-link"></i></span>: React Native date &amp; time picker component for iOS and Android</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtaGFuMzUvcmVhY3QtbmF0aXZlLXNlYXJjaC1iYXI=" title="https://github.com/umhan35/react-native-search-bar">react-native-search-bar<i class="fa fa-external-link"></i></span>: The high-quality iOS native search bar for react native.</li>
</ul>
<h2 id="动画-手势-进度"><a href="#动画-手势-进度" class="headerlink" title="动画/手势/进度"></a>动画/手势/进度</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29ibGFkb3IvcmVhY3QtbmF0aXZlLWFuaW1hdGFibGU=" title="https://github.com/oblador/react-native-animatable">react-native-animatable<i class="fa fa-external-link"></i></span>: React Native 标准易用的动画集和声明性过渡</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvbG90dGllLXJlYWN0LW5hdGl2ZQ==" title="https://github.com/react-native-community/lottie-react-native">lottie-react-native<i class="fa fa-external-link"></i></span>: Lottie wrapper for React Native</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vUnNZQU05Ng==" title="http://t.cn/RsYAM96">react-native-linear-gradient<i class="fa fa-external-link"></i></span>: A <code>&lt;LinearGradient&gt;</code> component for react-native</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWlLTUxXTnk=" title="http://t.cn/AiKMLWNy">react-native-gesture-handler<i class="fa fa-external-link"></i></span>: 声明性 API 将平台原生触摸和手势系统暴露给 React Native</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWlDNEg1bDM=" title="http://t.cn/AiC4H5l3">react-native-spinkit<i class="fa fa-external-link"></i></span>: React Native 的动画加载指示符集合</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29ibGFkb3IvcmVhY3QtbmF0aXZlLXByb2dyZXNz" title="https://github.com/oblador/react-native-progress">react-native-progress<i class="fa fa-external-link"></i></span>: Progress indicators and spinners for React Native using ReactART</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29ibGFkb3IvcmVhY3QtbmF0aXZlLWltYWdlLXByb2dyZXNz" title="https://github.com/oblador/react-native-image-progress">react-native-image-progress<i class="fa fa-external-link"></i></span>:     Progress indicator for networked images in React Native</li>
</ul>
<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RvbUxhZGRlci9yZWFjdC1uYXRpdmUtZWNoYXJ0cy13cmFwcGVy" title="https://github.com/tomLadder/react-native-echarts-wrapper">react-native-echarts-wrapper<i class="fa fa-external-link"></i></span>: ECharts Wrapper for React Native</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F2aXNoYXlpbC9yZWFjdC1uYXRpdmUtdXNlci1hdmF0YXI=" title="https://github.com/avishayil/react-native-user-avatar">react-native-user-avatar<i class="fa fa-external-link"></i></span>: React Native 的头像组件</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtbmF0aXZlLWljb24tYmFkZ2U=" title="https://www.npmjs.com/package/react-native-icon-badge">react-native-icon-badge<i class="fa fa-external-link"></i></span>: Icon badge is used to create icon badge on some element, such as avatar, icon, image…</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtbmF0aXZlLXNpZ25hdHVyZS1jYXB0dXJl" title="https://www.npmjs.com/package/react-native-signature-capture">react-native-signature-capture<i class="fa fa-external-link"></i></span>: React Native library for capturing signature</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWlDNFRnY3c=" title="http://t.cn/AiC4Tgcw">@react-native-community/blur<i class="fa fa-external-link"></i></span>: React Native Blur component</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLXZpZXdwYWdlcg==" title="https://github.com/react-native-community/react-native-viewpager">react-native-viewpager<i class="fa fa-external-link"></i></span>: This component allows the user to swipe left and right through pages of data</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWk5WVU1UU0=" title="http://t.cn/Ai9YU5QM">react-native-looped-carousel<i class="fa fa-external-link"></i></span>: 🎠ReactNative 的循环旋转木马</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWk5WXliWjY=" title="http://t.cn/Ai9YybZ6">react-native-snap-carousel<i class="fa fa-external-link"></i></span>: deck、layout、parallax images</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWk5WTRxWjA=" title="http://t.cn/Ai9Y4qZ0">react-native-app-intro-slider<i class="fa fa-external-link"></i></span>: Easy-to-use yet very configurable app introduction slider/swiper based on FlatList</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvbGFuOTk5OS9yZWFjdC1uYXRpdmUtbGFyZ2VsaXN0" title="https://github.com/bolan9999/react-native-largelist">react-native-largelist <i class="fa fa-external-link"></i></span>: The best large list component for React Native.</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NwaWtlZi9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1wYXNzd29yZA==" title="https://github.com/Spikef/react-native-gesture-password">react-native-gesture-password<i class="fa fa-external-link"></i></span>: 一个React Native的手势密码组件，纯JavaScript实现，因此同时支持iOS、安卓和Web平台。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2k2bWk2L3JlYWN0LW5hdGl2ZS1wYXJhbGxheC1zY3JvbGwtdmlldw==" title="https://github.com/i6mi6/react-native-parallax-scroll-view">react-native-parallax-scroll-view<i class="fa fa-external-link"></i></span>: A ScrollView-like component with parallax and sticky header support.</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vRUlKUU5CUw==" title="http://t.cn/EIJQNBS">react-native-loading-spinner-overlay<i class="fa fa-external-link"></i></span>: React Native Loading Spinner Overlay</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NyYXp5Y29kZWJveS9yZWFjdC1uYXRpdmUtZWFzeS10b2FzdA==" title="https://github.com/crazycodeboy/react-native-easy-toast">react-native-easy-toast<i class="fa fa-external-link"></i></span>: A react native module to show toast like android, it works on iOS and Android.</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plYW5yZWdpc3Nlci9yZWFjdC1uYXRpdmUtcG9wb3Zlcg==" title="https://github.com/jeanregisser/react-native-popover">react-native-popover<i class="fa fa-external-link"></i></span>: A <code>&lt;Popover /&gt;</code> component for react-native</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vcmVub2gxNDkvcmVhY3QtbmF0aXZlLWNvbnRhY3Rz" title="https://github.com/morenoh149/react-native-contacts">react-native-contacts<i class="fa fa-external-link"></i></span>: 通讯录</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plYW5yZWdpc3Nlci9yZWFjdC1uYXRpdmUtc2xpZGVy" title="https://github.com/jeanregisser/react-native-slider">react-native-slider<i class="fa fa-external-link"></i></span>: React Native 的纯 JavaScript Slider 组件</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RlYW5tY3BoZXJzb24vcmVhY3QtbmF0aXZlLXNvcnRhYmxlLWxpc3R2aWV3" title="https://github.com/deanmcpherson/react-native-sortable-listview">react-native-sortable-listview<i class="fa fa-external-link"></i></span>: Drag drop capable wrapper of ListView for React Native</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsZXhicmlsbGFudC9yZWFjdC1uYXRpdmUtZGVjay1zd2lwZXI=" title="https://github.com/alexbrillant/react-native-deck-swiper">react-native-deck-swiper<i class="fa fa-external-link"></i></span>: react-native deck swiper</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1doZWVsZXJMZWUvcmVhY3QtbmF0aXZlLWRyb3Bkb3duLW1lbnU=" title="https://github.com/WheelerLee/react-native-dropdown-menu">react-native-dropdown-menu<i class="fa fa-external-link"></i></span>: 易于使用的 React Native 下拉菜单组件</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGltL3JlYWN0LW5hdGl2ZS1zb3J0YWJsZS1saXN0" title="https://github.com/gitim/react-native-sortable-list">react-native-sortable-list<i class="fa fa-external-link"></i></span>: React Native Sortable List component</li>
</ul>
<h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><ul>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWlDbDVIVHc=" title="http://t.cn/AiCl5HTw">react-native-app-shortcuts<i class="fa fa-external-link"></i></span>: 用于在 React Native 中创建 Android App 快捷方式的库</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWlDNXVUaVA=" title="http://t.cn/AiC5uTiP">react-native-push-notification<i class="fa fa-external-link"></i></span>: React Native Local and Remote Notifications</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pvcmRhbmJ5cm9uL3JlYWN0LW5hdGl2ZS1xdWljay1hY3Rpb25z" title="https://github.com/jordanbyron/react-native-quick-actions">react-native-quick-actions<i class="fa fa-external-link"></i></span>: A react-native interface for Touch 3D home screen quick actions</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vUnNZQXVNQQ==" title="http://t.cn/RsYAuMA">react-native-orientation<i class="fa fa-external-link"></i></span>: 在 react-native 中监听设备方向更改</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLXBlcm1pc3Npb25z" title="https://github.com/react-native-community/react-native-permissions">react-native-permissions<i class="fa fa-external-link"></i></span>:    An unified permissions API for React Native on iOS and Android</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvdWdsYXNqdW5pb3IvcmVhY3QtbmF0aXZlLWtleWJvYXJkLW1hbmFnZXI=" title="https://github.com/douglasjunior/react-native-keyboard-manager">react-native-keyboard-manager<i class="fa fa-external-link"></i></span>: ⚛ Library to prevent issues of keyboard sliding up and cover inputs on React-Native iOS projects.</li>
</ul>
<h2 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h2><ul>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vUmNxdk45eg==" title="http://t.cn/RcqvN9z">react-native-image-crop-picker<i class="fa fa-external-link"></i></span>: iOS/Android image picker with support for camera, video, configurable compression, multiple images and cropping</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h1YW5nenVpenVpL3JlYWN0LW5hdGl2ZS1maWxlLW9wZW5lcg==" title="https://github.com/huangzuizui/react-native-file-opener">react-native-file-opener<i class="fa fa-external-link"></i></span>: A React Native module that allows you to open a file (mp3, mp4, pdf, word, excel, dwg etc.) on your device with its default application</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLWF1ZGlvLXRvb2xraXQ=" title="https://github.com/react-native-community/react-native-audio-toolkit">react-native-audio-toolkit<i class="fa fa-external-link"></i></span>: Cross-platform audio library for React Native</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLXZpZGVv" title="https://github.com/react-native-community/react-native-video">react-native-video<i class="fa fa-external-link"></i></span>: A Video component for react-native</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLWNhbWVyYQ==" title="https://github.com/react-native-community/react-native-camera">react-native-camera<i class="fa fa-external-link"></i></span>: A Camera component for React Native. Also supports barcode scanning!</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0R5bGFuVmFubi9yZWFjdC1uYXRpdmUtZmFzdC1pbWFnZQ==" title="https://github.com/DylanVann/react-native-fast-image">react-native-fast-image<i class="fa fa-external-link"></i></span>:     🚩 FastImage, performant React Native image component.</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWhlbjk0L3JlYWN0LW5hdGl2ZS12aWRlby1wcm9jZXNzaW5n" title="https://github.com/shahen94/react-native-video-processing">react-native-video-processing<i class="fa fa-external-link"></i></span>: React Native 的原生视频编辑/修剪/压缩 🎥 库</li>
</ul>
<h2 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B0ZWxhZC9yZWFjdC1uYXRpdmUtaXBob25lLXgtaGVscGVy" title="https://github.com/ptelad/react-native-iphone-x-helper">react-native-iphone-x-helper<i class="fa fa-external-link"></i></span>: A library to help you design your react-native app for the iPhone X, XS, XS Max &amp; XR</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29ibGFkb3IvcmVhY3QtbmF0aXZlLWtleWNoYWlu" title="https://github.com/oblador/react-native-keychain">react-native-keychain<i class="fa fa-external-link"></i></span>: 🔑 Keychain Access for React Native</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pvc2hzd2FuL3JlYWN0LW5hdGl2ZS1nbG9iYWxpemU=" title="https://github.com/joshswan/react-native-globalize">react-native-globalize<i class="fa fa-external-link"></i></span>: 国际化</li>
</ul>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pvbm55QnVyZ2VyL25weC12aXN1YWxpemUtYnVuZGxl" title="https://github.com/JonnyBurger/npx-visualize-bundle">visualize-bundle<i class="fa fa-external-link"></i></span>: <code>npx visualize-bundle</code> allows you to inspect your React Native bundle in just one command and to diagnose big modules.</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NtYWxsbmV3L3JlYWN0LW5hdGl2ZS1tdWx0aWJ1bmRsZXI=" title="https://github.com/smallnew/react-native-multibundler">react-native-multibundler<i class="fa fa-external-link"></i></span>: react native 可视化 bundle 拆包，支持官方的 0.57~0.59 版本，使用官方的 metro 拆包，适用于 Android、iOS</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nod2VuemhhbmcvQW5kUmVzR3VhcmQ=" title="https://github.com/shwenzhang/AndResGuard">AndResGuard<i class="fa fa-external-link"></i></span>: Android 资源混淆工具</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NreWxvdC9qYWR4" title="https://github.com/skylot/jadx">jadx<i class="fa fa-external-link"></i></span>: 反编译工具</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Zyb3N0bmV5L3JlYWN0LW5hdGl2ZS1jcmVhdGUtbGlicmFyeQ==" title="https://github.com/frostney/react-native-create-library">react-native-create-library<i class="fa fa-external-link"></i></span>: 📓 Command line tool to create a React Native library with a single command</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vUmswbzJlbQ==" title="http://t.cn/Rk0o2em">lisong/code-push-server<i class="fa fa-external-link"></i></span>: 自建 code-push 服务器</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dpeC93bWw=" title="https://github.com/wix/wml">wml<i class="fa fa-external-link"></i></span>: 符号链接的替代方法，它实际上将已更改的文件从源文件夹复制到目标文件夹</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ldGhlcmNyZWF0aXZlLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUtc2hhZG93LWdlbmVyYXRvci8=" title="https://ethercreative.github.io/react-native-shadow-generator/">react-native-shadow-generator<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NhbGxzdGFjay9yZWFjdC1uYXRpdmUtYnVpbGRlci1ib2I=" title="https://github.com/callstack/react-native-builder-bob">react-native-builder-bob<i class="fa fa-external-link"></i></span>: 👷‍♂️ Simple CLI to scaffold and build React Native libraries for different targets.</li>
</ul>
<h2 id="第三方SDK"><a href="#第三方SDK" class="headerlink" title="第三方SDK"></a>第三方SDK</h2><ul>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vUklQTk9kNQ==" title="http://t.cn/RIPNOd5">jpush-react-native<i class="fa fa-external-link"></i></span>: 极光推送官方支持的 React Native 插件</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Npc2h1Z3Vvaml4dWVmdS9yZWFjdC1uYXRpdmUtcWluaXU=" title="https://github.com/sishuguojixuefu/react-native-qiniu">react-native-qiniu<i class="fa fa-external-link"></i></span>: react-native-qiniu</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vRTlXMVJoTQ==" title="http://t.cn/E9W1RhM">react-native-amap3d<i class="fa fa-external-link"></i></span>: react-native 高德地图组件，使用最新 3D SDK，支持 Android + iOS</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vRTlXMXJ3Yg==" title="http://t.cn/E9W1rwb">react-native-amap-geolocation<i class="fa fa-external-link"></i></span>: React Native geolocation module for Android + iOS</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktcmVhY3QtbmF0aXZl" title="https://github.com/getsentry/sentry-react-native">sentry-react-native<i class="fa fa-external-link"></i></span>: Official Sentry SDK for react-native</li>
</ul>
<h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0b25lV2ViL2VsbS1yZWFjdC1uYXRpdmU=" title="https://github.com/stoneWeb/elm-react-native">elm-react-native<i class="fa fa-external-link"></i></span>: A react native app simulating eleme app，run ios and android.</li>
</ul>
<h2 id="优质文章"><a href="#优质文章" class="headerlink" title="优质文章"></a>优质文章</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvSmRXOVlSZEU=" title="https://bre.is/JdW9YRdE">用React-Native+Mobx做一个迷你水果商城APP<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMveE5Rd05aYlo=" title="https://bre.is/xNQwNZbZ">react-native 通讯录字母跳转分组功能<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvRHhFWFlCZng=" title="https://bre.is/DxEXYBfx">React Native应用部署/热更新-CodePush最新集成总结(新)<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>LeancloudPushDemo: React native + leancloud push notification demo</li>
<li>react-native-code-push-dialog: CodePush Custom Dialog，注意：苹果 App、中国的 android 市场必须采用静默更新</li>
<li>react-native-dropdown        这是下拉菜单的简单实现</li>
<li>react-native-baidu-map        百度地图 React Native 模块，支持 react native 0.57+，已更新到最新的百度地图 SDK 版本。</li>
<li>react-native-search-box        A simple search box with animation, inspired from ios search bar. Lightweight, fast, flexible.</li>
</ul>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>收藏夹</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native 安卓必知必会</title>
    <url>/2020/02/React-Native-%E5%AE%89%E5%8D%93%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
    <content><![CDATA[<img src="https://i.loli.net/2020/02/21/xUfw9Ib4TRsQGeM.png" style="zoom:70%;" />

<a id="more"></a>

<h2 id="配置应用名"><a href="#配置应用名" class="headerlink" title="配置应用名"></a>配置应用名</h2><p>很简单,我们直接打开 <code>android/app/src/main/res/values/strings.xml</code>，即可看到配置中的 <code>app_name</code>，修改为你想要的即可。</p>
<h2 id="配置图标"><a href="#配置图标" class="headerlink" title="配置图标"></a>配置图标</h2><p>也很简单，在 <code>android\app\src\main\res\mipmap-xxxxxx</code> 中直接覆盖图标就可以，注意图标的大小。</p>
<h2 id="打包-APK"><a href="#打包-APK" class="headerlink" title="打包 APK"></a>打包 APK</h2><p>1、在项目根目录执行 <code>keytool -genkeypair -v -keystore release.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000</code> 生成密钥文件 <code>release.keystore</code></p>
<p>2、把 <code>release.keystore</code> 文件放到你工程中的 <code>android/app</code> 文件夹下。</p>
<p>3、配置 <code>android/app/build.gradle</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    ...</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">&quot;release.keystore&quot;</span>)</span></span></span><br><span class="line"><span class="function">            storePassword &quot;****&quot;</span></span><br><span class="line"><span class="function">            keyAlias &quot;my-key-alias&quot;</span></span><br><span class="line"><span class="function">            keyPassword &quot;****&quot;</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    ...</span></span><br><span class="line"><span class="function">    buildTypes </span>&#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            ...</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="去除无用的语言资源"><a href="#去除无用的语言资源" class="headerlink" title="去除无用的语言资源"></a>去除无用的语言资源</h3><p>通过配置 <code>android/defaultConfig/resConfigs</code> 可以选择只打包哪几种语言，进而去掉各种 aar 包中全世界的语言，尤其是 support 包中的。</p>
<p>选择保留什么语言要根据产品的用户和市场来定，如果只选择默认英语和中文语言，配置如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line"><span class="addition">+    resConfigs &quot;en&quot;,&quot;zh&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置-PackagingOptions"><a href="#配置-PackagingOptions" class="headerlink" title="配置 PackagingOptions"></a>配置 PackagingOptions</h3><p>打开 <code>android/app/build.gradle</code> 文件，添加如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">packagingOptions &#123;</span><br><span class="line">    exclude &#39;META-INF&#x2F;android_release.kotlin_module&#39;</span><br><span class="line">    exclude &#39;META-INF&#x2F;DEPENDENCIES&#39;</span><br><span class="line">    exclude &#39;META-INF&#x2F;LICENSE&#39;</span><br><span class="line">    exclude &#39;META-INF&#x2F;LICENSE.txt&#39;</span><br><span class="line">    exclude &#39;META-INF&#x2F;license.txt&#39;</span><br><span class="line">    exclude &#39;META-INF&#x2F;NOTICE&#39;</span><br><span class="line">    exclude &#39;META-INF&#x2F;NOTICE.txt&#39;</span><br><span class="line">    exclude &#39;META-INF&#x2F;notice.txt&#39;</span><br><span class="line">    exclude &#39;META-INF&#x2F;ASL2.0&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>pickFirsts: 当出现重复文件，会使用第一个匹配的文件打包进入 apk</li>
<li>merges: 当出现重复文件，合并重复的文件打入 apk</li>
<li>excludes: 打包的时候排除匹配的文件</li>
</ul>
<p><strong>参考链接</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vRXd0MXhEMg==" title="http://t.cn/Ewt1xD2">PackagingOptions<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWlwdU05TGw=" title="http://t.cn/AipuM9Ll">More than one file was found with OS independent path<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vQWlwdU1mY0g=" title="http://t.cn/AipuMfcH">More than one file was found with OS independent path ‘META-INF/LICENSE’<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="配置-splits"><a href="#配置-splits" class="headerlink" title="配置 splits"></a>配置 splits</h3><blockquote>
<p>查看手机 CPU 信息：<code>adb shell</code> -&gt; <code>cd /proc</code> -&gt; <code>cat cpuinfo</code></p>
</blockquote>
<p>默认情况下，生成的 <code>APK</code> 会同时包含针对于 <code>x86</code> 和 <code>ARMv7a</code> 两种 <code>CPU</code> 架构的原生代码。这样可以让我们更方便的向其他人分享这个 <code>APK</code>，因为它几乎可以运行在所有的 Android 设备上。但是，这会导致所有设备上都有一些根本不会运行的代码，白白占据了空间。目前安卓设备绝大多数是 <code>ARM</code> 架构，因此对于大部分应用来说可以考虑去掉 <code>x86</code> 架构的支持。</p>
<p>你可以在 <code>android/app/build.gradle</code> 中修改如下代码：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- include &quot;armeabi-v7a&quot;, &quot;x86&quot;, &quot;arm64-v8a&quot;, &quot;x86_64&quot;</span></span><br><span class="line"><span class="addition">+ include &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot;</span></span><br><span class="line"><span class="deletion">- def versionCodes = [&quot;armeabi-v7a&quot;:1, &quot;x86&quot;:2, &quot;arm64-v8a&quot;: 3, &quot;x86_64&quot;: 4]</span></span><br><span class="line"><span class="addition">+ def versionCodes = [&quot;armeabi-v7a&quot;:1, &quot;arm64-v8a&quot;: 2]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>abi: Application Binary Interface，针对不同的 <code>CPU</code> 架构生成 <code>APK</code> 以减小 <code>APK</code> 文件的大小</p>
<ul>
<li><code>mips/mips64</code>：极少用于手机，出发点是高性能,主要用于路由器、猫。</li>
<li><code>armeabi</code>：老版本 <code>ARMv5</code>，不支持硬件辅助浮点运算，支持所有的 <code>ARM</code> 设备。</li>
<li><code>x86</code>/<code>x86_64</code>：<code>x86</code> 架构的手机的市场占有率很低，约为 1%左右。而且 <code>x86</code> 架构都包含 <code>ARM</code> 模拟层，兼容 <code>ARM</code> 类型的 <code>ABI</code>。注意，模拟器为 <code>x86</code> 架构。</li>
<li><code>arm64-v8a</code>：64 位 <code>ARM</code> 架构。可用 32 位模式运行 <code>armeabi-v7a</code> 和 <code>armeabi</code>。（所谓的 <code>ARMv8</code> 架构，就是在 <code>MIPS64</code> 架构上增加了 <code>ARMv7</code> 架构中已经拥有的的 <code>TrustZone</code> 技术、虚拟化技术及 <code>NEON advanced SIMD</code> 技术等特性，研发成的）</li>
<li><code>armeabi-v7a</code>：主流版本 <code>AMRv7</code>，2011 年 15 月以后的生产的大部分 Android 设备都使用它。</li>
</ul>
</li>
<li><p>density: 针对不同的分辨率生成 <code>APK</code> 以减小 <code>APK</code> 文件的大小</p>
</li>
</ul>
<h3 id="Failed-to-read-PNG-signature-file-does-not-start-with-PNG-signature"><a href="#Failed-to-read-PNG-signature-file-does-not-start-with-PNG-signature" class="headerlink" title="Failed to read PNG signature: file does not start with PNG signature"></a>Failed to read PNG signature: file does not start with PNG signature</h3><p>有时从网上下载的 Demo 资源文件不规范，会出现直接将 jpg 文件改为 png 后缀名的情况，gradle 打包检查时报错编译通不过的。我们通过 <code>aaptOptions.cruncherEnabled=false</code> 来禁止 Gradle 检查 png 的合法性：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  aaptOptions &#123;</span><br><span class="line">    cruncherEnabled=false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置-dexOptions-javaMaxHeapSize"><a href="#配置-dexOptions-javaMaxHeapSize" class="headerlink" title="配置 dexOptions.javaMaxHeapSize"></a>配置 dexOptions.javaMaxHeapSize</h3><blockquote>
<p>android studio 需要较大的内存才能正常编译项目，主要解决这个警告：<span class="exturl" data-url="aHR0cDovL3QuY24vRVpjVER0Vg==" title="http://t.cn/EZcTDtV">com.android.build.api.transform.TransformException<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>在 <code>android\gradle.properties</code> 中加入以下配置：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ dexOptions.javaMaxHeapSize = 2g</span></span><br></pre></td></tr></table></figure>

<h3 id="gradle-优化配置"><a href="#gradle-优化配置" class="headerlink" title="gradle 优化配置"></a>gradle 优化配置</h3><p>在 <code>android\gradle.properties</code> 中加入以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 让gradle使用单独的守护进程</span><br><span class="line">org.gradle.daemon&#x3D;true</span><br><span class="line"># 让gradle并行编译</span><br><span class="line">org.gradle.parallel&#x3D;true</span><br><span class="line"># 让gradle在需要的时候才配置</span><br><span class="line">org.gradle.configureondemand&#x3D;true</span><br><span class="line"># 增加gradle运行的java虚拟机的大小</span><br><span class="line">org.gradle.jvmargs&#x3D;-Xmx3072m -XX:MaxPermSize&#x3D;1024m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure>

<h3 id="配置方法数超过-64K-的应用"><a href="#配置方法数超过-64K-的应用" class="headerlink" title="配置方法数超过 64K 的应用"></a>配置方法数超过 64K 的应用</h3><p>随着 Android 平台的持续成长，Android 应用的大小也在增加。当您的应用及其引用的库达到特定大小时，您会遇到构建错误，指明您的应用已达到 Android 应用构建架构的极限。会报告这一错误：</p>
<blockquote>
<p>The number of method references in a .dex file cannot exceed 64K.</p>
</blockquote>
<p>解决办法是配置您的应用进行 Dalvik 可执行文件分包，在 <code>android/app/build.gradle</code> 中做下面的配置：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line"><span class="addition">+    multiDexEnabled true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BuildConfig"><a href="#BuildConfig" class="headerlink" title="BuildConfig"></a>BuildConfig</h2><blockquote>
<p>在 react-native 中，我们可以借助 react-native-config-reader 来方便地读取这些属性</p>
</blockquote>
<p>BuildConfig 是程序编译后，根据 buildType 生成在 <code>app\build\generated\source\buildConfig\debug(release)\</code> 包名下的一个 java 文件。默认有一下属性：</p>
<ul>
<li>DEBUG：是否是调试版本</li>
<li>APPLICATION_ID：当前应用的包名</li>
<li>FLAVOR：产品（渠道包的名称）</li>
<li>BUILD_TYPE：当前的编译类型(release/debug)</li>
<li>VERSION_CODE：版本号(数字)</li>
<li>VERSION_NAME：版本号</li>
</ul>
<h3 id="自定义-BuildConfig"><a href="#自定义-BuildConfig" class="headerlink" title="自定义 BuildConfig"></a>自定义 BuildConfig</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">  <span class="comment">// 三个参数: 1.要定义的常量的类型 2.该常量的命名 3.该常量的值</span></span><br><span class="line">  <span class="comment">// APP_NAME，对应 ios 的 CFBundleDisplayName</span></span><br><span class="line">  buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;APP_NAME&quot;</span>, <span class="string">&#x27;&quot;我是谁&quot;&#x27;</span></span><br><span class="line">  <span class="comment">// BUILD_TIME</span></span><br><span class="line">  buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;BUILD_TIME&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span> + <span class="keyword">new</span> Date().format(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>, TimeZone.getTimeZone(<span class="string">&quot;Asia/Shanghai&quot;</span>)) + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在子模块中取主项目的-BuildConfig"><a href="#在子模块中取主项目的-BuildConfig" class="headerlink" title="在子模块中取主项目的 BuildConfig"></a>在子模块中取主项目的 BuildConfig</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBuildConfigValue</span><span class="params">(Context context, String fieldName)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Class&lt;?&gt; clazz = Class.forName(context.getPackageName() + <span class="string">&quot;.BuildConfig&quot;</span>);</span><br><span class="line">    Field field = clazz.getField(fieldName);</span><br><span class="line">    <span class="keyword">return</span> field.get(<span class="keyword">null</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">String versionName = (String)getBuildConfigValue(activity, <span class="string">&quot;VERSION_NAME&quot;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zZDliMjNhZmU1MTQ=" title="https://www.jianshu.com/p/3d9b23afe514">BuildConfig 与 build.gradle 的关系<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yNzRjOWQ5NWNmNzY=" title="https://www.jianshu.com/p/274c9d95cf76">Gradle 之 BuildConfig 自定义常量<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="解决在-Android-P-上的提醒弹窗-（Detected-problems-with-API-compatibility-visit-g-co-dev-appcompat-for-more-info"><a href="#解决在-Android-P-上的提醒弹窗-（Detected-problems-with-API-compatibility-visit-g-co-dev-appcompat-for-more-info" class="headerlink" title="解决在 Android P 上的提醒弹窗 （Detected problems with API compatibility(visit g.co/dev/appcompat for more info)"></a>解决在 Android P 上的提醒弹窗 （Detected problems with API compatibility(visit g.co/dev/appcompat for more info)</h2><p>在 <code>MainActivity.java</code> 中添加 closeAndroidPDialog 方法并在 <code>onCreate</code> 方法中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line">...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  closeAndroidPDialog(); <span class="comment">// here</span></span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeAndroidPDialog</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Class aClass = Class.forName(<span class="string">&quot;android.content.pm.PackageParser$Package&quot;</span>);</span><br><span class="line">    Constructor declaredConstructor = aClass.getDeclaredConstructor(String.class);</span><br><span class="line">    declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Class cls = Class.forName(<span class="string">&quot;android.app.ActivityThread&quot;</span>);</span><br><span class="line">    Method declaredMethod = cls.getDeclaredMethod(<span class="string">&quot;currentActivityThread&quot;</span>);</span><br><span class="line">    declaredMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object activityThread = declaredMethod.invoke(<span class="keyword">null</span>);</span><br><span class="line">    Field mHiddenApiWarningShown = cls.getDeclaredField(<span class="string">&quot;mHiddenApiWarningShown&quot;</span>);</span><br><span class="line">    mHiddenApiWarningShown.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    mHiddenApiWarningShown.setBoolean(activityThread, <span class="keyword">true</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="闪屏图尺寸"><a href="#闪屏图尺寸" class="headerlink" title="闪屏图尺寸"></a>闪屏图尺寸</h2><ul>
<li>mdpi：320x480</li>
<li>hdpi：480x800</li>
<li>xhdpi：720x1280</li>
<li>xxhdpi：1080x1920</li>
<li>xxxhdpi：2160x3840</li>
</ul>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native 配置字体大小不随字体设置变化</title>
    <url>/2020/02/React-Native-%E9%85%8D%E7%BD%AE%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E4%B8%8D%E9%9A%8F%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE%E5%8F%98%E5%8C%96/</url>
    <content><![CDATA[<p>添加以下代码到 <code>index.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AppRegistry, Text, TextInput &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line">Text.defaultProps = &#123; ...Text.defaultProps, <span class="attr">allowFontScaling</span>: <span class="literal">false</span> &#125;</span><br><span class="line">TextInput.defaultProps = &#123; ...TextInput.defaultProps, <span class="attr">allowFontScaling</span>: <span class="literal">false</span> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>字体</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript中type和interface的区别</title>
    <url>/2020/02/TypeScript%E4%B8%ADtype%E5%92%8Cinterface%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/02/19/MIStsCk9XxZgv3G.png" alt=""></p>
<a id="more"></a>

<h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><h3 id="都可以描述一个对象或者函数"><a href="#都可以描述一个对象或者函数" class="headerlink" title="都可以描述一个对象或者函数"></a>都可以描述一个对象或者函数</h3><h4 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> SetUser &#123;</span><br><span class="line">  (name: <span class="built_in">string</span>, age: <span class="built_in">number</span>) : <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> SetUser = <span class="function">(<span class="params">name:<span class="built_in">string</span>, age: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br></pre></td></tr></table></figure>

<h3 id="都允许拓展（extends）"><a href="#都允许拓展（extends）" class="headerlink" title="都允许拓展（extends）"></a>都允许拓展（<code>extends</code>）</h3><p><code>interface</code> 和 <code>type</code> 都可以扩展，并且两者并不是相互独立的，也就是说 <code>interface</code> 可以 <code>extends</code> <code>type</code>，<code>type</code> 也可以 <code>extends</code> <code>interface</code>。<strong>虽然效果差不多，但是两者语法不同</strong>。</p>
<h4 id="interface-extends-type"><a href="#interface-extends-type" class="headerlink" title="interface extends type"></a>interface extends type</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> User <span class="keyword">extends</span> Name &#123;</span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="type-extends-interface"><a href="#type-extends-interface" class="headerlink" title="type extends interface"></a>type extends interface</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Name &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> User = Name &amp; &#123;</span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="type-可以而-interface-不行"><a href="#type-可以而-interface-不行" class="headerlink" title="type 可以而 interface 不行"></a>type 可以而 interface 不行</h3><h4 id="type可以声明基本类型别名，联合类型，元组等类型"><a href="#type可以声明基本类型别名，联合类型，元组等类型" class="headerlink" title="type可以声明基本类型别名，联合类型，元组等类型"></a>type可以声明基本类型别名，联合类型，元组等类型</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本类型别名</span></span><br><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span></span><br><span class="line"><span class="comment">// 联合类型</span></span><br><span class="line"><span class="keyword">interface</span> Dog &#123;</span><br><span class="line">  wong()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Cat &#123;</span><br><span class="line">  miao()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Pet = Dog | Cat</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体定义数组每个的类型</span></span><br><span class="line"><span class="keyword">type</span> PetList = [Dog, Pet]</span><br></pre></td></tr></table></figure>

<h4 id="type-语句中还可以使用-typeof-获取实例的类型进行赋值"><a href="#type-语句中还可以使用-typeof-获取实例的类型进行赋值" class="headerlink" title="type 语句中还可以使用 typeof 获取实例的类型进行赋值"></a>type 语句中还可以使用 typeof 获取实例的类型进行赋值</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当你想获取一个变量的类型时，使用 typeof</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="keyword">type</span> B = <span class="keyword">typeof</span> div</span><br></pre></td></tr></table></figure>

<h3 id="interface-可以而-type-不行"><a href="#interface-可以而-type-不行" class="headerlink" title="interface 可以而 type 不行"></a>interface 可以而 type 不行</h3><p>interface 能够声明合并</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  sex: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">User 接口为 &#123;</span></span><br><span class="line"><span class="comment">  name: string</span></span><br><span class="line"><span class="comment">  age: number</span></span><br><span class="line"><span class="comment">  sex: string</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
<th align="center">公众号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>Vue.js - 封装Axios实现全局的loading自动显示效果（结合Element UI）</title>
    <url>/2020/02/Vue-js-%E5%B0%81%E8%A3%85Axios%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E7%9A%84loading%E8%87%AA%E5%8A%A8%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C%EF%BC%88%E7%BB%93%E5%90%88Element-UI%EF%BC%89/</url>
    <content><![CDATA[<p>在 vue 项目中，我们通常会使用 axios 库来与后台进行数据交互。而当我们发起 ajax 请求时，常常需要在页面上显示一个加载框（Loading 效果），然后等数据返回后自动将其隐藏。要实现这个功能，我们可以在每次请求前手动显示个加载框，等收到数据后又将其隐藏。但如果每个请求要都这么做，就略显麻烦。<br>下面通过样例演示如何封装一个带 loading 效果的 Axios 组件，它能够对请求和响应进行拦截从而实现 loading 的自动显示与隐藏，并且在请求失败时自动弹出消息提示框显示错误信息。</p>
<p>原文出自：<span class="exturl" data-url="aHR0cDovL3d3dy5oYW5nZ2UuY29t" title="http://www.hangge.com">www.hangge.com<i class="fa fa-external-link"></i></span>  转载请保留原文链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaGFuZ2dlLmNvbS9ibG9nL2NhY2hlL2RldGFpbF8yNTU0Lmh0bWw=" title="https://www.hangge.com/blog/cache/detail_2554.html">https://www.hangge.com/blog/cache/detail_2554.html<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>

<h2 id="组件封装"><a href="#组件封装" class="headerlink" title="组件封装"></a>组件封装</h2><p>（1）在项目中创建一个 http.js，里面内容是对 Axios 进行二次封装，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Message,Loading &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = axios.create(&#123;</span><br><span class="line">    baseURL:process.env.BASE_URL, <span class="comment">//设置请求的base url</span></span><br><span class="line">    timeout:<span class="number">40000</span> <span class="comment">//超时时长</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//loading对象</span></span><br><span class="line"><span class="keyword">let</span> loading;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前正在请求的数量</span></span><br><span class="line"><span class="keyword">let</span> needLoadingRequestCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示loading</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showLoading</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 后面这个判断很重要，因为关闭时加了抖动，此时loading对象可能还存在，</span></span><br><span class="line">  <span class="comment">// 但needLoadingRequestCount已经变成0.避免这种情况下会重新创建个loading</span></span><br><span class="line">  <span class="keyword">if</span> (needLoadingRequestCount === <span class="number">0</span> &amp;&amp; !loading) &#123;</span><br><span class="line">    loading = Loading.service(&#123;</span><br><span class="line">      lock: <span class="literal">true</span>,</span><br><span class="line">      text: <span class="string">&quot;Loading...&quot;</span>,</span><br><span class="line">      background: <span class="string">&#x27;rgba(255, 255, 255, 0.5)&#x27;</span>,</span><br><span class="line">      target: target || <span class="string">&quot;body&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  needLoadingRequestCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//隐藏loading</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hideLoading</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  needLoadingRequestCount--;</span><br><span class="line">  needLoadingRequestCount = <span class="built_in">Math</span>.max(needLoadingRequestCount, <span class="number">0</span>); <span class="comment">//做个保护</span></span><br><span class="line">  <span class="keyword">if</span> (needLoadingRequestCount === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//关闭loading</span></span><br><span class="line">    toHideLoading();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//防抖：将 300ms 间隔内的关闭 loading 便合并为一次。防止连续请求时， loading闪烁的问题。</span></span><br><span class="line"><span class="keyword">var</span> toHideLoading = _.debounce(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      loading.close();</span><br><span class="line">      loading = <span class="literal">null</span>;</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加请求拦截器</span></span><br><span class="line">http.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//判断当前请求是否设置了不显示Loading</span></span><br><span class="line">  <span class="keyword">if</span>(config.headers.showLoading !== <span class="literal">false</span>)&#123;</span><br><span class="line">    showLoading(config.headers.loadingTarget);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//判断当前请求是否设置了不显示Loading</span></span><br><span class="line">  <span class="keyword">if</span>(config.headers.showLoading !== <span class="literal">false</span>)&#123;</span><br><span class="line">    hideLoading();</span><br><span class="line">  &#125;</span><br><span class="line">  Message.error(<span class="string">&#x27;请求超时!&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应拦截器</span></span><br><span class="line">http.interceptors.response.use(</span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">      <span class="comment">//判断当前请求是否设置了不显示Loading（不显示自然无需隐藏）</span></span><br><span class="line">      <span class="keyword">if</span>(response.config.headers.showLoading !== <span class="literal">false</span>)&#123;</span><br><span class="line">        hideLoading();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">      <span class="comment">//判断当前请求是否设置了不显示Loading（不显示自然无需隐藏）</span></span><br><span class="line">      <span class="keyword">if</span>(error.config.headers.showLoading !== <span class="literal">false</span>)&#123;</span><br><span class="line">        hideLoading();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(error.response &amp;&amp; error.response.data &amp;&amp; error.response.data.message) &#123;</span><br><span class="line">        <span class="keyword">var</span> jsonObj = <span class="built_in">JSON</span>.parse(error.response.data.message);</span><br><span class="line">        Message.error(jsonObj.message);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Message.error(error.message);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http;</span><br></pre></td></tr></table></figure>

<p><strong>代码说明：</strong></p>
<ul>
<li>基本原理是通过 axios 提供的请求拦截和响应拦截的接口，控制 <code>loading</code> 的显示或者隐藏。同时在请求失败时还会自动弹出消息提示框显示错误信息。</li>
<li><code>loading</code> 效果这里采用的是 Element UI 中提供的 Loading 组件来实现。而错误消息提示框则用的是 Element UI 中的 Message 组件来实现。</li>
<li>内部有个计数器，确保同一时刻如果有多个请求的话，不会同时出现多个 <code>loading</code>，而是只有 1 个。并且在所有请求结束后才会隐藏 <code>loading</code>。</li>
<li>使用了 <code>lodash</code> 的 <code>debounce</code> 防抖。因为有时会碰到在一次请求完毕后又立刻又发起一个新的请求的情况（比如删除一个表格条目后立刻进行刷新）。这种情况会造成连续 <code>loading</code> 两次，并且中间有一次极短的闪烁。通过防抖可以让 300ms 间隔内的 <code>loading</code> 便合并为一次，避免闪烁的情况。</li>
<li>默认所有请求都会自动有 <code>loading</code> 效果。如果某个请求不需要 <code>loading</code> 效果，可以在请求 <code>header</code> 中 <code>showLoading</code> 设置为 <code>false</code>。</li>
<li>默认的 <code>loading</code> 效果时全屏的（覆盖在 <code>body</code> 上）。如果某个请求是需要在某个指定元素上显示 <code>loading</code> 效果，可以将请求 <code>header</code> 中 <code>loadingTarget</code> 设置为该元素的选择符。</li>
</ul>
<p>（2）接着在 main.js 中将该组件引入，并定义成原型属性方便使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;./utils/http.js&#x27;</span></span><br><span class="line">Vue.prototype.axios = http</span><br></pre></td></tr></table></figure>

<h2 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h2><p>（1）正常情况下，每次发起请求页面上都会显示一个全屏的 <code>loading</code> 效果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.axios.get(<span class="string">&quot;/api/menu&quot;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.menus = response.data;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://www.hangge.com/blog_uploads/201908/2019081010013559515.png" alt=""></p>
<p>（2）如果在请求 <code>header</code> 中传递个 <code>showLoading:false</code> 参数，则该请求不会有 <code>loading</code> 效果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.axios.get(<span class="string">&quot;/api/getDeviceDatas&quot;</span>,&#123;<span class="attr">headers</span>: &#123;<span class="string">&#x27;showLoading&#x27;</span>: <span class="literal">false</span>&#125;&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.tableData = response.data;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://www.hangge.com/blog_uploads/201908/2019081010075766014.png" alt=""></p>
<p>（3）如果将请求 <code>header</code> 中 <code>loadingTarget</code> 设置为页面上某个元素的选择符，则 <code>loading</code> 效果会只显示在个元素区域上。比如我们下面代码我们只让 loading 遮罩显示在弹出框的内容区域上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.axios.get(<span class="string">&quot;/api/controlApp?method=&quot;</span> + method, &#123;<span class="attr">headers</span>: &#123;<span class="string">&#x27;loadingTarget&#x27;</span>: <span class="string">&#x27;#dialogContent&#x27;</span>&#125;&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 重新加载数据</span></span><br><span class="line">  <span class="built_in">this</span>.loadAppData();</span><br><span class="line">  <span class="built_in">this</span>.$message.success(<span class="string">&#x27;执行成功!&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://www.hangge.com/blog_uploads/201908/2019081010141930853.png" alt=""></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode 11 配置 LaunchImage</title>
    <url>/2020/02/Xcode%2011%20%E9%85%8D%E7%BD%AE%20LaunchImage/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/01/NF3TuSW7Pn8irGs.png" alt="image.png"></p>
<a id="more"></a>

<p>如果有设计师资源，请 ui 同学提供以下尺寸的图片</p>
<ul>
<li>640x960</li>
<li>640x1136</li>
<li>750x1334</li>
<li>828x1792</li>
<li>1125x2436</li>
<li>1242x2436</li>
</ul>
<p>如果你没有设计师资源，可以使用 <span class="exturl" data-url="aHR0cHM6Ly9pY29uLnd1cnVpaG9uZy5jb20v" title="https://icon.wuruihong.com/">图标工厂<i class="fa fa-external-link"></i></span> 自行生成</p>
<p>1、添加 LaunchImage</p>
<p><img src="https://i.loli.net/2019/09/16/SpIYPmE7MHTzw6o.png" alt=""></p>
<p>2、将准备好的图片拖到下图红框的区域</p>
<p><img src="https://i.loli.net/2019/09/16/bBO1u4PAaWLdMqV.png" alt=""></p>
<p>3、你在 <code>buildSetting</code> 中搜索 <code>launch</code>,可看到 <code>Asset Catalog Launch Image Set Name</code> 你只要把对应的<code>LaunchImage</code> 名称设置上去就好了:</p>
<p><img src="https://i.loli.net/2020/02/21/dXqnrGc2sWK4aVP.png" alt=""></p>
<p>4、清空 Launch Screen File</p>
<p><img src="https://i.loli.net/2020/02/21/oyFKjUY1RZwtf45.png" alt=""></p>
<p>5、最后别忘了把 <code>Info.list</code> 的 <code>UILaunchStoryboardName</code> 删除:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchStoryboardName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>LaunchScreen<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>移动端</category>
        <category>ios</category>
      </categories>
      <tags>
        <tag>LaunchImage</tag>
        <tag>启动图</tag>
      </tags>
  </entry>
  <entry>
    <title>apply、call、bind三兄弟</title>
    <url>/2020/02/apply%E3%80%81call%E3%80%81bind%E4%B8%89%E5%85%84%E5%BC%9F/</url>
    <content><![CDATA[<p>这三个函数的存在意义是什么？答案是<strong>改变函数执行时的上下文</strong>，再具体一点就是改变函数运行时的 <code>this</code> 指向。</p>
<a id="more"></a>

<h2 id="在特定的作用域中调用函数"><a href="#在特定的作用域中调用函数" class="headerlink" title="在特定的作用域中调用函数"></a>在特定的作用域中调用函数</h2><p><code>apply()</code> 和 <code>call()</code> 方法的用途都是在特定的作用域中调用函数。</p>
<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><blockquote>
<p><code>apply</code> 方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组。其中，第二个参数可以是 Array 的实例，也可以是 <code>arguments</code> 对象。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum1</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>) <span class="comment">// 传入 arguments 对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum2</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum.apply(<span class="built_in">this</span>, [num1, num2]) <span class="comment">// 传入参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(callSum1(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">console</span>.log(callSum2(<span class="number">10</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><blockquote>
<p><code>call()</code> 方法与 <code>apply()</code> 方法的作用相同，它们区别仅在于接受参数的方式不同。对于 <code>call()</code> 方法而言，第一个参数是 <code>this</code> 值没有变化，变化的是其余参数都直接传递给函数。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum.call(<span class="built_in">this</span>, num1, num2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(callSum(<span class="number">10</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不传递参数的情况下，使用 <code>call()</code> 方法语义跟明确</p>
</blockquote>
<h2 id="创建一个改变了上下文的函数"><a href="#创建一个改变了上下文的函数" class="headerlink" title="创建一个改变了上下文的函数"></a>创建一个改变了上下文的函数</h2><p><code>call()</code> 和 <code>apply()</code> 方法改变了函数的 <code>this</code> 上下文之后便立即执行该函数，而 <code>bind()</code> 方法会创建一个函数的实例并返回，其 <code>this</code> 值会被绑定到传递给 <code>bind()</code> 函数的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&#x27;red&#x27;</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  color: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">  sayColor: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.color) <span class="comment">// 这个 this 的值是 o</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.color) <span class="comment">// 默认的值是 this 的值是 window</span></span><br><span class="line">      &#125;.bind(<span class="built_in">this</span>),</span><br><span class="line">      <span class="number">1000</span>,</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.sayColor()) <span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.color)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objectSayColor = sayColor.bind(o)</span><br><span class="line"><span class="built_in">console</span>.log(objectSayColor()) <span class="comment">// blue</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>ios配置应用名和图标</title>
    <url>/2020/02/ios%E9%85%8D%E7%BD%AE%E5%BA%94%E7%94%A8%E5%90%8D%E5%92%8C%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="配置应用名"><a href="#配置应用名" class="headerlink" title="配置应用名"></a>配置应用名</h2><ol>
<li>选中工程名称</li>
<li>找到右侧菜单 <code>Info</code> 选项</li>
<li>添加 <code>Bundle display name</code> 并把 <code>value</code> 设置成 “应用名称”</li>
<li>最后重新再 <code>Run</code>一次，即可看到最新的效果</li>
</ol>
<h2 id="配置图标"><a href="#配置图标" class="headerlink" title="配置图标"></a>配置图标</h2><p>把准备好的图标拖到图中箭头指向的位置：</p>
<p><img src="https://i.loli.net/2020/02/21/Sy3OjWBKbMdYgoH.png" alt=""></p>
]]></content>
      <categories>
        <category>移动端</category>
        <category>ios</category>
      </categories>
      <tags>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title>let和const的区别</title>
    <url>/2020/02/let%E5%92%8Cconst%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><code>let</code> 与 <code>const</code> 都是只在声明所在的块级作用域内有效。</p>
<p><code>let</code> 声明的变量可以改变，值和类型都可以改变，没有限制。<br><code>const</code> 声明的变量不得改变值，这意味着，<code>const</code> 一旦声明变量，就必须立即初始化，不能留到以后赋值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a <span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span> <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<p>对于引用类型的值，如数组和对象，变量保存的是值的引用。<code>const</code> 命令只是保证引用不变，并不保证值不变。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names = []</span><br><span class="line">names = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不会报错，因为names指向的地址不变，改变的只是内部数据</span></span><br><span class="line"><span class="keyword">const</span> names = []</span><br><span class="line">names[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">names[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">names[<span class="number">2</span>] = <span class="number">3</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>slice、substring和substr的区别</title>
    <url>/2020/02/slice%E3%80%81substring%E5%92%8Csubstr%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>方法</th>
<th>参数</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td><code>slice(start,end)</code></td>
<td><code>start</code>(必需)-起始位置<br /><code>end</code>(可选)-结束位置，若未指定，则默认到末尾所有元素</td>
<td>返回 <code>[start,end]</code>之间的元素</td>
</tr>
<tr>
<td><code>substring(start, end)</code></td>
<td><code>start</code>(必需)-起始位置<br /><code>end</code>(必需)-结束位置，若未指定，则默认到末尾所有元素</td>
<td>返回 <code>[start, end]</code> 之间的元素</td>
</tr>
<tr>
<td><code>substr(start)</code></td>
<td><code>start</code>(必需)-起始位置<br /><code>length</code>(可选)-所截取的元素的个数，若未指定，则默认到末尾</td>
<td>返回 <code>[start, start+length]</code>之间的元素</td>
</tr>
</tbody></table>
<a id="more"></a>

<blockquote>
<p>当传递的参数都为正数时，<code>substring</code> 没有区别，当参数为负数时，三个函数的行为不尽相同。</p>
</blockquote>
<ul>
<li><code>slice</code>: 将传入的福参数与字符串长度想加；</li>
<li><code>substring</code>: 把所有的负值置为0；</li>
<li><code>substr</code>: 将负的第一个参数与字符串长度相加，负的第二个参数置为0。</li>
</ul>
<p><strong>参数为正数的例子</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">3</span>)); <span class="comment">// lo world</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>));<span class="comment">// lo world</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>));<span class="comment">// lo world</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// lo w</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// lo w</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>, <span class="number">7</span>));<span class="comment">//lo worl</span></span><br></pre></td></tr></table></figure>

<p><strong>参数为负数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">-3</span>)); <span class="comment">// rld</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">-3</span>));<span class="comment">// hello world</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">-3</span>));<span class="comment">// rld</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">3</span>, <span class="number">-4</span>)); <span class="comment">// lo w</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>, <span class="number">-4</span>)); <span class="comment">// hel</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>, <span class="number">-4</span>));<span class="comment">// &quot;&quot;(空字符串)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>wx-promise-pro</title>
    <url>/2020/02/wx-promise-pro/</url>
    <content><![CDATA[<p>✨强大、优雅的小程序异步库🚀 小程序promise</p>
<a id="more"></a>

<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li>方便集成：一处引用，处处使用</li>
<li>把微信小程序所有异步 API promise 化并挂在到<code>wx.pro</code> 对象下</li>
<li>支持 ES2018 <code>finally</code> 特性</li>
<li>支持 TypeScript 开发</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i wx-promise-pro</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ yarn add wx-promise-pro</span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; promisifyAll, promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;wx-promise-pro&#x27;</span></span><br><span class="line"><span class="comment">// promisify all wx‘s api</span></span><br><span class="line">promisifyAll()</span><br><span class="line"><span class="comment">// promisify single api</span></span><br><span class="line">promisify(wx.getSystemInfo)().then(<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure>

<h2 id="支持所有的微信小程序异步API"><a href="#支持所有的微信小程序异步API" class="headerlink" title="支持所有的微信小程序异步API"></a>支持所有的微信小程序异步API</h2><p>使用 <code>promisifyAll</code> 开发者无需关心兼容与否，只要是 <code>wx</code> 支持的 api，<code>wx.pro</code> 全部支持。</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 演示 wxPromise 的能力</span></span><br><span class="line">wx.pro.showLoading(&#123;</span><br><span class="line">  title: <span class="string">&#x27;加载中&#x27;</span>,</span><br><span class="line">  mask: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">wx.pro.request(&#123;</span><br><span class="line">  url: <span class="string">&#x27;https://cnodejs.org/api/v1/topics&#x27;</span>,</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  header: &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;).finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  wx.hideLoading()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><p>This project exists thanks to all the people who contribute. <!--[[Contribute](CONTRIBUTING.md)].--><br><a href="https://github.com/youngjuning/wx-promise-pro/graphs/contributors"><img src="https://user-gold-cdn.xitu.io/2020/2/18/17058837fd8af7c9?w=890&h=74&f=svg&s=150945" /></a></p>
<h2 id="GitHub源码：https-github-com-youngjuning-wx-promise-pro"><a href="#GitHub源码：https-github-com-youngjuning-wx-promise-pro" class="headerlink" title="GitHub源码：https://github.com/youngjuning/wx-promise-pro"></a>GitHub源码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL3d4LXByb21pc2UtcHJv" title="https://github.com/youngjuning/wx-promise-pro">https://github.com/youngjuning/wx-promise-pro<i class="fa fa-external-link"></i></span></h2>]]></content>
      <categories>
        <category>前端</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>promise</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>函数节流和函数防抖</title>
    <url>/2020/02/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[<p>在前端开发中有一部分的用户行为会频繁地触发事件执行，而对于 DOM 操作、资源加载等耗费性能的处理，很可能导致界面卡顿，甚至浏览器的崩溃，函数节流（<code>throttle</code>）和函数防抖（<code>debounce</code>）就是为了解决类似需求应运而生的。</p>
<a id="more"></a>

<h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><p>函数节流就是预定一个函数只有在大于等于执行周期时才执行，周期内调用不执行。好像水滴攒到一定重量才会落下一样。场景：窗口调整（resize）、页面滚动（scroll）、抢购疯狂点击（mousedown）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">fn, wait = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lastTime = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">if</span>(now - lastTime &gt;= wait) &#123;</span><br><span class="line">      <span class="comment">// 这里并不需要考虑执行环境，所以调用 apply() 时第一个参数是 null，之所以使用 apply 传递参数，是因为第二个参数可以是 arguments 对象</span></span><br><span class="line">      fn.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>)</span><br><span class="line">      lastTime = now</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">boom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;boom&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(throttle(boom,<span class="number">2000</span>), <span class="number">1000</span>) <span class="comment">// 一个周期内触发了两次定时器，但是一个周期内只会执行一次 boom 方法。</span></span><br></pre></td></tr></table></figure>

<h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><p>函数防抖就是在函数需要频繁触发情况时，只有足够空闲的时间，才执行一次。好像公交司机会等人都上车后才出站一样。场景：实时搜索（keyup）、拖拽（mousemove）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(fn.tId)</span><br><span class="line">    fn.tId = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;.bind(<span class="built_in">this</span>), wait) <span class="comment">// 使用 bind 来确保函数执行环境的正确性，否则就是 global 了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;debounce&quot;</span>).onclick = debounce(boom, <span class="number">300</span>)</span><br><span class="line"><span class="comment">// 单位时间内无论操作多少次，都会合并成一次操作，并在最后一次操作后延迟 300 毫秒执行</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>从零开发一个Node Cli</title>
    <url>/2020/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AANode%20Cli/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/04/IZEm27KSLcz3h9r.png" alt=""></p>
<p>Node.js用途很广，常用来开发服务、桌面应用等被开发者熟知，Node.js还有另外一个非常实用的场景 - 命令行应用（后文统称CLI）。</p>
<a id="more"></a>

<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>创建一个<code>youngjuning</code> 目录，并使用进入该目录:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir youngjuning &amp;&amp; <span class="built_in">cd</span> youngjuning</span><br></pre></td></tr></table></figure>

<p>在该目录下新建 index.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>使用 <code>package.json</code> 的 <code>bin</code> 项是用来指定各个内部命令对应的可执行文件的位置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;bin&quot;: &#123;</span><br><span class="line">  &quot;youngjuning&quot;: &quot;./bin/cli.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在命令行输入 <code>npn link</code> 或 <code>npm install -g</code> 将当前项目安装到全局环境，这样就可以直接使用 <code>youngjuning</code> 来运行文件了：</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/3/4/170a17b2cce16b08?w=608&h=62&f=png&s=4058" alt=""></p>
<h2 id="commander-js"><a href="#commander-js" class="headerlink" title="commander.js"></a>commander.js</h2><p>node 为我们提供了 <code>process.argv</code> 来读取命令行参数，这里我们对此不作介绍，有兴趣可以自行研究，我选择了 tj 大神的 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29tbWFuZGVy" title="https://www.npmjs.com/package/commander">commander<i class="fa fa-external-link"></i></span>：</p>
<ul>
<li><code>command</code>: 定义命令行指令，后面可跟上一个 name，用空格隔开，如 <code>.command( &#39;app [name]&#39;)</code></li>
<li><code>alias</code>: 定义一个更短的命令行指令</li>
<li><code>description</code>: 描述，它会在 help 里面展示</li>
<li><code>option</code>: 定义参数。它接受四个参数<ul>
<li>在第一个参数中，它可输入短名字 <code>-a</code> 和长名字 <code>–app</code>，使用 <code>|</code> 或者 <code>,</code> 分隔，在命令行里使用时，这两个是等价的，区别是后者可以在程序里通过回调获取到</li>
<li>第二个为描述, 会在 <code>help</code> 信息里展示出来</li>
<li>第三个参数为回调函数，他接收的参数为一个 <code>string</code>，有时候我们需要一个命令行创建多个模块，就需要一个回调来处理</li>
<li>第四个参数为默认值</li>
</ul>
</li>
<li><code>action</code>: 注册一个 <code>callback</code> 函数,这里需注意目前回调不支持 let 声明变量</li>
<li><code>parse</code>: 解析命令行</li>
</ul>
<h2 id="inquire-js"><a href="#inquire-js" class="headerlink" title="inquire.js"></a>inquire.js</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> answers = <span class="keyword">await</span> inquirer.prompt([</span><br><span class="line">  <span class="comment">/* Pass your questions in here */</span></span><br><span class="line">])</span><br><span class="line"><span class="built_in">console</span>.log(answers)</span><br></pre></td></tr></table></figure>

<h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><ul>
<li><code>type</code>: 表示提问的类型，包括：<code>input</code>, <code>confirm</code>, <code>list</code>, <code>rawlist</code>, <code>expand</code>, <code>checkbox</code>, <code>password</code>, <code>editor</code>；</li>
<li><code>name</code>: 存储当前问题回答的变量；</li>
<li><code>message</code>: 问题的描述；</li>
<li><code>default</code>: 默认值；</li>
<li><code>choices</code>: 列表选项，在某些 type 下可用，并且包含一个分隔符(separator)；</li>
<li><code>validate</code>: 对用户的回答进行校验；</li>
<li><code>filter</code>: 对用户的回答进行过滤处理，返回处理后的值；</li>
<li><code>transformer</code>: 对用户回答的显示效果进行处理(如：修改回答的字体或背景颜色)，但不会影响最终的答案的内容；</li>
<li><code>when</code>: 根据前面问题的回答，判断当前问题是否需要被回答；</li>
<li><code>pageSize</code>: 修改某些 <code>type</code> 类型下的渲染行数；</li>
<li><code>prefix</code>: 修改 <code>message</code> 默认前缀；</li>
<li><code>suffix</code>: 修改 <code>message</code> 默认后缀。</li>
</ul>
<h2 id="实现动态模板"><a href="#实现动态模板" class="headerlink" title="实现动态模板"></a>实现动态模板</h2><ul>
<li>利用 <code>recursive-readdir</code> 库递归读取项目所有文件</li>
<li>利用 <code>handlebars</code> 进行模板替换</li>
<li>利用 <code>fs</code> 模块进行读文件和写文件操作</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> handlebars = <span class="built_in">require</span>(<span class="string">&#x27;handlebars&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> recursive = <span class="built_in">require</span>(<span class="string">&#x27;recursive-readdir&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compile = <span class="function">(<span class="params">meta, file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> content = fs.readFileSync(file).toString()</span><br><span class="line">  <span class="keyword">const</span> result = handlebars.compile(content)(meta)</span><br><span class="line">  fs.writeFileSync(file, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">meta, src</span>) =&gt;</span> &#123;</span><br><span class="line">  recursive(src, <span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line">    files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">      compile(meta, file)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2hhbGs=" title="https://www.npmjs.com/package/chalk">chalk.js<i class="fa fa-external-link"></i></span>: 美化命令行的模块</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvb3Jh" title="https://www.npmjs.com/package/ora">ora<i class="fa fa-external-link"></i></span>: Elegant terminal spinner</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbmNw" title="https://www.npmjs.com/package/ncp">ncp<i class="fa fa-external-link"></i></span>: 异步的拷贝文件，包含空文件夹</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVjdXJzaXZlLXJlYWRkaXI=" title="https://www.npmjs.com/package/recursive-readdir">recursive-readdir<i class="fa fa-external-link"></i></span>: 递归地列出目录和子目录下的所有文件，不包含目录本身。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoZWxsanMvc2hlbGxqcw==" title="https://github.com/shelljs/shelljs">shelljs<i class="fa fa-external-link"></i></span>: Unix shell commands for Node.js</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbG9nLXN5bWJvbHM=" title="https://www.npmjs.com/package/log-symbols">log-symbols<i class="fa fa-external-link"></i></span>: 打印日志的特殊标志</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZG93bmxvYWQtZ2l0LXJlcG8=" title="https://www.npmjs.com/package/download-git-repo">download-git-repo<i class="fa fa-external-link"></i></span>: Download and extract a git repository (GitHub, GitLab, Bitbucket) from node</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZ2xvYmFsLXByZWZpeA==" title="https://www.npmjs.com/package/global-prefix">global-prefix<i class="fa fa-external-link"></i></span>: 获取 npm 全局安装的前缀</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXhlYy1zaA==" title="https://www.npmjs.com/package/exec-sh">exec-sh<i class="fa fa-external-link"></i></span>: 执行 shell 命令转发所有 stdio 流，比 shelljs exec 命令好用</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd21s" title="https://www.npmjs.com/package/wml">wml<i class="fa fa-external-link"></i></span>: wml 侦听某个文件夹中的更改（使用 watchman），然后将更改的文件复制到另一个文件夹中。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmloYWl1LmNvbS9jbWQtb3Blbi8=" title="https://blog.ihaiu.com/cmd-open/">cmd-open<i class="fa fa-external-link"></i></span>: 扩展 Windows 命令 open</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoZWxsanMvc2h4" title="https://github.com/shelljs/shx">shx<i class="fa fa-external-link"></i></span>: shx is a wrapper around ShellJS Unix commands, providing an easy solution for simple Unix-like, cross-platform commands in npm package scripts.</li>
</ul>
<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><table>
<thead>
<tr>
<th align="center">作者微信</th>
<th align="center">知识星球</th>
<th align="center">赞赏作者</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>后端</category>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>cli</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Metro配置React Native端口</title>
    <url>/2020/02/%E5%88%A9%E7%94%A8Metro%E9%85%8D%E7%BD%AEReact-Native%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<p>当我们执行 <code>react-native start</code> 命令时，React Native 会启动一个默认端口号为 <code>8081</code>的本地服务，该 <code>8081</code> 的服务就是React Native项目的一个本地 Node 服务器，用于提供 JSBundle 包和一些静态资源。这一切都是 React Native 帮开发者配置好的，一切都是那么简便。</p>
<p>本文旨在告诉大家现在我们只需要简单地对 Metro 进行配置即可修改默认的版本号。</p>
<a id="more"></a>

<p>我翻阅了一下网上的方案，都太麻烦了，想着这功能官方不该提供可配置的吗？于是翻阅了官方的脚手架工具<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvY2xp" title="https://github.com/react-native-community/cli">@react-native-community/cli<i class="fa fa-external-link"></i></span>。打开<span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvaER0QlNqb2I=" title="https://bre.is/hDtBSjob">loadMetroConfig.ts<i class="fa fa-external-link"></i></span> 文件我找到了以下代码：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">  port: <span class="built_in">Number</span>(process.env.RCT_METRO_PORT) || <span class="number">8081</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>当我看到 <code>RCT_METRO_PORT</code> 这个属性，顿感这玩意和项目根目录的 <code>metro.config.js</code> 有关系。于是照猫画虎，在这个文件中添加了一下配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  server: &#123;</span><br><span class="line">    port: <span class="number">8082</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抱着试一试的心态，运行了 <code>react-native run-android</code>,运行成功：</p>
<img src="https://i.loli.net/2020/02/25/Zcs2rIDk5F9hoUS.png" style="zoom:60%;" />

<p>知其然，知其所以然，这个为什么可行呢？打开 metro 的官方文档，我找到了下面的内容：</p>
<img src="https://i.loli.net/2020/02/25/KDgRdMbToZLB1Vs.png" style="zoom:67%;" />

<p>现在 metro 已经接手了所有 React Native 的打包任务，后期遇到任何打包相关的问题，都可以先阅读一下 Metro 的文档进行解决。顺便吐槽一下，这么基础的设施，竟然没有中文翻译的文档。</p>
<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><table>
<thead>
<tr>
<th align="center">作者微信</th>
<th align="center">知识星球</th>
<th align="center">赞赏作者</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>metro</tag>
      </tags>
  </entry>
  <entry>
    <title>循环和闭包</title>
    <url>/2020/02/%E5%BE%AA%E7%8E%AF%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<p><img src="https://pic4.zhimg.com/80/v2-31c9c3801c7f7d0d1e5c2f840f291e33_hd.jpg" alt=""></p>
<p>当函数可以记住并访问所在词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行的。</p>
<a id="more"></a>

<p>要说明循环闭包，for 循环是最常见的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于很多开发者对闭包的概念认识地不是很清楚，因此当循环内部包含函数定义时，代码格式检查器经常发出警告，因此当循环内部包含函数定义时，代码格式检查器经常发出警告。我们在这里介绍如何才能正确使用闭包并发挥它的威力，但是代码格式检查器并没有那么灵敏，它会假设你并不真正了解自己在做什么，所以无论如何都会发出警告。</p>
</blockquote>
<p>正常情况下，我们对这段代码行为的预期是分别输出数字 1-5，每秒一次，每次一个。</p>
<p>但实际上，这段代码在运行时会以每秒一次的频率输出五次 <code>6</code>.</p>
<p>这是为什么？</p>
<p>首先解释 6 是从哪里来的。这个循环的终止条件是 <code>i</code> 不在 <code>&lt;=5</code>。条件首次成立时 <code>i</code> 的值是 <code>6</code>。因此，输出显示的是循环结束时 <code>i</code> 的最终值。</p>
<p>仔细想一下，这好像又是显而易见的，延迟函数的回调会在循环结束时才执行。事实上，当定时器运行时即使每个迭代中执行的是 <code>setTimeout(..., 0)</code>，所有的回调函数依然是在循环结束后才被执行，因此会每次输出一个 6 出来。</p>
<p>这里引申出一个更深入的问题，代码中到底有什么缺陷导致它的行为同语义所暗示的不一致呢？</p>
<p>缺陷是我们试图假设循环中的每个迭代在运行时都会给自己 “捕获” 一个 <code>i</code> 的副本。但是个根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的，但是<strong>它们都被封闭在一个共享的全局作用域中</strong>，因此实际上只有一个 <code>i</code>。</p>
<p>这样的话，当然所有函数共享一个 <code>i</code> 的引用。循环结构让我们误以为背后还有更复杂的机制在起作用，但实际上没有。如果将延迟函数的回调重复定义五次，完全不使用循环，那它同这段代码时完全等价的。</p>
<p>下面回到正题。缺陷是什么？我们需要更多的闭包作用域，特别是在循环的过程中每个迭代都需要一个闭包作用域。</p>
<h3 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h3><p>通过 IIFE 会立即执行一个函数来创建作用域。我们可以利用 IIFE 的特性来创建一个作用域并保存每次循环的 <code>i</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j)</span><br><span class="line">    &#125;, j *<span class="number">1000</span>)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，这些 IIFE 也不过就是函数，因此我们可以将 i 传递进去，如果愿意的话可以将变量名定义为 j，当然也可以还叫做 i。无论如何这段代码现在可以工作了。</p>
<p>在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。</p>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;= <span class="number">5</span>; i++) &#123; <span class="comment">// 通过let创建闭包的作用域</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, i++)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>let 隐式地创建了一个作用域，起到了闭包的作用。很酷是吧？块作用域和闭包联手便可天下无敌。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>closure</tag>
        <tag>for</tag>
        <tag>let</tag>
        <tag>setTimeout</tag>
        <tag>IIFE</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序组件收藏夹</title>
    <url>/2020/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%B6%E8%97%8F%E5%A4%B9/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/02/19/jtOuDvA5ihVlebc.jpg" alt=""></p>
<a id="more"></a>

<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NiZmtjZWwvdG93eG1s" title="https://github.com/sbfkcel/towxml">towxml<i class="fa fa-external-link"></i></span>: Towxml 是一个可将HTML、Markdown转为微信小程序WXML(WeiXin Markup Language)的渲染库。用于解决在微信小程序中Markdown、HTML不能直接渲染的问题。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NhdmluQ2FvL21pbmktYmxvZw==" title="https://github.com/CavinCao/mini-blog">mini-blog<i class="fa fa-external-link"></i></span>: mini-blog是一款基于云开发的博客小程序，该小程序完全不依赖任何后端服务，无需自己的网站、服务器、域名等资源，只需要自行注册小程序账号即可。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phc29uZHUvd3hhLXBsdWdpbi1jYW52YXM=" title="https://github.com/jasondu/wxa-plugin-canvas">wxa-plugin-canvas<i class="fa fa-external-link"></i></span>: 小程序海报组件-生成朋友圈分享海报并生成图片</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlLXBsdWdpbi93ZS1jcm9wcGVy" title="https://github.com/we-plugin/we-cropper">we-cropper<i class="fa fa-external-link"></i></span>: 微信小程序图片裁剪工具</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d4LXBsdWdpbi9pbWFnZS1jcm9wcGVy" title="https://github.com/wx-plugin/image-cropper">image-cropper<i class="fa fa-external-link"></i></span>: 💯一款功能强大的微信小程序图片裁剪插件</li>
</ul>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hhbnh1ZTEwMTgwL3NoYW5nY2hlbmc=" title="https://github.com/hanxue10180/shangcheng">hanxue10180/shangcheng<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>收藏夹</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>手写代码之手写bind</title>
    <url>/2020/02/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%E4%B9%8B%E6%89%8B%E5%86%99bind/</url>
    <content><![CDATA[<p><code>bind</code> 是在 ES5 加入的语法，具体如何使用 MDN 都有。但有一点需要额外注意一下：<code>bind</code> 会返回一个新的函数。也就是说：它会修改 <code>this</code> 的指向，并返回新的函数体。</p>
<a id="more"></a>

<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol>
<li>改变 <code>this</code> 指向: 需要使用 <code>apply</code> 或 <code>call</code></li>
<li>返回新的函数体: 函数作为值返回</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>一个简单的 <code>bind()</code> 一个环境。并返回一个在给定环境中调用给定函数的函数，并且将所有参数原封不动传递进去。语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind1 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    that.apply(context, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方式和原生 <code>bind()</code> 一样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>:<span class="string">&quot;杨俊宁&quot;</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pSay = sayHi.bind1(person)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>手写代码</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转 React Native 自定义字体</title>
    <url>/2020/02/%E7%8E%A9%E8%BD%ACReact-Native%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/02/29/4AacpxzRh8nfY2B.png" alt=""></p>
<a id="more"></a>

<ol>
<li><p>下载<span class="exturl" data-url="aHR0cDovL2hhby56aXRpY3EuY29tLw==" title="http://hao.ziticq.com/">免费商用字体<i class="fa fa-external-link"></i></span></p>
<blockquote>
<p>法棍体：链接:<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU0tQ0RFcXNKMDZxai00MnVSeUYwV0E=" title="https://pan.baidu.com/s/1M-CDEqsJ06qj-42uRyF0WA">https://pan.baidu.com/s/1M-CDEqsJ06qj-42uRyF0WA<i class="fa fa-external-link"></i></span>  密码:83er</p>
</blockquote>
</li>
<li><p>使用 FontLab 查看字体的 <code>fontFamily</code></p>
<blockquote>
<p>FontLab 破解版 Mac：</p>
<p>链接:<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVdiM3hnQjltSnFGNFlHWDB4WGRkTWc=" title="https://pan.baidu.com/s/1Wb3xgB9mJqF4YGX0xXddMg">https://pan.baidu.com/s/1Wb3xgB9mJqF4YGX0xXddMg<i class="fa fa-external-link"></i></span>  密码:1cfb</p>
</blockquote>
<img src="https://i.loli.net/2020/03/01/m9A5CK2cZMYswBF.png"  style="zoom:40%;" />
</li>
<li><p>将字体放到放在项目根目录：</p>
</li>
</ol>
<ol start="4">
<li><p>在根目录新建 <code>react-naitve.config.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  project: &#123;</span><br><span class="line">    ios: &#123;&#125;,</span><br><span class="line">    android: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  assets: [<span class="string">&#x27;./fonts&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在根目录执行 <code>react-native link</code> 命令</p>
</li>
<li><p>使用字体：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局</span></span><br><span class="line"><span class="keyword">const</span> TextRender = Text.render</span><br><span class="line">Text.render = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> originText = TextRender.apply(<span class="built_in">this</span>, args)</span><br><span class="line">  <span class="keyword">const</span> &#123; style &#125; = originText.props</span><br><span class="line">  <span class="keyword">return</span> React.cloneElement(originText, &#123;</span><br><span class="line">    allowFontScaling: <span class="literal">false</span>,</span><br><span class="line">    style: [&#123; <span class="attr">fontFamily</span>: <span class="string">&#x27;Baguette&#x27;</span> &#125;, style],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 局部</span></span><br><span class="line">&lt;Text style=&#123;&#123; <span class="attr">fontSize</span>: <span class="number">50</span>, <span class="attr">fontFamily</span>: <span class="string">&#x27;Baguette&#x27;</span> &#125;&#125;&gt; 法棍体🥖 &lt;/Text&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<img src="https://i.loli.net/2020/03/01/6YZlpi3ar87LKQd.jpg" alt="WechatIMG1166.jpeg" style="zoom:50%;" />

</li>
</ol>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS10cmFpbmluZy9yZWFjdC1uYXRpdmUtZm9udHM=" title="https://github.com/react-native-training/react-native-fonts">React Native 中开箱即用的字体<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><table>
<thead>
<tr>
<th align="center">作者微信</th>
<th align="center">知识星球</th>
<th align="center">赞赏作者</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>字体</tag>
        <tag>fonts</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 react native splash screen 防止启动白屏</title>
    <url>/2020/02/%E9%85%8D%E7%BD%AE-react-native-splash-screen-%E9%98%B2%E6%AD%A2%E5%90%AF%E5%8A%A8%E7%99%BD%E5%B1%8F/</url>
    <content><![CDATA[<img src="https://i.loli.net/2020/02/23/2nHZARhIstQDmji.png" style="zoom:50%;" />

<a id="more"></a>

<p>如果你有设计师，请让设计师给你要的所有尺寸图，如果没有请自行使用 <span class="exturl" data-url="aHR0cHM6Ly9pY29uLnd1cnVpaG9uZy5jb20v" title="https://icon.wuruihong.com/">图标工厂<i class="fa fa-external-link"></i></span> 意见生成所有尺寸的图标/启动图。</p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>1、通过创建 <code>launch_screen.png</code> 文件并把它们放到 <code>mipmap-</code> 文件夹下来自定义你的启动图。安卓会自动选择合适的分辨率，因此你不是必须为所有手机分辨率提供图片。不过，你可以为以下所有分辨率提供启动图：</p>
<ul>
<li><code>mipmap-mdpi</code></li>
<li><code>mipmap-hdpi</code></li>
<li><code>mipmap-xhdpi</code></li>
<li><code>mipmap-xxhdpi</code></li>
<li><code>mipmap-xxxhdpi</code></li>
</ul>
<p>2、更新你的 <code>MainActivity.java</code> 文件如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> org.devio.rn.splashscreen.SplashScreen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ReactActivity</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">     SplashScreen.show(<span class="keyword">this</span>, <span class="keyword">true</span>);  <span class="comment">// 添加这一句</span></span><br><span class="line">     <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...other code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、创建一个名为 <code>launch_screen.xml</code> 的布局文件来自定义你的启动屏幕。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span> <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> <span class="attr">android:src</span>=<span class="string">&quot;@mipmap/launch_screen&quot;</span> <span class="attr">android:scaleType</span>=<span class="string">&quot;centerCrop&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、你也可以启用app主题透明选项来解决在APP启动时因主题原因导致的短暂白屏的问题,具体步骤如下:</p>
<p>打开 <code>android/app/src/main/res/values/styles.xml</code> 文件,添加 <code>&lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;</code>,如下 :</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>&gt;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--设置透明背景--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsTranslucent&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、Add a color called <code>primary_dark</code> in <code>app/src/main/res/values/colors.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;primary_dark&quot;</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p>1、配置 <code>LaunchImage</code>: <span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvN3hZenJraHM=" title="https://bre.is/7xYzrkhs">https://bre.is/7xYzrkhs<i class="fa fa-external-link"></i></span></p>
<p>2、更新你的 <code>AppDelegate.m</code> 文件如下：</p>
<figure class="highlight obj-c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;AppDelegate.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBundleURLProvider.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTRootView.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;RNSplashScreen.h&quot;</span>  <span class="comment">// 添加这一句</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...other code</span></span><br><span class="line"></span><br><span class="line">    [RNSplashScreen show];  <span class="comment">// 添加这一句，这一句一定要在最后</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h2 id="隐藏启动图"><a href="#隐藏启动图" class="headerlink" title="隐藏启动图"></a>隐藏启动图</h2><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SplashScreen <span class="keyword">from</span> <span class="string">&#x27;react-native-splash-screen&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomePage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        SplashScreen.hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    SplashScreen.hide()</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (...)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>启动屏</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 react-native-amap-geolocation 接入高德地图定位</title>
    <url>/2020/03/%E4%BD%BF%E7%94%A8%20react-native-amap-geolocation%20%E6%8E%A5%E5%85%A5%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/17/peGk8hUbdQAoY7w.png" alt=""></p>
<p>react-native-amap-geolocation这款插件接入了高德地图定位模块。支持 Android + iOS，提供尽可能完善的原生接口， 同时提供符合 Web 标准的 Geolocation API。</p>
<a id="more"></a>

<blockquote>
<p>本文基于 react-native 0.60 以上版本！</p>
</blockquote>
<h2 id="获取高德-App-Key"><a href="#获取高德-App-Key" class="headerlink" title="获取高德 App Key"></a>获取高德 App Key</h2><p>为了使用高德 SDK，你需要准备高德 App Key，获取方法参考高德地图 SDK 官方文档：</p>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sYnMuYW1hcC5jb20vYXBpL2FuZHJvaWQtbG9jYXRpb24tc2RrL2d1aWRlL2NyZWF0ZS1wcm9qZWN0L2dldC1rZXk=" title="https://lbs.amap.com/api/android-location-sdk/guide/create-project/get-key">获取 Android App Key<i class="fa fa-external-link"></i></span></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;an:key-debug&quot;</span>: <span class="string">&quot;keytool -list -v -keystore ./android/app/debug.keystore&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;an:key-release&quot;</span>: <span class="string">&quot;keytool -v -list -keystore ./android/app/release.keystore&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sYnMuYW1hcC5jb20vYXBpL2lvcy1sb2NhdGlvbi1zZGsvZ3VpZGUvY3JlYXRlLXByb2plY3QvZ2V0LWtleQ==" title="https://lbs.amap.com/api/ios-location-sdk/guide/create-project/get-key">获取 iOS App Key<i class="fa fa-external-link"></i></span></p>
<blockquote>
<p>ios 只需要 <code>Bundle Identifier</code> 即可</p>
</blockquote>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add react-native-amap-geolocation</span><br></pre></td></tr></table></figure>

<h2 id="ios-配置"><a href="#ios-配置" class="headerlink" title="ios 配置"></a>ios 配置</h2><h3 id="下载和安装高德IOS-SDK"><a href="#下载和安装高德IOS-SDK" class="headerlink" title="下载和安装高德IOS SDK"></a>下载和安装高德IOS SDK</h3><ol>
<li>下载<span class="exturl" data-url="aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmEuYW1hcC5jb20lMkZsYnMlMkZzdGF0aWMlMkZ6aXAlMkZBTWFwX2lPU19Gb3VuZGF0aW9uX0xpYl9WMS40LjMuemlw" title="https://links.jianshu.com/go?to=https%3A%2F%2Fa.amap.com%2Flbs%2Fstatic%2Fzip%2FAMap_iOS_Foundation_Lib_V1.4.3.zip">基础SDK(含IDFA)<i class="fa fa-external-link"></i></span></li>
<li>下载<span class="exturl" data-url="aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmEuYW1hcC5jb20lMkZsYnMlMkZzdGF0aWMlMkZ6aXAlMkZBTWFwX2lPU19Mb2NfTGliX1YyLjYuMi56aXA=" title="https://links.jianshu.com/go?to=https%3A%2F%2Fa.amap.com%2Flbs%2Fstatic%2Fzip%2FAMap_iOS_Loc_Lib_V2.6.2.zip">定位SDK<i class="fa fa-external-link"></i></span></li>
<li>将下载的 <code>AMapFoundationKit.framework</code> 和 <code>AMapLocationKit.framework</code> 以及 项目自带的<code>ExternalAccessory.framework</code> 添加到 <code>Build Phases</code> ➜ <code>Link Binary With Libraries</code>。</li>
</ol>
<h3 id="配置权限"><a href="#配置权限" class="headerlink" title="配置权限"></a>配置权限</h3><ol>
<li><p>添加以下权限到 <code>Info.plist</code> 文件中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationWhenInUseUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationAlwaysUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ATS设置:  <code>Target</code>➜ <code>Info</code> ➜ <code>App Transport Security Setting</code> 展开后的 <code>Allow Arbitrary Loads</code> 设置为 <code>YES</code></p>
</li>
</ol>
<p><strong>如果要支持后台持续定位，还需要配置以下：</strong></p>
<ol>
<li><p>打开xcode，点击项目</p>
</li>
<li><p>选择 <code>Signing&amp;Capabilities</code>,把 <code>Background Modes</code> 打开为 <code>ON</code>，然后打勾 <code>Location updates</code></p>
<img src="https://i.loli.net/2020/03/18/ljTXqS9AboycPNk.png" style="zoom: 67%;" />

</li>
</ol>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>react-native 为 0.6x 的话，<code>yarn add react-native-amap-geolocation</code> 就完事了，一步到位不需要过多配置。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PermissionsAndroid &#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; init, Geolocation &#125; <span class="keyword">from</span> <span class="string">&quot;react-native-amap-geolocation&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于 Android 需要自行根据需要申请权限</span></span><br><span class="line"><span class="keyword">await</span> PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自己申请的高德 App Key 进行初始化</span></span><br><span class="line"><span class="keyword">await</span> init(&#123;</span><br><span class="line">  ios: <span class="string">&quot;9bd6c82e77583020a73ef1af59d0c759&quot;</span>,</span><br><span class="line">  android: <span class="string">&quot;043b24fe18785f33c491705ffe5b6935&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Geolocation.getCurrentPosition(<span class="function">(<span class="params">&#123; coords &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(coords);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="更多用法"><a href="#更多用法" class="headerlink" title="更多用法"></a>更多用法</h2><p>该项目除了提供符合 Web 标准的 Geolocation API，同时为了最大程度的发挥高德定位 SDK 的功能， 会尽可能提供与原生 SDK 一致的接口封装。由于 iOS 和 Android SDK 提供的接口并不一致， 于是最终实现的接口大部分是并不通用的。这在接口文档或文档注释有注明， 比如 <code>@platform android</code> 表示该接口仅用于 Android。</p>
<p>以下是一些常用接口的用法说明以及示例代码，更多接口的具体用法请参考<span class="exturl" data-url="aHR0cHM6Ly9xaXV4aWFuZy5naXRodWIuaW8vcmVhY3QtbmF0aXZlLWFtYXAtZ2VvbG9jYXRpb24vIy8=" title="https://qiuxiang.github.io/react-native-amap-geolocation/#/">接口文档<i class="fa fa-external-link"></i></span>。</p>
<h2 id="直接使用原生接口"><a href="#直接使用原生接口" class="headerlink" title="直接使用原生接口"></a>直接使用原生接口</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; init, addLocationListener, start, stop &#125; <span class="keyword">from</span> <span class="string">&quot;react-native-amap-geolocation&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加定位监听函数</span></span><br><span class="line">addLocationListener(<span class="function"><span class="params">location</span> =&gt;</span> <span class="built_in">console</span>.log(location));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始连续定位</span></span><br><span class="line">start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在不需要的时候停止定位</span></span><br><span class="line">stop();</span><br></pre></td></tr></table></figure>

<h2 id="逆地理编码"><a href="#逆地理编码" class="headerlink" title="逆地理编码"></a>逆地理编码</h2><p>Android 默认返回逆地理编码，而 iOS 需要手动设置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; setLocatingWithReGeocode, setNeedAddress &#125; <span class="keyword">from</span> <span class="string">&quot;react-native-amap-geolocation&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android</span></span><br><span class="line">setNeedAddress(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ios</span></span><br><span class="line">setLocatingWithReGeocode(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h2 id="定位回调频率限制"><a href="#定位回调频率限制" class="headerlink" title="定位回调频率限制"></a>定位回调频率限制</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">setInterval</span>, setDistanceFilter &#125; <span class="keyword">from</span> <span class="string">&quot;react-native-amap-geolocation&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android，5 秒请求一次定位</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ios，设备移动超过 10 米才会更新位置信息</span></span><br><span class="line">setDistanceFilter(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sYnMuYW1hcC5jb20vYXBp" title="https://lbs.amap.com/api">高德地图API<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mODczMTY2MzVmZjY=" title="https://www.jianshu.com/p/f87316635ff6">react-native-amap-geolocation安装与使用<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaXV4aWFuZy5naXRodWIuaW8vcmVhY3QtbmF0aXZlLWFtYXAtZ2VvbG9jYXRpb24v" title="https://qiuxiang.github.io/react-native-amap-geolocation/">react-native-amap-geolocation 使用指南<i class="fa fa-external-link"></i></span></li>
<li>[<span class="exturl" data-url="aHR0cHM6Ly9xaXV4aWFuZy5naXRodWIuaW8vcmVhY3QtbmF0aXZlLWFtYXAtZ2VvbG9jYXRpb24vYXBpL2luZGV4Lmh0bWw=" title="https://qiuxiang.github.io/react-native-amap-geolocation/api/index.html">react-native-amap-geolocation 接口文档<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><table>
<thead>
<tr>
<th align="center">作者微信</th>
<th align="center">知识星球</th>
<th align="center">赞赏作者</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>amap</tag>
      </tags>
  </entry>
  <entry>
    <title>初探 Ant Design of React</title>
    <url>/2020/03/%E5%88%9D%E6%8E%A2-Ant-Design-of-React/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/04/hK2MgsYGvuayp7Q.png" alt=""></p>
<p><code>antd</code> 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。</p>
<blockquote>
<p>文章可参考源码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2FudGQtd2l0aC10cy1kZW1v" title="https://github.com/youngjuning/antd-with-ts-demo">antd-with-ts-demo<i class="fa fa-external-link"></i></span></p>
</blockquote>
<a id="more"></a>

<h2 id="Ant-Design-设计体系"><a href="#Ant-Design-设计体系" class="headerlink" title="Ant Design 设计体系"></a>Ant Design 设计体系</h2><p>以笔者的经验来看，Ant Design 设计体系下的产品设计理念、使用方式、底层技术、周边工具都保持着高度一致，工具不是越多越好，有一套好用顺手的就行，UI框架千千万，你不可能都学一遍。Ant Design 无疑能够减少你的学习成本。</p>
<ul>
<li>设计<ul>
<li>设计价值观</li>
<li>全局样式</li>
<li>设计模式</li>
</ul>
</li>
<li>组件库<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2RvY3MvcmVhY3QvaW50cm9kdWNlLWNu" title="https://ant.design/docs/react/introduce-cn">Ant Design of React<i class="fa fa-external-link"></i></span>: 基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tb2JpbGUuYW50LmRlc2lnbi9kb2NzL3JlYWN0L2ludHJvZHVjZS1jbg==" title="https://mobile.ant.design/docs/react/introduce-cn">Ant Design Mobile of React<i class="fa fa-external-link"></i></span>: <code>antd-mobile</code> 是 Ant Design 的移动规范的 React 实现，服务于蚂蚁及口碑无线业务。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ybi5tb2JpbGUuYW50LmRlc2lnbi9kb2NzL3JlYWN0L2ludHJvZHVjZS1jbg==" title="https://rn.mobile.ant.design/docs/react/introduce-cn">Ant Design Mobile RN of React<i class="fa fa-external-link"></i></span>: <code>@ant-design/react-native</code> 是 <span class="exturl" data-url="aHR0cDovL2FudC5kZXNpZ24v" title="http://ant.design/">Ant Design<i class="fa fa-external-link"></i></span> 的移动规范的 React 实现，服务于蚂蚁及口碑无线业务。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZy5hbnQuZGVzaWduL2RvY3MvaW50cm9kdWNlL3po" title="https://ng.ant.design/docs/introduce/zh">Ant Design of Angular<i class="fa fa-external-link"></i></span>: 这里是 Ant Design 的 Angular 实现，开发和服务于企业级后台产品。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZy5tb2JpbGUuYW50LmRlc2lnbi8jL2RvY3MvaW50cm9kdWNlL3po" title="https://ng.mobile.ant.design/#/docs/introduce/zh">Ant Design Mobile of Angular<i class="fa fa-external-link"></i></span>: 这里是 <strong>Ant Design</strong> 移动规范的 <strong>Angular</strong> 实现，服务于阿里巴巴集团数据无线业务。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW50ZHYuY29tL2RvY3MvdnVlL2ludHJvZHVjZS1jbi8=" title="https://www.antdv.com/docs/vue/introduce-cn/">Ant Design of Vue<i class="fa fa-external-link"></i></span>: 这里是 Ant Design 的 Vue 实现，开发和服务于企业级后台产品。</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2NvbXBvbmVudHMvaWNvbi1jbi8=" title="https://ant.design/components/icon-cn/">Icons<i class="fa fa-external-link"></i></span>: 一整套优质的图标集</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hbnR2LnZpc2lvbi96aA==" title="https://antv.vision/zh">AntV<i class="fa fa-external-link"></i></span>: AntV 是蚂蚁金服全新一代数据可视化解决方案，致力于提供一套简单方便、专业可靠、无限可能的数据可视化最佳实践。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wcm8uYW50LmRlc2lnbi9pbmRleC1jbg==" title="https://pro.ant.design/index-cn">Ant Design Pro<i class="fa fa-external-link"></i></span>: 开箱即用的中台前端/设计解决方案<ul>
<li><span class="exturl" data-url="aHR0cDovL2R2YWpzLmNvbS8=" title="http://dvajs.com/">dva<i class="fa fa-external-link"></i></span>: 一个基于 Redux 的 轻量级数据流方案，概念来自 elm，支持 side effects、热替换、动态加载、react-native、SSR 等，已在生产环境广泛应用。</li>
<li><span class="exturl" data-url="aHR0cDovL3VtaWpzLm9yZy8=" title="http://umijs.org/">umi<i class="fa fa-external-link"></i></span> : 一个可插拔的企业级 react 应用框架。umi 以路由为基础的，支持<span class="exturl" data-url="aHR0cHM6Ly91bWlqcy5vcmcvemgvZ3VpZGUvcm91dGVyLmh0bWw=" title="https://umijs.org/zh/guide/router.html">类 next.js 的约定式路由<i class="fa fa-external-link"></i></span>，以及各种进阶的路由功能，并以此进行功能扩展，比如<span class="exturl" data-url="aHR0cHM6Ly91bWlqcy5vcmcvemgvcGx1Z2luL3VtaS1wbHVnaW4tcmVhY3QuaHRtbCNkeW5hbWljaW1wb3J0" title="https://umijs.org/zh/plugin/umi-plugin-react.html#dynamicimport">支持路由级的按需加载<i class="fa fa-external-link"></i></span>。然后配以完善的<span class="exturl" data-url="aHR0cHM6Ly91bWlqcy5vcmcvemgvcGx1Z2luLw==" title="https://umijs.org/zh/plugin/">插件体系<i class="fa fa-external-link"></i></span>，覆盖从源码到构建产物的每个生命周期，支持各种功能扩展和业务需求，同时提供 <span class="exturl" data-url="aHR0cHM6Ly91bWlqcy5vcmcvemgvZ3VpZGUvdW1pLXVpLmh0bWw=" title="https://umijs.org/zh/guide/umi-ui.html">Umi UI<i class="fa fa-external-link"></i></span> 通过可视化辅助编程（VAP）提高开发体验和研发效率。</li>
</ul>
</li>
</ul>
<p>从上面的体系中可以看出，Ant Design of React 可以说是整个 Ant Design 设计体系的核心产品，想要学习 Ant Design Pro，首先就要先熟悉 Ant Design of React。</p>
<h2 id="流行趋势"><a href="#流行趋势" class="headerlink" title="流行趋势"></a>流行趋势</h2><h3 id="npm-下载量"><a href="#npm-下载量" class="headerlink" title="npm 下载量"></a>npm 下载量</h3><p>如果拿 antd 和 element-ui、iview 这些老牌 Vue.js UI 框架对比，遥遥领先啊有没有：</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/3/4/170a4939e1919973?w=1103&h=458&f=png&s=59582" alt=""></p>
<p>如果拿 ant-design-vue 来和 element-ui、iview这些老牌 vue UI框架对比，也是很有竞争力的：</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/3/4/170a4939e21c45c6?w=1115&h=454&f=png&s=76675" alt=""></p>
<h3 id="GitHub-Star"><a href="#GitHub-Star" class="headerlink" title="GitHub Star"></a>GitHub Star</h3><p><img src="https://user-gold-cdn.xitu.io/2020/3/4/170a4939e23e1d0b?w=1119&h=207&f=png&s=36028" alt=""></p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>🌈 提炼自企业级中后台产品的交互语言和视觉风格。</li>
<li>📦 开箱即用的高质量 React 组件。</li>
<li>🛡 使用 TypeScript 开发，提供完整的类型定义文件。</li>
<li>⚙️ 全链路开发和设计工具体系。</li>
<li>🌍 数十个国际化语言支持。</li>
<li>🎨 深入每个细节的主题定制能力。</li>
</ul>
<h2 id="支持环境"><a href="#支持环境" class="headerlink" title="支持环境"></a>支持环境</h2><ul>
<li>现代浏览器和 IE11 及以上（需要 <span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2RvY3MvcmVhY3QvZ2V0dGluZy1zdGFydGVkLWNuI+WFvOWuueaApw==" title="https://ant.design/docs/react/getting-started-cn#兼容性">polyfills<i class="fa fa-external-link"></i></span>）。</li>
<li>支持服务端渲染。<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMuZnJvbnRlbmR4LmNuLw==" title="https://nextjs.frontendx.cn/">Next.js<i class="fa fa-external-link"></i></span>: <strong>Next.js</strong> 是一个轻量级的 React 服务端渲染应用框架。</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbGVjdHJvbmpzLm9yZy8=" title="https://electronjs.org/">Electron<i class="fa fa-external-link"></i></span>：使用 JavaScript，HTML 和 CSS 构建Hybrid的桌面应用程序<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uLXJlYWN0LWJvaWxlcnBsYXRlL2VsZWN0cm9uLXJlYWN0LWJvaWxlcnBsYXRl" title="https://github.com/electron-react-boilerplate/electron-react-boilerplate">electron-react-boilerplate<i class="fa fa-external-link"></i></span>: 可扩展的Hybrid应用程序的基础</li>
</ul>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add antd</span></span><br></pre></td></tr></table></figure>

<h2 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h2><p>Antd 系列的 UI 组件库都需要引入 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYmFiZWwtcGx1Z2luLWltcG9ydA==" title="https://github.com/ant-design/babel-plugin-import">babel-plugin-import<i class="fa fa-external-link"></i></span> 库来实现懒加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .babelrc or babel-loader option</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;import&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;libraryName&quot;</span>: <span class="string">&quot;antd&quot;</span>,</span><br><span class="line">      <span class="string">&quot;libraryDirectory&quot;</span>: <span class="string">&quot;es&quot;</span>,</span><br><span class="line">      <span class="string">&quot;style&quot;</span>: <span class="string">&quot;css&quot;</span> <span class="comment">// `style: true` 会加载 less 文件</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后只需从 antd 引入模块即可，无需单独引入样式。等同于下面手动引入的方式。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// babel-plugin-import 会帮助你加载 JS 和 CSS</span></span><br><span class="line"><span class="keyword">import</span> &#123; DatePicker &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><blockquote>
<p>在开始之前，推荐先学习 <span class="exturl" data-url="aHR0cDovL3JlYWN0anMub3JnLw==" title="http://reactjs.org/">React<i class="fa fa-external-link"></i></span> 和 <span class="exturl" data-url="aHR0cDovL2JhYmVsanMuaW8vZG9jcy9sZWFybi1lczIwMTUv" title="http://babeljs.io/docs/learn-es2015/">ES2015<i class="fa fa-external-link"></i></span>，并正确安装和配置了 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnLw==" title="https://nodejs.org/">Node.js<i class="fa fa-external-link"></i></span> v8 或以上。官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识，并且已经完全掌握了 React 全家桶的正确开发方式。如果你刚开始学习前端或者 React，将 UI 框架作为你的第一步可能不是最好的主意。</p>
</blockquote>
<h3 id="1-创建一个-codesanbox"><a href="#1-创建一个-codesanbox" class="headerlink" title="1. 创建一个 codesanbox"></a>1. 创建一个 codesanbox</h3><p>访问 <span class="exturl" data-url="aHR0cDovL3UuYW50LmRlc2lnbi9jb2Rlc2FuZGJveC1yZXBybw==" title="http://u.ant.design/codesandbox-repro">http://u.ant.design/codesandbox-repro<i class="fa fa-external-link"></i></span> 创建一个 codesandbox 的在线示例，别忘了保存以创建一个新的实例。</p>
<h3 id="2-使用组件"><a href="#2-使用组件" class="headerlink" title="2. 使用组件"></a>2. 使用组件</h3><p>直接用下面的代码替换 <code>index.js</code> 的内容，用 React 的方式直接使用 antd 组件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import ReactDOM from &#39;react-dom&#39;;</span><br><span class="line">import &#123; ConfigProvider, DatePicker, message &#125; from &#39;antd&#39;;</span><br><span class="line">&#x2F;&#x2F; 由于 antd 组件的默认文案是英文，所以需要修改为中文</span><br><span class="line">import zhCN from &#39;antd&#x2F;es&#x2F;locale&#x2F;zh_CN&#39;;</span><br><span class="line">import moment from &#39;moment&#39;;</span><br><span class="line">import &#39;moment&#x2F;locale&#x2F;zh-cn&#39;;</span><br><span class="line">import &#39;antd&#x2F;dist&#x2F;antd.css&#39;;</span><br><span class="line">import &#39;.&#x2F;index.css&#39;;</span><br><span class="line"></span><br><span class="line">moment.locale(&#39;zh-cn&#39;);</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">  state &#x3D; &#123;</span><br><span class="line">    date: null,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleChange &#x3D; date &#x3D;&gt; &#123;</span><br><span class="line">    message.info(&#96;您选择的日期是: $&#123;date ? date.format(&#39;YYYY-MM-DD&#39;) : &#39;未选择&#39;&#125;&#96;);</span><br><span class="line">    this.setState(&#123; date &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; date &#125; &#x3D; this.state;</span><br><span class="line">    return (</span><br><span class="line">      &lt;ConfigProvider locale&#x3D;&#123;zhCN&#125;&gt;</span><br><span class="line">        &lt;div style&#x3D;&#123;&#123; width: 400, margin: &#39;100px auto&#39; &#125;&#125;&gt;</span><br><span class="line">          &lt;DatePicker onChange&#x3D;&#123;this.handleChange&#125; &#x2F;&gt;</span><br><span class="line">          &lt;div style&#x3D;&#123;&#123; marginTop: 20 &#125;&#125;&gt;</span><br><span class="line">            当前日期：&#123;date ? date.format(&#39;YYYY-MM-DD&#39;) : &#39;未选择&#39;&#125;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;ConfigProvider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App &#x2F;&gt;, document.getElementById(&#39;root&#39;));</span><br></pre></td></tr></table></figure>

<h3 id="3-探索更多组件用法"><a href="#3-探索更多组件用法" class="headerlink" title="3. 探索更多组件用法"></a>3. 探索更多组件用法</h3><p>你可以在左侧菜单查看组件列表，比如 <span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2NvbXBvbmVudHMvYWxlcnQtY24v" title="https://ant.design/components/alert-cn/">Alert<i class="fa fa-external-link"></i></span> 组件，组件文档中提供了各类演示，最下方有组件 API 文档可以查阅。在代码演示部分找到第一个例子，点击右下角的图标展开代码。</p>
<p>然后依照演示代码的写法，在之前的 codesandbox 里修改 <code>index.js</code>，首先在 <code>import</code> 内引入 Alert 组件：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- import &#123; ConfigProvider, DatePicker, message &#125; from &#x27;antd&#x27;;</span></span><br><span class="line"><span class="addition">+ import &#123; ConfigProvider, DatePicker, message, Alert &#125; from &#x27;antd&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>然后在 <code>render</code> 内添加相应的 jsx 代码：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  &lt;DatePicker onChange=&#123;value =&gt; this.handleChange(value)&#125; /&gt;</span><br><span class="line">  &lt;div style=&#123;&#123; marginTop: 20 &#125;&#125;&gt;</span><br><span class="line"><span class="deletion">-   当前日期：&#123;date ? date.format(&#x27;YYYY-MM-DD&#x27;) : &#x27;未选择&#x27;&#125;</span></span><br><span class="line"><span class="addition">+   &lt;Alert message=&#123;`当前日期：$&#123;date ? date.format(&#x27;YYYY-MM-DD&#x27;) : &#x27;未选择&#x27;&#125;`&#125; type=&quot;success&quot; /&gt;</span></span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>好的，现在你已经会使用基本的 antd 组件了，你可以在这个例子中继续探索其他组件的用法。如果你遇到组件的 bug，也推荐建一个可重现的 codesandbox 来报告 bug。</p>
<h3 id="4-下一步"><a href="#4-下一步" class="headerlink" title="4. 下一步#"></a>4. 下一步<span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2RvY3MvcmVhY3QvZ2V0dGluZy1zdGFydGVkLWNuIzQuLeS4i+S4gOatpQ==" title="https://ant.design/docs/react/getting-started-cn#4.-下一步">#<i class="fa fa-external-link"></i></span></h3><p>实际项目开发中，你会需要构建、调试、代理、打包部署等一系列工程化的需求。您可以阅读后面的文档或者使用以下脚手架和范例：</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3Byby5hbnQuZGVzaWduLw==" title="http://pro.ant.design/">Ant Design Pro<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3p1aWlkZWEvYW50ZC1hZG1pbg==" title="https://github.com/zuiidea/antd-admin">antd-admin<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2QyLXByb2plY3RzL2QyLWFkbWlu" title="https://github.com/d2-projects/d2-admin">d2-admin<i class="fa fa-external-link"></i></span></li>
<li>更多脚手架可以查看 <span class="exturl" data-url="aHR0cDovL3NjYWZmb2xkLmFudC5kZXNpZ24v" title="http://scaffold.ant.design/">脚手架市场<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="使用-Day-js-替换-momentjs-优化打包大小"><a href="#使用-Day-js-替换-momentjs-优化打包大小" class="headerlink" title="使用 Day.js 替换 momentjs 优化打包大小"></a>使用 Day.js 替换 momentjs 优化打包大小</h2><p>你可以使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50ZC1kYXlqcy13ZWJwYWNrLXBsdWdpbg==" title="https://github.com/ant-design/antd-dayjs-webpack-plugin">antd-dayjs-webpack-plugin<i class="fa fa-external-link"></i></span> 插件用 Day.js 替换 momentjs 来大幅减小打包大小。这需要更新 webpack 的配置文件如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack-config.js</span></span><br><span class="line"><span class="keyword">import</span> AntdDayjsWebpackPlugin <span class="keyword">from</span> <span class="string">&#x27;antd-dayjs-webpack-plugin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [<span class="keyword">new</span> AntdDayjsWebpackPlugin()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="在-TypeScript-中使用"><a href="#在-TypeScript-中使用" class="headerlink" title="在 TypeScript 中使用"></a>在 TypeScript 中使用</h2><p>使用 <code>create-react-app</code> 一步步地创建一个 TypeScript 项目，并引入 antd。</p>
<h3 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h3><p>创建 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2NyZWF0ZS1yZWFjdC1hcHAvdHJlZS9tYXN0ZXIvcGFja2FnZXMvY3JhLXRlbXBsYXRlLXR5cGVzY3JpcHQ=" title="https://github.com/facebook/create-react-app/tree/master/packages/cra-template-typescript">cra-template-typescript<i class="fa fa-external-link"></i></span> 项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx create-react-app my-app --template typescript</span></span><br></pre></td></tr></table></figure>

<p>然后我们进入项目并启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> antd-demo-ts</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn start</span></span><br></pre></td></tr></table></figure>

<p>此时浏览器会访问 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDozMDAwLw==" title="http://localhost:3000/">http://localhost:3000/<i class="fa fa-external-link"></i></span> ，看到 <code>Welcome to React</code> 的界面就算成功了。</p>
<h3 id="引入-antd"><a href="#引入-antd" class="headerlink" title="引入 antd"></a>引入 antd</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add antd</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义-create-react-app-配置"><a href="#自定义-create-react-app-配置" class="headerlink" title="自定义 create-react-app 配置"></a>自定义 create-react-app 配置</h3><p>我们需要对 create-react-app 的默认配置进行自定义，这里我们使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RpbWFybmV5L3JlYWN0LWFwcC1yZXdpcmVk" title="https://github.com/timarney/react-app-rewired">react-app-rewired<i class="fa fa-external-link"></i></span> （一个对 create-react-app 进行自定义配置的社区解决方案）。</p>
<p>引入 react-app-rewired 并修改 package.json 里的启动配置。由于新的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RpbWFybmV5L3JlYWN0LWFwcC1yZXdpcmVkI2FsdGVybmF0aXZlcw==" title="https://github.com/timarney/react-app-rewired#alternatives">react-app-rewired@2.x<i class="fa fa-external-link"></i></span> 版本的关系，你还需要安装 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FyYWNrYWYvY3VzdG9taXplLWNyYQ==" title="https://github.com/arackaf/customize-cra">customize-cra<i class="fa fa-external-link"></i></span>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add react-app-rewired customize-cra -D</span></span><br></pre></td></tr></table></figure>

<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">/* package.json */</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line"><span class="deletion">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;start&quot;: &quot;react-app-rewired start&quot;,</span></span><br><span class="line"><span class="deletion">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;build&quot;: &quot;react-app-rewired build&quot;,</span></span><br><span class="line"><span class="deletion">-   &quot;test&quot;: &quot;react-scripts test&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;test&quot;: &quot;react-app-rewired test&quot;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目根目录创建一个 <code>config-overrides.js</code> 用于修改默认配置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do stuff with the webpack config...</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="使用-babel-plugin-import"><a href="#使用-babel-plugin-import" class="headerlink" title="使用 babel-plugin-import"></a>使用 babel-plugin-import</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYmFiZWwtcGx1Z2luLWltcG9ydA==" title="https://github.com/ant-design/babel-plugin-import">babel-plugin-import<i class="fa fa-external-link"></i></span> 是一个用于按需加载组件代码和样式的 babel 插件（<span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2RvY3MvcmVhY3QvZ2V0dGluZy1zdGFydGVkLWNuI+aMiemcgOWKoOi9vQ==" title="https://ant.design/docs/react/getting-started-cn#按需加载">原理<i class="fa fa-external-link"></i></span>），现在我们尝试安装它并修改 <code>config-overrides.js</code> 文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn add babel-plugin-import -D</span><br></pre></td></tr></table></figure>

<p>替换 <code>config-overrides.js</code> 文件内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; override, fixBabelImports &#125; = <span class="built_in">require</span>(<span class="string">&#x27;customize-cra&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">  fixBabelImports(<span class="string">&#x27;import&#x27;</span>, &#123;</span><br><span class="line">    libraryName: <span class="string">&#x27;antd&#x27;</span>,</span><br><span class="line">    libraryDirectory: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">    style: <span class="string">&#x27;css&#x27;</span>, <span class="comment">// `style: true` 会加载 less 文件</span></span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="使用-antd"><a href="#使用-antd" class="headerlink" title="使用 antd"></a>使用 antd</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; src&#x2F;App.tsxe</span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123; Button &#125; from &#39;antd&#39;;</span><br><span class="line">import &#39;.&#x2F;App.css&#39;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className&#x3D;&quot;App&quot;&gt;</span><br><span class="line">      &lt;Button type&#x3D;&quot;primary&quot;&gt;Button&lt;&#x2F;Button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>

<p>运行 <code>yarn start</code> 访问页面，antd 组件的 js 和 css 代码都会按需加载，你在控制台也不会看到这样的<span class="exturl" data-url="aHR0cHM6Ly96b3MuYWxpcGF5b2JqZWN0cy5jb20vcm1zcG9ydGFsL3ZnY0hKUlZaRm1QakFhd3dWb1hLLnBuZw==" title="https://zos.alipayobjects.com/rmsportal/vgcHJRVZFmPjAawwVoXK.png">警告信息<i class="fa fa-external-link"></i></span>。关于按需加载的原理和其他方式可以阅读<span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2RvY3MvcmVhY3QvZ2V0dGluZy1zdGFydGVkLWNuI+aMiemcgOWKoOi9vQ==" title="https://ant.design/docs/react/getting-started-cn#按需加载">这里<i class="fa fa-external-link"></i></span>。</p>
<h3 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h3><p>按照 <span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2RvY3MvcmVhY3QvY3VzdG9taXplLXRoZW1lLWNu" title="https://ant.design/docs/react/customize-theme-cn">配置主题<i class="fa fa-external-link"></i></span> 的要求，自定义主题需要用到 less 变量覆盖功能。我们可以引入 <code>customize-cra</code> 中提供的 less 相关的函数 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FyYWNrYWYvY3VzdG9taXplLWNyYSNhZGRsZXNzbG9hZGVybG9hZGVyb3B0aW9ucw==" title="https://github.com/arackaf/customize-cra#addlessloaderloaderoptions">addLessLoader<i class="fa fa-external-link"></i></span> 来帮助加载 less 样式，同时修改 <code>config-overrides.js</code> 文件如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add less less-loader -D</span></span><br></pre></td></tr></table></figure>

<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- const &#123; override, fixBabelImports &#125; = require(&#x27;customize-cra&#x27;);</span></span><br><span class="line"><span class="addition">+ const &#123; override, fixBabelImports, addLessLoader &#125; = require(&#x27;customize-cra&#x27;);</span></span><br><span class="line"></span><br><span class="line">module.exports = override(</span><br><span class="line">  fixBabelImports(&#x27;import&#x27;, &#123;</span><br><span class="line">    libraryName: &#x27;antd&#x27;,</span><br><span class="line">    libraryDirectory: &#x27;es&#x27;,</span><br><span class="line"><span class="deletion">-   style: &#x27;css&#x27;,</span></span><br><span class="line"><span class="addition">+   style: true,</span></span><br><span class="line">  &#125;),</span><br><span class="line"><span class="addition">+ addLessLoader(&#123;</span></span><br><span class="line"><span class="addition">+   javascriptEnabled: true,</span></span><br><span class="line"><span class="addition">+   modifyVars: &#123; &#x27;@primary-color&#x27;: &#x27;#1DA57A&#x27; &#125;,</span></span><br><span class="line"><span class="addition">+ &#125;),</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>这里利用了 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svbGVzcy1sb2FkZXIjbGVzcy1vcHRpb25z" title="https://github.com/webpack/less-loader#less-options">less-loader<i class="fa fa-external-link"></i></span> 的 <code>modifyVars</code> 来进行主题配置，变量和其他配置方式可以参考 <span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2RvY3MvcmVhY3QvY3VzdG9taXplLXRoZW1lLWNu" title="https://ant.design/docs/react/customize-theme-cn">配置主题<i class="fa fa-external-link"></i></span> 文档。</p>
<p>修改后重启 <code>yarn start</code>，如果看到一个绿色的按钮就说明配置成功了。</p>
<h3 id="使用-Day-js-替换-momentjs-优化打包大小-1"><a href="#使用-Day-js-替换-momentjs-优化打包大小-1" class="headerlink" title="使用 Day.js 替换 momentjs 优化打包大小"></a>使用 Day.js 替换 momentjs 优化打包大小</h3><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ const AntdDayjsWebpackPlugin = require(&#x27;antd-dayjs-webpack-plugin&#x27;);</span></span><br><span class="line"><span class="deletion">- const &#123; override, fixBabelImports, addLessLoader &#125; = require(&#x27;customize-cra&#x27;);</span></span><br><span class="line"><span class="addition">+ const &#123; override, fixBabelImports, addLessLoader, addWebpackPlugin &#125; = require(&#x27;customize-cra&#x27;);</span></span><br><span class="line"></span><br><span class="line">module.exports = override(</span><br><span class="line">  fixBabelImports(&#x27;import&#x27;, &#123;</span><br><span class="line">    libraryName: &#x27;antd&#x27;,</span><br><span class="line">    libraryDirectory: &#x27;es&#x27;,</span><br><span class="line">    style: true,</span><br><span class="line">  &#125;),</span><br><span class="line">  addLessLoader(&#123;</span><br><span class="line">    javascriptEnabled: true,</span><br><span class="line">    modifyVars: &#123; &#x27;@primary-color&#x27;: &#x27;#1DA57A&#x27; &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line"><span class="addition">+  addWebpackPlugin(new AntdDayjsWebpackPlugin()),</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="decorators"><a href="#decorators" class="headerlink" title="decorators"></a>decorators</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D @babel/plugin-proposal-decorators</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; addDecoratorsLegacy &#125; = <span class="built_in">require</span>(<span class="string">&#x27;customize-cra&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">    ...</span><br><span class="line">  addDecoratorsLegacy(),</span><br><span class="line">  ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="配置-Babel-插件"><a href="#配置-Babel-插件" class="headerlink" title="配置 Babel 插件"></a>配置 Babel 插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; override(</span><br><span class="line">  ...,</span><br><span class="line">  ...addBabelPresets(</span><br><span class="line">    [</span><br><span class="line">      &quot;@babel&#x2F;preset-env&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">        targets: &#123;</span><br><span class="line">          browsers: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;],</span><br><span class="line">          ie: 9</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">  ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="允许使用-babelrc-js-文件进行Babel配置。"><a href="#允许使用-babelrc-js-文件进行Babel配置。" class="headerlink" title="允许使用 .babelrc.js 文件进行Babel配置。"></a>允许使用 .babelrc.js 文件进行Babel配置。</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config-overrides.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; useBabelRc &#125; = <span class="built_in">require</span>(<span class="string">&#x27;customize-cra&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 允许使用 .babelrc.js 文件进行Babel配置。</span></span><br><span class="line">  useBabelRc()</span><br><span class="line">  ...</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add @babel/preset-env -D</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .babelrc.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>, <span class="comment">//兼容ie9</span></span><br><span class="line">      &#123;</span><br><span class="line">        targets: &#123;</span><br><span class="line">          ie: <span class="string">&quot;9&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  plugins: [<span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>] <span class="comment">// 可以用来替换 addDecoratorsLegacy</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><table>
<thead>
<tr>
<th align="center">作者微信</th>
<th align="center">知识星球</th>
<th align="center">赞赏作者</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>antd</tag>
        <tag>UI框架</tag>
      </tags>
  </entry>
  <entry>
    <title>初探 Nest.js</title>
    <url>/2020/03/%E5%88%9D%E6%8E%A2-Nest-js/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/02/GwX6NzRqa85bLhT.png" alt=""></p>
<a id="more"></a>

<h2 id="Nest-js-是什么？"><a href="#Nest-js-是什么？" class="headerlink" title="Nest.js 是什么？"></a>Nest.js 是什么？</h2><p>​    Nest 是一个用于构建高效，可扩展的 <span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi8=" title="http://nodejs.cn/">Node.js<i class="fa fa-external-link"></i></span> 服务器端应用程序的框架。它使用渐进式 JavaScript，内置并完全支持 <span class="exturl" data-url="aHR0cHM6Ly93d3cudHNsYW5nLmNuLw==" title="https://www.tslang.cn/">TypeScript<i class="fa fa-external-link"></i></span>（但仍然允许开发人员使用纯 JavaScript 编写代码）并结合了 <code>OOP</code>（面向对象编程），<code>FP</code>（函数式编程）和<code>FRP</code>（函数式响应编程）的元素。</p>
<p>​    在底层，Nest使用强大的 HTTP Server 框架，如 Express（默认）和 Fastify。Nest 在这些框架之上提供了一定程度的抽象，同时也将其 API 直接暴露给开发人员。这样可以轻松使用每个平台的无数第三方模块。</p>
<h2 id="Nest-js-解决了什么问题？"><a href="#Nest-js-解决了什么问题？" class="headerlink" title="Nest.js 解决了什么问题？"></a>Nest.js 解决了什么问题？</h2><p>​    近年来，感谢 Node.js，JavaScript 已成为前端和后端应用程序的网络“通用语言”。这产生了令人敬畏的项目，如 <span class="exturl" data-url="aHR0cHM6Ly9hbmd1bGFyLmNuLw==" title="https://angular.cn/">Angular<i class="fa fa-external-link"></i></span>，React 和 Vue，它们提高了开发人员的工作效率，并能够构建快速，可测试和可扩展的前端应用程序。然而，虽然 Node（和服务器端 JavaScript ）存在大量优秀的库，帮助器和工具，但它们都没有有效地解决主要问题 - 架构。</p>
<p>​    Nest 提供了一个开箱即用的应用程序架构，允许开发人员和团队创建高度可测试，可扩展，松散耦合且易于维护的应用程序。</p>
<h2 id="流行趋势"><a href="#流行趋势" class="headerlink" title="流行趋势"></a>流行趋势</h2><h3 id="npm下载量"><a href="#npm下载量" class="headerlink" title="npm下载量"></a>npm下载量</h3><img src="https://i.loli.net/2020/03/02/yFtbpaICvz9mlEJ.png" style="zoom:60%;" />

<h3 id="star趋势"><a href="#star趋势" class="headerlink" title="star趋势"></a>star趋势</h3><img src="https://i.loli.net/2020/03/02/eC8Nitx2Y4QcKwL.png" style="zoom:60%;" />

<h2 id="建立新项目"><a href="#建立新项目" class="headerlink" title="建立新项目"></a>建立新项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -g @nestjs/cli</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nest new MyNest</span></span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2020/03/02/vyuW5OdrCiSHNPe.png" style="zoom: 67%;" />

<h2 id="核心文件"><a href="#核心文件" class="headerlink" title="核心文件"></a>核心文件</h2><p>将创建 <code>project</code> 目录， 安装node模块和一些其他样板文件，并将创建一个 <code>src</code> 目录，目录中包含几个核心文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── app.controller.ts &#x2F;&#x2F; 带有单个路由的基本控制器示例。</span><br><span class="line">├── app.module.ts &#x2F;&#x2F; 应用程序的根模块。</span><br><span class="line">└── main.ts &#x2F;&#x2F; 应用程序入口文件。它使用 NestFactory 用来创建 Nest 应用实例。</span><br></pre></td></tr></table></figure>

<p><code>main.ts</code> 包含一个异步函数，它负责<strong>引导</strong>我们的应用程序：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApplicationModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(ApplicationModule);</span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br></pre></td></tr></table></figure>

<p>要创建一个 Nest 应用程序，我们使用了 <code>NestFactory</code> 核心类。<code>NestFactory</code> 暴露了一些静态方法用于创建应用实例。<code>create()</code> 方法返回一个实现 <code>INestApplication</code> 接口的对象，并提供一组可用的方法。在上面的 <code>main.ts</code> 示例中，我们只是启动了 HTTP 服务器，它允许应用程序等待入站 HTTP 请求。</p>
<h2 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h2><p>安装过程完成后，您可以在系统命令提示符下运行以下命令，以启动应用程序监听入站 HTTP 请求：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run start</span></span><br></pre></td></tr></table></figure>

<p>此命令在 <code>src</code> 目录中的 <code>main.ts</code> 文件中定义的端口上启动 HTTP 服务器。在应用程序运行时, 打开浏览器并访问 <code>http://localhost:3000/</code>。 你应该看到 <code>Hello world!</code> 信息。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Nest.js</tag>
        <tag>server</tag>
        <tag>掘金专栏</tag>
      </tags>
  </entry>
  <entry>
    <title>前端规范化开发实践</title>
    <url>/2020/03/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83%E5%8C%96%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/24/EKCvkLJZNtfBrpu.png" alt=""></p>
<a id="more"></a>

<p>本文以 React Native 项目为示例介绍了前端规范化开发涉及的工具及知识，但是所涉及内容具有通用性，建议读者点赞收藏(^▽^)。</p>
<h2 id="gitconfig"><a href="#gitconfig" class="headerlink" title="gitconfig"></a>gitconfig</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化设置</span></span><br><span class="line">$ git config --global user.name <span class="string">&#x27;your_name&#x27;</span></span><br><span class="line">$ git config --global user.email <span class="string">&#x27;your_email@aliyun.com&#x27;</span></span><br><span class="line"><span class="comment"># 提高命令输出的可读性</span></span><br><span class="line">$ git config --global color.ui auto</span><br><span class="line"><span class="comment"># git 记住用户名和密码</span></span><br><span class="line">$ git config --global credential.helper store</span><br><span class="line"><span class="comment"># core.autocrlf</span></span><br><span class="line">$ git config --global core.autocrlf input</span><br></pre></td></tr></table></figure>

<p>以上配置内容可以在 <code>~/.gitconfig</code> 文件中找到。</p>
<h2 id="npm-scripts"><a href="#npm-scripts" class="headerlink" title="npm scripts"></a>npm scripts</h2><p><code>package.json</code> 文件的 scripts 字段是定义可执行脚本用的，可以利用它来实现简单的工作流。如果不是大型的项目，不建议使用 gulp，npm scripts 一样可以完成工作流设计的任务。下面是 React Native 项目默认的 scripts，如今我们可以把使用和扩展 scripts 看做是前端基本功。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;android&quot;</span>: <span class="string">&quot;react-native run-android&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ios&quot;</span>: <span class="string">&quot;react-native run-ios&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;react-native start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;jest&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;prettier --write src/**/*/*.&#123;js,jsx,ts,tsx&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint src --ext .js,.jsx,.ts,.tsx --fix&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-EditorConfig-实现跨编辑器代码风格统一"><a href="#使用-EditorConfig-实现跨编辑器代码风格统一" class="headerlink" title="使用 EditorConfig 实现跨编辑器代码风格统一"></a>使用 EditorConfig 实现跨编辑器代码风格统一</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># EditorConfig is awesome: http:&#x2F;&#x2F;EditorConfig.org</span><br><span class="line"></span><br><span class="line"># top-most EditorConfig file</span><br><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line"># Unix-style newlines with a newline ending every file</span><br><span class="line">[*]</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 2</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">trim_trailing_whitespace &#x3D; true</span><br><span class="line">insert_final_newline &#x3D; true</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace &#x3D; false</span><br><span class="line"></span><br><span class="line">[*.gradle]</span><br><span class="line">indent_size &#x3D; 4</span><br><span class="line"></span><br><span class="line">[BUCK]</span><br><span class="line">indent_size &#x3D; 4</span><br></pre></td></tr></table></figure>

<h2 id="使用ESLint规范代码"><a href="#使用ESLint规范代码" class="headerlink" title="使用ESLint规范代码"></a>使用ESLint规范代码</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add -D eslint typescript eslint-config-airbnb-typescript</span><br><span class="line"><span class="comment"># 支持 react</span></span><br><span class="line">$ yarn add -D eslint-plugin-import@^2.22.0 \</span><br><span class="line">            eslint-plugin-jsx-a11y@^6.3.1 \</span><br><span class="line">            eslint-plugin-react@^7.20.3 \</span><br><span class="line">            eslint-plugin-react-hooks@^4.0.8 \</span><br><span class="line">            @typescript-eslint/eslint-plugin@^4.4.1</span><br><span class="line"><span class="comment"># 支持 react-native</span></span><br><span class="line">$ yarn add -D eslint-plugin-react-native</span><br><span class="line"><span class="comment"># 支持 jest</span></span><br><span class="line">$ yarn add -D eslint-plugin-jest babel-jest @babel/core metro-react-native-babel-preset</span><br><span class="line"><span class="comment"># 支持 prettier</span></span><br><span class="line">$ yarn add -D prettier eslint-plugin-prettier eslint-config-prettier</span><br></pre></td></tr></table></figure>

<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;eslintConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;extends&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;airbnb-typescript&quot;</span>,</span><br><span class="line">      <span class="string">&quot;plugin:jest/recommended&quot;</span>,</span><br><span class="line">      <span class="string">&quot;plugin:react-native/all&quot;</span>,</span><br><span class="line">      <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span>,</span><br><span class="line">      <span class="string">&quot;plugin:prettier/recommended&quot;</span>,</span><br><span class="line">      <span class="string">&quot;prettier&quot;</span>,</span><br><span class="line">      <span class="string">&quot;prettier/react&quot;</span>,</span><br><span class="line">      <span class="string">&quot;prettier/@typescript-eslint&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;project&quot;</span>: <span class="string">&quot;./tsconfig.json&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;react-native/react-native&quot;</span>: <span class="literal">true</span></span><br><span class="line">      <span class="string">&quot;jest/globals&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="prettierrc-js"><a href="#prettierrc-js" class="headerlink" title=".prettierrc.js"></a>.prettierrc.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  printWidth: <span class="number">150</span>, <span class="comment">// 一行的字符数，如果超过会进行换行，默认为80</span></span><br><span class="line">  tabWidth: <span class="number">2</span>, <span class="comment">// tab缩进大小,默认为2</span></span><br><span class="line">  useTabs: <span class="literal">false</span>, <span class="comment">// 使用tab缩进，默认false</span></span><br><span class="line">  semi: <span class="literal">false</span>, <span class="comment">// 使用分号, 默认true</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 行尾逗号,默认none,可选 none|es5|all</span></span><br><span class="line"><span class="comment">   * es5 包括es5中的数组、对象</span></span><br><span class="line"><span class="comment">   * all 包括函数对象等所有可选</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  trailingComma: <span class="string">&#x27;es5&#x27;</span>,</span><br><span class="line">  singleQuote: <span class="literal">true</span>, <span class="comment">// 使用单引号, 默认false(在jsx中配置无效, 默认都是双引号)</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 对象中的空格 默认true</span></span><br><span class="line"><span class="comment">   * true: &#123; foo: bar &#125;</span></span><br><span class="line"><span class="comment">   * false: &#123;foo: bar&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  bracketSpacing: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * JSX标签闭合位置 默认false</span></span><br><span class="line"><span class="comment">   * false:</span></span><br><span class="line"><span class="comment">   * &lt;div</span></span><br><span class="line"><span class="comment">   *  className=&quot;&quot;</span></span><br><span class="line"><span class="comment">   *  style=&#123;&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">   * &gt;</span></span><br><span class="line"><span class="comment">   * true:</span></span><br><span class="line"><span class="comment">   * &lt;div</span></span><br><span class="line"><span class="comment">   *  className=&quot;&quot;</span></span><br><span class="line"><span class="comment">   * style=&#123;&#123;&#125;&#125; &gt;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  jsxBracketSameLine: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 箭头函数参数括号 默认avoid 可选 avoid| always</span></span><br><span class="line"><span class="comment">   * avoid 能省略括号的时候就省略 例如x =&gt; x</span></span><br><span class="line"><span class="comment">   * always 总是有括号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  arrowParens: <span class="string">&#x27;avoid&#x27;</span>,</span><br><span class="line">  vueIndentScriptAndStyle: <span class="literal">false</span>, <span class="comment">// vue 文件 script 和 style 标签缩进，默认false</span></span><br><span class="line">  endOfLine: <span class="string">&#x27;lf&#x27;</span>, <span class="comment">// 强制使用 unix 风格的换行符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h3><ul>
<li>eslint-config-airbnb-typescript: 该软件包提供 Airbnb 的 .eslintrc 作为可扩展的共享配置</li>
<li>eslint-plugin-react-native: 针对 ESLint 的 React Native 特定 linting 规则</li>
<li>eslint-plugin-prettier: 以 ESLint 插件的形式运行 prettier</li>
<li>eslint-config-prettier: 关闭所有不必要或可能与 prettier 的规则冲突的 ESLint 规则。一定要放到最后。</li>
</ul>
<h3 id="vscode-eslint-plugin-config"><a href="#vscode-eslint-plugin-config" class="headerlink" title="vscode eslint plugin config"></a>vscode eslint plugin config</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;editor.codeActionsOnSave&quot;: &#123;</span><br><span class="line">  &quot;source.fixAll.eslint&quot;: true</span><br><span class="line">&#125;,</span><br><span class="line">&quot;eslint.lintTask.enable&quot;: true,</span><br><span class="line">&quot;eslint.packageManager&quot;: &quot;yarn&quot;,</span><br><span class="line">&quot;eslint.alwaysShowStatus&quot;: true,</span><br><span class="line">&quot;eslint.validate&quot;: [</span><br><span class="line">  &quot;javascript&quot;,</span><br><span class="line">  &quot;javascriptreact&quot;,</span><br><span class="line">  &quot;typescript&quot;,</span><br><span class="line">  &quot;typescriptreact&quot;,</span><br><span class="line">  &quot;vue&quot;,</span><br><span class="line">  <span class="string">&quot;html&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="用-husky-和-lint-staged-构建超溜的代码检查工作流"><a href="#用-husky-和-lint-staged-构建超溜的代码检查工作流" class="headerlink" title="用 husky 和 lint-staged 构建超溜的代码检查工作流"></a>用 husky 和 lint-staged 构建超溜的代码检查工作流</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add -D husky</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;husky&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;pre-commit&quot;</span>: <span class="string">&quot;tsc --noEmit &amp;&amp; lint-staged&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;**/*.&#123;js,jsx,ts,tsx&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add .&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;**/*.&#123;md,json&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;prettier --write&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add .&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Conventional-Commits-约定式提交规范"><a href="#Conventional-Commits-约定式提交规范" class="headerlink" title="Conventional Commits 约定式提交规范"></a>Conventional Commits 约定式提交规范</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29udmVudGlvbmFsY29tbWl0cy5vcmcvemgtaGFucy92MS4wLjAtYmV0YS40Lw==" title="https://www.conventionalcommits.org/zh-hans/v1.0.0-beta.4/">Conventional Commits<i class="fa fa-external-link"></i></span> 是一种用于给提交信息增加人机可读含义的规范。约定式提交规范是一种基于消息的轻量级约定。它提供了一组用于创建清晰的提交历史的简单规则；这使得编写基于规范的自动化工具变得更容易。这个约定与 <span class="exturl" data-url="aHR0cDovL3NlbXZlci5vcmcv" title="http://semver.org/">SemVer<i class="fa fa-external-link"></i></span> 相吻合，在提交信息中描述新特性、bug 修复和破坏性变更。</p>
<p>提交说明的结构如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;类型&gt;([可选的作用域]): &lt;描述&gt;</span><br><span class="line"></span><br><span class="line">[可选的正文]</span><br><span class="line"></span><br><span class="line">[可选的脚注]</span><br></pre></td></tr></table></figure>

<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul>
<li><code>build:</code>: 影响构建系统或外部依赖关系的更改（示例范围：gulp、broccoli、NPM）。</li>
<li><code>chore:</code>:  其他不修改<code>src</code>或<code>test</code>文件。</li>
<li><code>ci:</code>: 更改持续集成文件和脚本（示例范围：Travis、Circle、BrowserStack、SauceLabs）。</li>
<li><code>docs:</code>: 只是更改文档。</li>
<li><code>feat:</code>:  类型为 <code>feat</code> 的提交表示在代码库中新增了一个功能（这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#摘要"><code>MINOR</code></a> 相对应）。</li>
<li><code>fix:</code>：类型为 <code>fix</code> 的 提交表示在代码库中修复了一个 bug （这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#摘要"><code>PATCH</code></a> 相对应）。</li>
<li><code>improvement:</code>: 用于对当前实现进行改进而没有添加新功能或修复错误的提交。</li>
<li><code>perf:</code>: 改进性能的代码更改。</li>
<li><code>refactor:</code>: 代码重构，既不修复错误也不添加功能。</li>
<li><code>revert:</code>: commit 回退。</li>
<li><code>style:</code>: 不影响代码含义的变化（空白、格式化、缺少分号等）。</li>
<li><code>test:</code>: 添加确实测试或更正现有的测试。</li>
</ul>
<h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>可以为提交类型添加一个围在圆括号内的作用域，以为其提供额外的上下文信息。例如 <code>feat(parser): adds ability to parse arrays.</code>。</p>
<h3 id="BREAKING-CHANGE"><a href="#BREAKING-CHANGE" class="headerlink" title="BREAKING CHANGE"></a>BREAKING CHANGE</h3><p>在可选的正文或脚注的起始位置带有 <code>BREAKING CHANGE:</code> 的提交，表示引入了破坏性 API 变更（这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#摘要"><code>MAJOR</code></a> 相对应）。 破坏性变更可以是任意 <em>类型</em> 提交的一部分。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="包含了描述以及正文内有破坏性变更的提交说明"><a href="#包含了描述以及正文内有破坏性变更的提交说明" class="headerlink" title="包含了描述以及正文内有破坏性变更的提交说明"></a>包含了描述以及正文内有破坏性变更的提交说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feat: allow provided config object to extend other configs</span><br><span class="line"></span><br><span class="line">BREAKING CHANGE: &#96;extends&#96; key in config file is now used for extending other config files</span><br></pre></td></tr></table></figure>

<h4 id="包含了可选的-字符以提醒注意破坏性变更的提交说明"><a href="#包含了可选的-字符以提醒注意破坏性变更的提交说明" class="headerlink" title="包含了可选的 ! 字符以提醒注意破坏性变更的提交说明"></a>包含了可选的 <code>!</code> 字符以提醒注意破坏性变更的提交说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chore!: drop Node 6 from testing matrix</span><br><span class="line"></span><br><span class="line">BREAKING CHANGE: dropping Node 6 which hits end of life in April</span><br></pre></td></tr></table></figure>

<h4 id="不包含正文的提交说明"><a href="#不包含正文的提交说明" class="headerlink" title="不包含正文的提交说明"></a>不包含正文的提交说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docs: correct spelling of CHANGELOG</span><br></pre></td></tr></table></figure>

<h4 id="包含作用域的提交说明"><a href="#包含作用域的提交说明" class="headerlink" title="包含作用域的提交说明"></a>包含作用域的提交说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feat(lang): add polish language</span><br></pre></td></tr></table></figure>

<h4 id="为-fix-编写的提交说明，包含（可选的）-issue-编号"><a href="#为-fix-编写的提交说明，包含（可选的）-issue-编号" class="headerlink" title="为 fix 编写的提交说明，包含（可选的） issue 编号"></a>为 fix 编写的提交说明，包含（可选的） issue 编号</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fix: correct minor typos in code</span><br><span class="line"></span><br><span class="line">see the issue for details on the typos fixed</span><br><span class="line"></span><br><span class="line">closes issue #12</span><br></pre></td></tr></table></figure>

<h3 id="约定式提交规范"><a href="#约定式提交规范" class="headerlink" title="约定式提交规范"></a>约定式提交规范</h3><ol>
<li>每个提交都<strong>必须</strong>使用类型字段前缀，它由一个名词组成，诸如<code>feat</code>或<code>fix</code>，其后接一个<strong>可选的</strong>作用域字段，以及一个<strong>必要的</strong>冒号（英文半角）和空格。</li>
<li>当一个提交为应用或类库实现了新特性时，<strong>必须</strong>使用<code>feat</code>类型。</li>
<li>当一个提交为应用修复 bug 时，<strong>必须</strong>使用<code>fix</code>类型。</li>
<li>作用域字段可以跟随在类型字段后面。作用有<strong>必须</strong>是一个描述某部分代码的名词，并用圆括号包围，例如：<code>fix(parser):</code></li>
<li>描述字段<strong>必须</strong>紧接在类型/作用域前缀的空格之后。描述指的是对代码变更的简短总结，例如：<code>fix:array parsing issue when multiplejspaces were contained in string</code>。</li>
<li>在简短描述之后，<strong>可以</strong>编写更长的提交正文，为代码变更提供额外的上下文信息。正文<strong>必须</strong>起始于描述字段结束的一个空行后。</li>
<li>在正文结束的一个空行之后，<strong>可以</strong>编写一行或或多行脚注。脚注<strong>必须</strong>包含关于提交的元信息，例如：关联的合并请求、Reviewer、破坏性变更、每条元信息一行。</li>
<li>破坏性变更<strong>必须</strong>标示在正文区域最开始处，或脚注区域中某一行的开始。一个破坏性变更<strong>必须</strong>包含大写的文本<code>BREAKING CHANGE</code>，后面紧跟冒号和空格。</li>
<li>在<code>BREAKING CHANGE:</code>之后<strong>必须</strong>提供描述，以描述对 API 的变更。例如：<code>BREAKING CHANGE: environment variables now take precedence over config files</code>。</li>
<li>在提交说明中，<strong>可以</strong>使用<code>feat</code>和<code>fix</code>之外的类型。</li>
<li>工具的实现<strong>必须不</strong>区分大小写地解析构成约定式提交的信息单元，只有<code>BREAKING CHANGE</code>  <strong>必须</strong>是大写的。</li>
<li><strong>可以</strong>在类型/作用域前缀之后，<code>:</code>之前，附加<code>!</code>字符，以进一步提醒注意破坏性变更。当有<code>!</code>前缀时，正文或脚注内必须包含<code>BREAKING CHANGE: description</code></li>
</ol>
<h3 id="为什么使用约定式提交"><a href="#为什么使用约定式提交" class="headerlink" title="为什么使用约定式提交"></a>为什么使用约定式提交</h3><ul>
<li>自动化生产 CHANGELOG。</li>
<li>基于提交的类型，自动决定语义化的版本变更。</li>
<li>向同事、公众与其他利益关系者传达变化的性质。</li>
<li>触发构建和部署流程。</li>
<li>让人们探索一个更加结构化的提交历史，以便降低对你的项目作出贡献的难度。</li>
</ul>
<h2 id="commitlint"><a href="#commitlint" class="headerlink" title="commitlint"></a>commitlint</h2><p>commitlint检查您的提交消息是否符合<span class="exturl" data-url="aHR0cHM6Ly9jb252ZW50aW9uYWxjb21taXRzLm9yZy8=" title="https://conventionalcommits.org/">conventional commit format<i class="fa fa-external-link"></i></span>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D @commitlint/cli @commitlint/config-conventional @commitlint/prompt-cli</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D husky lint-staged</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;commit&quot;</span>: <span class="string">&quot;commit&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;commitlint&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;extends&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;@commitlint/config-conventional&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;husky&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;commit-msg&quot;</span>: <span class="string">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="standard-version"><a href="#standard-version" class="headerlink" title="standard-version"></a>standard-version</h2><p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvc3RhbmRhcmQtdmVyc2lvbg==" title="https://link.zhihu.com/?target=https%3A//github.com/conventional-changelog/standard-version">standard-version<i class="fa fa-external-link"></i></span> 是一款遵循<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9zZW12ZXIub3JnLw==" title="https://link.zhihu.com/?target=https%3A//semver.org/">语义化版本（ semver）<i class="fa fa-external-link"></i></span>和 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9jb252ZW50aW9uYWxjb21taXRzLm9yZy8=" title="https://link.zhihu.com/?target=https%3A//conventionalcommits.org/">commit message 标准规范<i class="fa fa-external-link"></i></span> 的版本和 changlog 自动化工具。通常情况线下，我们会在 master 分支进行如下的版本发布操作：</p>
<ol>
<li><code>git pull origin master</code></li>
<li>根据 <code>package.json</code> 中的 <code>version</code> 更新版本号，更新 CHANGELOG</li>
<li><code>git add .</code></li>
<li><code>git commit</code></li>
<li><code>git tag</code> 打版本操作</li>
<li><code>git push --follow-tags origin master &amp;&amp; npm publish</code>：push 版本 tag 和 master 分支到仓库并发布</li>
</ol>
<p>其中 <strong>2，3，4，5</strong> 是 standard-version 工具会自动完成的工作，配合本地的 shell 脚本，则可以自动完成一系列版本发布的工作了。</p>
<h3 id="安装-amp-使用"><a href="#安装-amp-使用" class="headerlink" title="安装 &amp; 使用"></a>安装 &amp; 使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D standard-version</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;release&quot;</span>: <span class="string">&quot;standard-version&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>First Release：<code>yarn release --first-release</code></li>
<li>Cutting Release：<code>yarn release</code></li>
<li>Release as a Pre-Release：<code>yarn release --prerelease</code> or <code>yarn release --prerelease alpha</code></li>
<li>Release as a Target Type Imperatively (<code>npm version</code>-like)：<code>yarn release --release-as minor</code> or <code>yarn release --release-as 1.1.0</code>，可以合并 <code>--prerelease</code>以此方便发布实验性特性</li>
<li>Prevent Git Hooks：<code>yarn release --no-verify</code></li>
</ul>
<h2 id="资源参考"><a href="#资源参考" class="headerlink" title="资源参考"></a>资源参考</h2><ul>
<li><a href="[https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90](https://git-scm.com/book/zh/v2/自定义-Git-Git-钩子)">Git 钩子</a></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2U2MDc5NDZmYjlhMDdlZjU2MjBlNWI=" title="https://juejin.im/post/5ce607946fb9a07ef5620e5b">前端自动化工作流中的hooks<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmQyZGViZmU1MWQ0NTdhYmM3MTBiNTc=" title="https://juejin.im/post/5bd2debfe51d457abc710b57">规范你的 commit message 并且根据 commit 自动生成 CHANGELOG.md<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MTg5NDE5Ng==" title="https://zhuanlan.zhihu.com/p/51894196">git commit 、CHANGELOG 和版本发布的标准自动化<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWZjNTI0MmYyNjVkYTBiN2Y0NGJlZTQ=" title="https://juejin.im/post/5afc5242f265da0b7f44bee4">优雅的提交你的 Git Commit Message<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29udmVudGlvbmFsY29tbWl0cy5vcmcvemgtaGFucy92MS4wLjAtYmV0YS40Lw==" title="https://www.conventionalcommits.org/zh-hans/v1.0.0-beta.4/">Conventional Commits<i class="fa fa-external-link"></i></span>：约定式提交，一种用于给提交信息增加人机可读含义的规范</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvc3RhbmRhcmQtdmVyc2lvbg==" title="https://github.com/conventional-changelog/standard-version">standard-version<i class="fa fa-external-link"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvc3RhbmRhcmQtdmVyc2lvbg==" title="https://link.zhihu.com/?target=https%3A//github.com/conventional-changelog/standard-version">standard-version<i class="fa fa-external-link"></i></span> 是一款遵循<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9zZW12ZXIub3JnLw==" title="https://link.zhihu.com/?target=https%3A//semver.org/">语义化版本（ semver）<i class="fa fa-external-link"></i></span>和 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9jb252ZW50aW9uYWxjb21taXRzLm9yZy8=" title="https://link.zhihu.com/?target=https%3A//conventionalcommits.org/">commit message 标准规范<i class="fa fa-external-link"></i></span> 的版本和 changlog 自动化工具</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvY29tbWl0bGludA==" title="https://github.com/conventional-changelog/commitlint">commitlint<i class="fa fa-external-link"></i></span>：检查您的提交消息是否符合<span class="exturl" data-url="aHR0cHM6Ly9jb252ZW50aW9uYWxjb21taXRzLm9yZy8=" title="https://conventionalcommits.org/">conventional commit format<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lZGl0b3Jjb25maWcub3JnLw==" title="https://editorconfig.org/">EditorConfig<i class="fa fa-external-link"></i></span>：EditorConfig有助于维护跨多个编辑器和IDE从事同一项目的多个开发人员的一致编码风格。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lc2xpbnQub3JnLw==" title="https://eslint.org/">ESLint<i class="fa fa-external-link"></i></span>：查找并修复JavaScript代码中的问题</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wcmV0dGllci5pby8=" title="https://prettier.io/">Prettier<i class="fa fa-external-link"></i></span>：更漂亮、固执的代码格式化</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>掘金专栏</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora基于PicGo-Core实现粘贴上传图片</title>
    <url>/2020/04/Typora%E5%9F%BA%E4%BA%8EPicGo-Core%E5%AE%9E%E7%8E%B0%E7%B2%98%E8%B4%B4%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/08/09/5lO27zCE4DbraV9.png" alt=""></p>
<a id="more"></a>

<h2 id="下载-PicGo-Core"><a href="#下载-PicGo-Core" class="headerlink" title="下载 PicGo-Core"></a>下载 PicGo-Core</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install picgo -g</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ yarn global add picgo</span><br></pre></td></tr></table></figure>

<h2 id="获取路径"><a href="#获取路径" class="headerlink" title="获取路径"></a>获取路径</h2><ul>
<li>node安装路径（<code>which node</code>）：<code>/usr/local/bin/node</code></li>
<li>picgo安装路径（<code>which picgo</code>）：<code>/usr/local/bin/picgo</code></li>
</ul>
<h3 id="Imgae-Upldoad-Setting"><a href="#Imgae-Upldoad-Setting" class="headerlink" title="Imgae Upldoad Setting"></a>Imgae Upldoad Setting</h3><blockquote>
<p>打开 Typora -&gt; 偏好设置 -&gt; 图像：</p>
</blockquote>
<p>上传服务选择“Custom Command”，自定义命令格式是 “[your node path] [your picgo-core path] upload”，比如我的是 <code>/usr/local/bin/node /usr/local/bin/picgo upload</code></p>
<p><img src="https://i.loli.net/2020/04/10/aCFG5ZW2xuR6qls.png" alt=""></p>
<h2 id="配置-sm-ms-api-token"><a href="#配置-sm-ms-api-token" class="headerlink" title="配置 sm.ms api token"></a>配置 sm.ms api token</h2><p>picgo 的默认配置文件为<code>~/.picgo/config.json</code>。其中<code>~</code>为用户目录。不同系统的用户目录不太一样。</p>
<p>linux 和 macOS 均为<code>~/.picgo/config.json</code>。</p>
<p>windows 则为<code>C:\Users\你的用户名/.picgo\config.json</code>。</p>
<p>配置文件需要至少有如下的配置项：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span>: <span class="string">&quot;smms&quot;</span>, <span class="comment">// 代表当前的默认上传图床为 SM.MS,</span></span><br><span class="line">    <span class="attr">&quot;smms&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;&quot;</span> <span class="comment">// 从https://sm.ms/home/apitoken获取的token</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span>: &#123;&#125; <span class="comment">// 为插件预留</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>点击<strong>验证图片上传选项</strong> 按钮</p>
<p><img src="https://i.loli.net/2020/04/10/LYNhz8rACdORjP7.png" alt="image-20200410180446932"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9waWNnby5naXRodWIuaW8vUGljR28tQ29yZS1Eb2MvemgvZ3VpZGUvY29uZmlnLmh0bWwjJUU5JUJCJTk4JUU4JUFFJUE0JUU5JTg1JThEJUU3JUJEJUFFJUU2JTk2JTg3JUU0JUJCJUI2" title="https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">Picgo-Core<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LnR5cG9yYS5pby9VcGxvYWQtSW1hZ2Uv" title="https://support.typora.io/Upload-Image/">Typora Upload Image<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>typora</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Docker安装配置Jenkins</title>
    <url>/2020/05/%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEJenkins/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/08/09/JTlVAuzO8xgF1N3.png" alt=""></p>
<a id="more"></a>

<p>Docker 安装配置请参考我的另一篇文章: <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTgzOWYyODUxODgyNTczYWI0NGYxYjQjaGVhZGluZy0xMQ==" title="https://juejin.im/post/5e839f2851882573ab44f1b4#heading-11">https://juejin.im/post/5e839f2851882573ab44f1b4#heading-11<i class="fa fa-external-link"></i></span></p>
<h2 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d \</span></span><br><span class="line">     -u root \</span><br><span class="line">     -p 8080:8080 -p 50000:50000 \</span><br><span class="line">     -v jenkins_home:/var/jenkins_home \</span><br><span class="line">     -e PLUGINS_FORCE_UPGRADE=true \</span><br><span class="line">     -e TRY_UPGRADE_IF_NO_MARKER=true \</span><br><span class="line">     -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai \</span><br><span class="line">     --name jenkins \</span><br><span class="line">     --restart always \</span><br><span class="line">     jenkins/jenkins</span><br></pre></td></tr></table></figure>

<p>需要更多定制参数你可以参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plbmtpbnNjaS9kb2NrZXI=" title="https://github.com/jenkinsci/docker">https://github.com/jenkinsci/docker<i class="fa fa-external-link"></i></span></p>
<h2 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h2><p>我没有域名，所以我的配置是基于端口的，你可以查看<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plbmtpbnNjaS9kb2NrZXIvYmxvYi9tYXN0ZXIvUkVBRE1FLm1k" title="https://github.com/jenkinsci/docker/blob/master/README.md">官方文档<i class="fa fa-external-link"></i></span> 获取更多方案：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8882</span>;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>        Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>        X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>        X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Fix the &quot;It appears that your reverse proxy set up is broken&quot; error.</span></span><br><span class="line">        <span class="attribute">proxy_pass</span>          http://127.0.0.1:8080;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>  <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Required for new HTTP-based CLI</span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="初始化jenkins"><a href="#初始化jenkins" class="headerlink" title="初始化jenkins"></a>初始化jenkins</h2><p>1、执行<code>cat /var/lib/docker/volumes/jenkins_home/_data/secrets/initialAdminPassword</code>，获取<strong>管理员密码</strong></p>
<p>2、启动完jenkins后通过浏览器输入地址<code>http://部署jenkins主机IP:端口</code></p>
<img src="https://i.loli.net/2020/04/10/YtRrWTZVQc7Mma3.png" style="zoom:75%;" />

<p>3、选择安装插件方式，这里我是默认第一个：</p>
<img src="https://i.loli.net/2020/04/10/IBlrbMFusXmdeA5.png" style="zoom:75%;" />

<p>4、进入插件安装界面，连网等待插件安装：</p>
<img src="https://i.loli.net/2020/04/10/gimNZtUID5YjK9f.png" style="zoom:75%;" />

<p>5、安装完插件后，进入创建管理员界面：</p>
<img src="https://i.loli.net/2020/04/10/SxvtAW3McBCqTEX.png" style="zoom:75%;" />

<h2 id="基于角色的认证策略"><a href="#基于角色的认证策略" class="headerlink" title="基于角色的认证策略"></a>基于角色的认证策略</h2><ol>
<li><p>请确保在 <strong>系统管理</strong> -&gt; <strong>插件管理</strong> 中安装了<strong>Role-based Authorization Strategy</strong>  插件！！</p>
</li>
<li><p>在 <strong>系统管理</strong> -&gt; <strong>安全</strong> -&gt; <strong>全局安全设置</strong> 中的 <strong>授权策略</strong> 配置项中选择 <strong>Role-Based Strategy</strong></p>
<p><img src="https://i.loli.net/2020/05/09/FiR59LEtqwCbDIh.png" alt=""></p>
</li>
<li><p>然后就可以在 <code>Manage and Assign Roles</code> 中管理角色</p>
</li>
</ol>
<h2 id="全局工具配置"><a href="#全局工具配置" class="headerlink" title="全局工具配置"></a>全局工具配置</h2><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><blockquote>
<p>自动安装请先到Oracle注册账号</p>
</blockquote>
<p><img src="https://i.loli.net/2020/05/09/jbzQ15qthxmTu9Z.png" alt=""></p>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><blockquote>
<p>需要先执行 <code>apt install git</code> 安装git，然后通过 <code>which git</code> 查看 git 安装位置！</p>
</blockquote>
<p><img src="https://i.loli.net/2020/05/09/lLSYIN5FARQ38uH.png" alt=""></p>
<h3 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h3><blockquote>
<p>需要先需要安装 <span class="exturl" data-url="aHR0cHM6Ly9wbHVnaW5zLmplbmtpbnMuaW8vbm9kZWpz" title="https://plugins.jenkins.io/nodejs">NodeJS Plugin<i class="fa fa-external-link"></i></span> 插件</p>
</blockquote>
<p><img src="https://i.loli.net/2020/05/09/B9R7pgIXd5OSCbq.png" alt=""></p>
<h2 id="Android-打包环境"><a href="#Android-打包环境" class="headerlink" title="Android 打包环境"></a>Android 打包环境</h2><h3 id="安装-android-sdk、sdkmagager"><a href="#安装-android-sdk、sdkmagager" class="headerlink" title="安装 android-sdk、sdkmagager"></a>安装 android-sdk、sdkmagager</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt update | apt install android-sdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt install snapd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> snap install androidsdk</span></span><br></pre></td></tr></table></figure>

<h3 id="复制android-sdk到-jenkins-volume"><a href="#复制android-sdk到-jenkins-volume" class="headerlink" title="复制android-sdk到 jenkins volume"></a>复制android-sdk到 jenkins volume</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp -R /usr/lib/android-sdk/ /var/lib/docker/volume/jenkins_home/_data/</span></span><br></pre></td></tr></table></figure>

<p>android-sdk 的安装位置可以通过 <code>adb --version</code> 查看：</p>
<img src="https://user-gold-cdn.xitu.io/2020/5/9/171f7fae7cf4ff7a?w=864&h=230&f=png&s=176444" alt="" style="zoom: 75%;" />

<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>将下面的的配置加入到 <code>~/.bash_profile</code> 或 <code>~/.zshrc</code> 中，并执行 <code>srouce ~/.bash_profile</code> 或 <code>srouce ~/.zshrc</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ANDROID_HOME&#x3D;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;jenkins_home&#x2F;_data&#x2F;android-sdk</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;tools</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;tools&#x2F;bin</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;platform-tools</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;emulator</span><br></pre></td></tr></table></figure>

<h3 id="accepted-licences"><a href="#accepted-licences" class="headerlink" title="accepted licences"></a>accepted licences</h3><blockquote>
<p>如果不授权会报错： Failed to install the following Android SDK packages as some licences have not been accepted.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yes | sdkmanager --sdk_root=<span class="variable">$&#123;ANDROID_HOME&#125;</span> --licenses</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果不指定 <code>--sdk_root=$&#123;ANDROID_HOME&#125;</code> 会报错：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjA3MzA2MTUvc2RrbWFuYWdlci13YXJuaW5nLWNvdWxkLW5vdC1jcmVhdGUtc2V0dGluZy1qYXZhLWxhbmctaWxsZWdhbGFyZ3VtZW50ZXhjZXB0aQ==" title="https://stackoverflow.com/questions/60730615/sdkmanager-warning-could-not-create-setting-java-lang-illegalargumentexcepti">SDKmanager : Warning: Could not create setting. java.lang.IllegalArgumentException<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h3 id="设置-Jenkins-ANDROID-HOME"><a href="#设置-Jenkins-ANDROID-HOME" class="headerlink" title="设置 Jenkins ANDROID_HOME"></a>设置 Jenkins ANDROID_HOME</h3><p>进入 <strong>系统管理</strong> -&gt; <strong>系统配置</strong> -&gt; <strong>全局属性</strong> 新增环境变量 <code>ANDROID_HOME</code>：</p>
<p><img src="https://i.loli.net/2020/05/09/jWANFZh8xCD1Sgm.png" alt=""></p>
<h2 id="GitHub-Plugin"><a href="#GitHub-Plugin" class="headerlink" title="GitHub Plugin"></a>GitHub Plugin</h2><p>这个插件的作用是集成 GitHub 到 Jenkins</p>
<h3 id="获取-GitHub-的-Personal-access-token"><a href="#获取-GitHub-的-Personal-access-token" class="headerlink" title="获取 GitHub 的 Personal access token"></a>获取 GitHub 的 Personal access token</h3><blockquote>
<p><strong>GitHub 主页</strong> -&gt; <strong>Settings</strong> -&gt; <strong>Developer settings</strong> -&gt; <strong>Personal access tokens</strong></p>
</blockquote>
<p><img src="https://i.loli.net/2020/05/09/qTLBC359Z2rNday.png" alt=""></p>
<h3 id="添加Github服务器"><a href="#添加Github服务器" class="headerlink" title="添加Github服务器"></a>添加Github服务器</h3><blockquote>
<p><strong>系统管理</strong> -&gt; <strong>系统设置</strong> -&gt; <strong>GitHub</strong> -&gt; <strong>添加Github服务器</strong></p>
</blockquote>
<p>这里的名称随便填，API URL 填写 <code>https://api.github.com/</code>：</p>
<p><img src="https://i.loli.net/2020/05/09/1FLEfTHhpexyXQW.png" alt=""></p>
<p>凭证类型选 <code>Secret text</code>：</p>
<p><img src="https://i.loli.net/2020/05/09/3Oypr4xniKZamG9.png" alt=""></p>
<p>在凭据选上刚刚你添加的，勾上管理 Hook，点击“连接测试”，成功之后如下所示：</p>
<p><img src="https://i.loli.net/2020/05/09/pBWKZMfq5IkGvyz.png" alt=""></p>
<h3 id="配置-GitHub-的-webhook-地址"><a href="#配置-GitHub-的-webhook-地址" class="headerlink" title="配置 GitHub 的 webhook 地址"></a>配置 GitHub 的 webhook 地址</h3><p>webhook 是通知 Jenkins 时的请求地址，用来填写到 GitHub 上，这样 GitHub 就能通过该地址通知到 Jenkins</p>
<p>假设Jenkins所在服务器的地址是：192.168.0.1，端口为8080，那么webhook地址就是 <code>http://192.168.0.1:8080/github-webhook/</code></p>
<p><img src="https://i.loli.net/2020/05/09/dU7AeiX13mWHqTp.png" alt="image-20200509175614040"></p>
<p>在 Payload URL 位置填入 webhook 地址，再点击底部的 Add webhook 按钮，这样就完成 webhook 配置了，今后当前工程有代码提交，GitHub 就会向此 webhook 地址发请求，通知 Jenkins 构建：</p>
<p><img src="https://i.loli.net/2020/05/09/BqoXjUQsile3K7A.png" alt=""></p>
<h3 id="任务配置"><a href="#任务配置" class="headerlink" title="任务配置"></a>任务配置</h3><ul>
<li><p>构造触发器选择：GitHub hook trigger for GITScm polling</p>
<p><img src="https://i.loli.net/2020/05/09/EF5DYKJHgOPayxA.png" alt=""></p>
</li>
<li><p>构建环境和绑定</p>
<p>如下图所示，勾选 Use secret text(s) or file(s)，下面的”凭据”选择我们之前配置过的凭证</p>
<p><img src="https://i.loli.net/2020/05/09/2noTEULmhAzd7Dg.png" alt=""></p>
</li>
</ul>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="修改默认时区为上海时区"><a href="#修改默认时区为上海时区" class="headerlink" title="修改默认时区为上海时区"></a>修改默认时区为上海时区</h3><p>在 <strong>系统管理</strong> -&gt; <strong>脚本命令行</strong> 里运行 <code>System.setProperty(&#39;org.apache.commons.jelly.tags.fmt.timeZone&#39;, &#39;Asia/Shanghai&#39;)</code></p>
<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><table>
<thead>
<tr>
<th align="center">作者微信</th>
<th align="center">知识星球</th>
<th align="center">赞赏作者</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>运维</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS中的居中操作</title>
    <url>/2020/06/CSS%E4%B8%AD%E7%9A%84%E5%B1%85%E4%B8%AD%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/06/03/RVGzPKoXgYINsAc.jpg" alt=""></p>
<p>居中的效果是Web开发中常见的需求，几乎和阴影、圆角可以并列为产品三大法宝，本文的目的是捋顺开发中常用的居中计较，方便记忆和日后查阅。为了方便演示，本文所有 demo 使用 React 的 CSS-in-JS 语法完成。</p>
<a id="more"></a>

<h2 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h2><h3 id="height、lineHeight、textAlign"><a href="#height、lineHeight、textAlign" class="headerlink" title="height、lineHeight、textAlign"></a>height、lineHeight、textAlign</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    boxSizing: <span class="string">&#x27;border-box&#x27;</span>,</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    color: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    textAlign: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    lineHeight: <span class="string">&#x27;98px&#x27;</span>,</span><br><span class="line">    border: <span class="string">&#x27;1px solid red&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  单行文本</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    color: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;flex&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  单行文本</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="多行文本居中"><a href="#多行文本居中" class="headerlink" title="多行文本居中"></a>多行文本居中</h2><h3 id="table-cell、vertical-align"><a href="#table-cell、vertical-align" class="headerlink" title="table-cell、vertical-align"></a>table-cell、vertical-align</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    boxSizing: <span class="string">&#x27;border-box&#x27;</span>,</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    color: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;table-cell&#x27;</span>,</span><br><span class="line">    verticalAlign: <span class="string">&#x27;middle&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Flex-1"><a href="#Flex-1" class="headerlink" title="Flex"></a>Flex</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    color: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;flex&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="图片居中"><a href="#图片居中" class="headerlink" title="图片居中"></a>图片居中</h2><h3 id="table-cell、verticalAlign、textAlign"><a href="#table-cell、verticalAlign、textAlign" class="headerlink" title="table-cell、verticalAlign、textAlign"></a>table-cell、verticalAlign、textAlign</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;table-cell&#x27;</span>,</span><br><span class="line">    verticalAlign: <span class="string">&#x27;middle&#x27;</span>,</span><br><span class="line">    textAlign: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;img src=<span class="string">&quot;http://iph.href.lu/50x50&quot;</span> alt=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Flex-2"><a href="#Flex-2" class="headerlink" title="Flex"></a>Flex</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;flex&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;img src=<span class="string">&quot;http://iph.href.lu/50x50&quot;</span> alt=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    position: <span class="string">&#x27;relative&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">      background: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">      width: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">      height: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">      position: <span class="string">&#x27;absolute&#x27;</span>,</span><br><span class="line">      left: <span class="string">&#x27;50%&#x27;</span>,</span><br><span class="line">      top: <span class="string">&#x27;50%&#x27;</span>,</span><br><span class="line">      transform: <span class="string">&#x27;translate(-50%,-50%)&#x27;</span>,</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Flex-3"><a href="#Flex-3" class="headerlink" title="Flex"></a>Flex</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;flex&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">      background: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">      width: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">      height: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><blockquote>
<p>本文首发于个人博客：<a href="https://youngjuning.js.org/">https://youngjuning.js.org/</a></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">作者微信</th>
<th align="center">知识星球</th>
<th align="center">赞赏作者</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>使用 wml 进行模块调试</title>
    <url>/2020/07/%E4%BD%BF%E7%94%A8-wml-%E8%BF%9B%E8%A1%8C%E6%A8%A1%E5%9D%97%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/07/10/U9HfpMmCqe3ZV25.jpg" alt=""></p>
<p>前端模块开发已经成为了开发标准。模块开发带来的一大便利就是让我们可以跨页面甚至跨应用复用代码。当我们跨应用复用模块时，就需要借助 npm 把模块发布出去供各个系统调用。今天介绍的 wml 是一个进行模块调试的利器。</p>
<a id="more"></a>

<h2 id="wml-是什么"><a href="#wml-是什么" class="headerlink" title="wml 是什么"></a>wml 是什么</h2><p>wml 侦听某个文件夹中的更改（使用<span class="exturl" data-url="aHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vd2F0Y2htYW4v" title="https://facebook.github.io/watchman/">Watchman<i class="fa fa-external-link"></i></span>），然后将更改的文件复制到另一个文件夹中。</p>
<p>wml 是一个 CLI 工具，其工作方式与ln -s非常相似。首先，使用 <code>wml add</code> 命令设置链接，然后运行wml服务（<code>wml start</code>）开始监听。仅此而已！</p>
<h2 id="为什么使用-wml"><a href="#为什么使用-wml" class="headerlink" title="为什么使用 wml"></a>为什么使用 wml</h2><p>让我们面对现实吧，有时符号链接还不够。Github中有超过 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlYXJjaD91dGY4PSVFMiU5QyU5MyZxPXN1cHBvcnQrZm9yK3N5bWxpbmtzJnR5cGU9SXNzdWVz" title="https://github.com/search?utf8=%E2%9C%93&q=support+for+symlinks&type=Issues">1万个<i class="fa fa-external-link"></i></span> 关于 <strong>“support for symlinks”</strong>。</p>
<p>到目前为止，我遇到的两个例子是: React Native 的包管理器<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9pc3N1ZXMvNjM3" title="https://github.com/facebook/react-native/issues/637">缺失对 symlinks 的支持<i class="fa fa-external-link"></i></span> 和Webpack的 <span class="exturl" data-url="aHR0cDovL3dlYnBhY2suZ2l0aHViLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWwjbnBtLWxpbmtlZC1tb2R1bGVzLWRvZXNuLXQtZmluZC10aGVpci1kZXBlbmRlbmNpZXM=" title="http://webpack.github.io/docs/troubleshooting.html#npm-linked-modules-doesn-t-find-their-dependencies">inability to find linked modules dependencies<i class="fa fa-external-link"></i></span>。很多人的办法就是直接修改 <strong>node_modules</strong> 下的文件夹，但是这会造成很多问题：</p>
<ol>
<li>当同时有两个项目依赖你的模块时，就搞砸了</li>
<li>当不小心执行了 <code>npm install</code>，就又搞砸了</li>
<li>总之就是感觉这样不对</li>
</ol>
<p>wml 使用 Facebook 的超快 Watchman 来监视源文件夹中的更改，并将它们（并且仅复制）复制到目标文件夹中。</p>
<h2 id="安装-watchman"><a href="#安装-watchman" class="headerlink" title="安装 watchman"></a>安装 watchman</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vd2F0Y2htYW4vZG9jcy9pbnN0YWxs" title="https://facebook.github.io/watchman/docs/install">watchmamn Installation<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzg0NTE3NjQvaG93LXRvLWluc3RhbGwtd2F0Y2htYW4tb24td2luZG93cy13aW4xMA==" title="https://stackoverflow.com/questions/38451764/how-to-install-watchman-on-windows-win10">How to install Watchman on Windows (win10)?<i class="fa fa-external-link"></i></span></li>
</ul>
<p>windows 下为了让 <code>wml start</code> 能够工作需要执行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># npmGlobalPrefix 可以通过 `npm prefix -g` 获取</span></span><br><span class="line">$ watchman watch <span class="variable">$&#123;npmGlobalPrefix&#125;</span>\node_modules\wml\src</span><br><span class="line"><span class="comment"># 一定要重启电脑让配置生效！</span></span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install -g wml</span><br></pre></td></tr></table></figure>

<h3 id="wml-命令"><a href="#wml-命令" class="headerlink" title="wml 命令"></a>wml 命令</h3><ul>
<li><code>wml add|a &lt;src&gt; &lt;dest&gt;</code>: 添加链接</li>
<li><code>wml start|s</code>: 开启 wml</li>
<li><code>wml list|ls</code>: 显示所有的链接</li>
<li><code>wml rm &lt;linkId&gt;</code>: 删除一个链接，传递 <code>all</code> 可以删除所有链接</li>
<li><code>wml enable|e</code>: 启用一个链接，传递 <code>all</code> 一键启用所有链接</li>
<li><code>wml disable|d</code>: 禁用一个链接，传递 <code>all</code> 一键禁用所有链接</li>
<li><code>watchman watch-del-all</code>: 修改 <code>.watchmanconfig</code> 之后需要清空 watchman 缓存</li>
</ul>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="npm-scripts"><a href="#npm-scripts" class="headerlink" title="npm scripts"></a>npm scripts</h3><p>这是我的习惯，写脚本能提高工作效率：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;wml start&quot;</span>,</span><br><span class="line">    <span class="comment">// yarn wml:add &lt;dest&gt;</span></span><br><span class="line">    <span class="attr">&quot;wml:add&quot;</span>: <span class="string">&quot;wml add ./&quot;</span>,</span><br><span class="line">    <span class="comment">// 修改 `.watchmanconfig` 之后需要清空 watchman 缓存</span></span><br><span class="line">    <span class="attr">&quot;wml:clean&quot;</span>:<span class="string">&quot;watchman watch-del-all&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="demo-在模块中"><a href="#demo-在模块中" class="headerlink" title="demo 在模块中"></a>demo 在模块中</h3><p>你可能为了演示你的模块，而把演示项目放在模块项目中，这也很常见的。我们需要做一下配置：</p>
<p>1、修改 package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;zhiliao&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;wml start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;wml:add&quot;</span>: <span class="string">&quot;wml add ./ ./Example/node_modules/zhiliao/&quot;</span>,</span><br><span class="line">    <span class="comment">// 修改 `.watchmanconfig` 之后需要清空 watchman 缓存</span></span><br><span class="line">    <span class="attr">&quot;wml:clean&quot;</span>:<span class="string">&quot;watchman watch-del-all&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、配置 .watchmanconfig 文件把 Example 文件夹忽略掉</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;ignore_dirs&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;.git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yarn-error.log&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yarn.lock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;README.md&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Example&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
<th align="center">公众号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>掘金专栏</tag>
        <tag>vant</tag>
        <tag>微精通</tag>
      </tags>
  </entry>
  <entry>
    <title>微精通之Vue移动端开发【持续更新】</title>
    <url>/2020/07/%E5%BE%AE%E7%B2%BE%E9%80%9A%E4%B9%8BVue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><a href="https://mubu.com/doc/7ZqGKUzpwrH"><img src="https://i.loli.net/2020/07/13/B1Hlcn3iazQ9fxs.png" alt=""></a></p>
<p>精通任何技能都是需要时间的，但是往往工作中是不会给你这个时间的，尤其是开发工作。新技术层出不穷，每个项目都可能技术栈不一样。</p>
<p>无法改变环境，那么就只能改变我们自身。如果让公司等你精通再开发，那你只能被淘汰。但如果毫无准备进入开发，项目质量又无从谈起，而且项目也可能失控。而微精通就是框定一个最小范围，快速熟悉完成任务所涉及的内容。今天我就拿 Vue 移动端开发做一个实验。</p>
<a id="more"></a>

<h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 Vue Cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个项目</span></span><br><span class="line">vue create zhiliao-vant</span><br></pre></td></tr></table></figure>

<h3 id="配置Prettier"><a href="#配置Prettier" class="headerlink" title="配置Prettier"></a>配置Prettier</h3><p>1、安装依赖</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add prettier eslint-plugin-prettier eslint-config-prettier -D</span><br></pre></td></tr></table></figure>

<ul>
<li>prettier: Prettier CLI</li>
<li>eslint-plugin-prettier: 以 ESLint 插件的形式运行 prettier</li>
<li>eslint-config-prettier: 关闭所有不必要或可能与 prettier 的规则冲突的 ESLint 规则。一定要放到最后。</li>
</ul>
<p>2、配置  <code>.eslintrc.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/airbnb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:prettier/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;prettier/vue&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">&#x27;babel-eslint&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="comment">// add your rules</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>3、新建 <code>/.prettierrc.js</code>，并写入如下配置</p>
<blockquote>
<p>注意: 要不要加分号的原则是<strong>领导为大，喜好为小</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  printWidth: <span class="number">120</span>, <span class="comment">// 一行的字符数，如果超过会进行换行，默认为80</span></span><br><span class="line">  tabWidth: <span class="number">2</span>, <span class="comment">// tab缩进大小,默认为2</span></span><br><span class="line">  useTabs: <span class="literal">false</span>, <span class="comment">// 使用tab缩进，默认false</span></span><br><span class="line">  semi: <span class="literal">false</span>, <span class="comment">// 使用分号, 默认true</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 行尾逗号,默认none,可选 none|es5|all</span></span><br><span class="line"><span class="comment">   * es5 包括es5中的数组、对象</span></span><br><span class="line"><span class="comment">   * all 包括函数对象等所有可选</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  trailingComma: <span class="string">&#x27;es5&#x27;</span>,</span><br><span class="line">  singleQuote: <span class="literal">true</span>, <span class="comment">// 使用单引号, 默认false(在jsx中配置无效, 默认都是双引号)</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 对象中的空格 默认true</span></span><br><span class="line"><span class="comment">   * true: &#123; foo: bar &#125;</span></span><br><span class="line"><span class="comment">   * false: &#123;foo: bar&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  bracketSpacing: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * JSX标签闭合位置 默认false</span></span><br><span class="line"><span class="comment">   * false:</span></span><br><span class="line"><span class="comment">   * &lt;div</span></span><br><span class="line"><span class="comment">   *  className=&quot;&quot;</span></span><br><span class="line"><span class="comment">   *  style=&#123;&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">   * &gt;</span></span><br><span class="line"><span class="comment">   * true:</span></span><br><span class="line"><span class="comment">   * &lt;div</span></span><br><span class="line"><span class="comment">   *  className=&quot;&quot;</span></span><br><span class="line"><span class="comment">   * style=&#123;&#123;&#125;&#125; &gt;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  jsxBracketSameLine: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 箭头函数参数括号 默认avoid 可选 avoid| always</span></span><br><span class="line"><span class="comment">   * avoid 能省略括号的时候就省略 例如x =&gt; x</span></span><br><span class="line"><span class="comment">   * always 总是有括号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  arrowParens: <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">  vueIndentScriptAndStyle: <span class="literal">false</span>, <span class="comment">// vue 文件 script 和 style 标签缩进，默认false</span></span><br><span class="line">  endOfLine: <span class="string">&#x27;lf&#x27;</span>, <span class="comment">// 强制使用 unix 风格的换行符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vscode-配置"><a href="#vscode-配置" class="headerlink" title="vscode 配置"></a>vscode 配置</h3><p>新建 <code>/.vscode/settings.json</code> 并写入以下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span>, <span class="comment">// 关闭保存时自动格式化，防止与 eslint 冲突</span></span><br><span class="line">  <span class="attr">&quot;files.eol&quot;</span>: <span class="string">&quot;\n&quot;</span>, <span class="comment">// 统一默认行尾字符为 LF</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span> <span class="comment">// 保存时自动修复</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 关闭 vetur 验证功能</span></span><br><span class="line">  <span class="attr">&quot;vetur.validation.script&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;vetur.validation.style&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;vetur.validation.template&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;vetur.format.enable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 禁用 prettier 插件，避免与 eslint 冲突，建议删除 vscode-prettier</span></span><br><span class="line">  <span class="attr">&quot;prettier.disableLanguages&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescriptreact&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jsonc&quot;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果是团队协作的项目，请删除 <code>.gitignore</code> 中的 <code>.vscode</code> ，将配置加入到代码库。</p>
</blockquote>
<h3 id="Format初始代码"><a href="#Format初始代码" class="headerlink" title="Format初始代码"></a>Format初始代码</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn lint</span><br></pre></td></tr></table></figure>

<h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="@vue/cli"></a>@vue/cli</h2><h3 id="vuerc"><a href="#vuerc" class="headerlink" title="~/.vuerc"></a>~/.vuerc</h3><p>被保存的 preset 将会存在用户的 home 目录下一个名为 <code>.vuerc</code> 的 JSON 文件里。如果你想要修改被保存的 <code>preset/</code> 选项，可以编辑这个文件。</p>
<p>在项目创建的过程中，你也会被提示选择喜欢的包管理器或使用<span class="exturl" data-url="aHR0cHM6Ly9ucG0udGFvYmFvLm9yZy8=" title="https://npm.taobao.org/">淘宝 npm 镜像源<i class="fa fa-external-link"></i></span>以更快地安装依赖。这些选择也将会存入 <code>~/.vuerc</code>。下面是我的配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;useTaobaoRegistry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span>: <span class="string">&quot;yarn&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;javascript&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;useConfigFiles&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;plugins&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@vue/cli-plugin-babel&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">&quot;@vue/cli-plugin-router&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;historyMode&quot;</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;@vue/cli-plugin-vuex&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;config&quot;</span>: <span class="string">&quot;airbnb&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;lintOn&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;save&quot;</span>,</span><br><span class="line">            <span class="string">&quot;commit&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;cssPreprocessor&quot;</span>: <span class="string">&quot;less&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="git-hooks"><a href="#git-hooks" class="headerlink" title="git hooks"></a>git hooks</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;gitHooks&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;*.&#123;js,jsx,vue&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;vue-cli-service lint&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;*.&#123;md,json&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;prettier --write&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="vue-cli3出现Invalid-Host-header的解决方案"><a href="#vue-cli3出现Invalid-Host-header的解决方案" class="headerlink" title="vue-cli3出现Invalid Host header的解决方案"></a>vue-cli3出现Invalid Host header的解决方案</h4><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1emhhbzU5My9hcnRpY2xlL2RldGFpbHMvODU5MTg4Njk=" title="https://blog.csdn.net/guzhao593/article/details/85918869">vue-cli3出现Invalid Host header的解决方案<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p><strong>产生原因</strong></p>
<p>新版的 <code>webpack-dev-server</code> 增加了安全验证，默认检查<code>hostname</code>，如果<code>hostname</code>不是配置内的，将中断访问。</p>
<p><strong>解决方案</strong></p>
<p>对<code>vue.config.js</code>进行如下配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Vant-UI"><a href="#Vant-UI" class="headerlink" title="Vant UI"></a>Vant UI</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add vant</span><br></pre></td></tr></table></figure>

<h3 id="按需引入组件"><a href="#按需引入组件" class="headerlink" title="按需引入组件"></a>按需引入组件</h3><p>安装 <code>babel-import-plugin</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add babel-plugin-import -D</span><br></pre></td></tr></table></figure>

<p>对于使用 babel7 的用户，可以在 <code>babel.config.js</code> 中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [<span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>],</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;import&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        libraryName: <span class="string">&#x27;vant&#x27;</span>,</span><br><span class="line">        libraryDirectory: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">        style: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;vant&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着你可以在代码中直接引入 Vant 组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line">Vue.use(Button);</span><br></pre></td></tr></table></figure>


<h3 id="配置基于-Rem-的适配方案"><a href="#配置基于-Rem-的适配方案" class="headerlink" title="配置基于 Rem 的适配方案"></a>配置基于 Rem 的适配方案</h3><p>Vant 中的样式默认使用<code>px</code>作为单位，如果需要使用<code>rem</code>单位，推荐使用以下两个工具：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2N1dGgvcG9zdGNzcy1weHRvcmVt" title="https://github.com/cuth/postcss-pxtorem">postcss-pxtorem<i class="fa fa-external-link"></i></span> 是一款 postcss 插件，用于将单位转化为 rem</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZmUvbGliLWZsZXhpYmxl" title="https://github.com/amfe/lib-flexible">lib-flexible<i class="fa fa-external-link"></i></span> 用于设置 rem 基准值</li>
</ul>
<p>1、安装依赖：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add amfe-flexible</span><br><span class="line">$ yarn add postcss-pxtorem -D</span><br></pre></td></tr></table></figure>

<p>2、在根目录新建 <code>postcss.config.js</code>，并写入以下配置：</p>
<blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdXphbi92YW50L2lzc3Vlcy8xMTgx" title="https://github.com/youzan/vant/issues/1181">设计稿是750px，根元素应该设置75，但是vant转换后好小，要改成35才行<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWltZWkvcC8xMTMxOTY1Ny5odG1s" title="https://www.cnblogs.com/yimei/p/11319657.html">使用vue vantUi框架 根字体是37.5 和默认根字体75不一致，导致页面组件样式变小<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">&#123; file &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> designWidth = file.dirname.includes(<span class="string">&#x27;node_modules/vant&#x27;</span>) ? <span class="number">37.5</span> : <span class="number">75</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    plugins: &#123;</span><br><span class="line">      autoprefixer: &#123;</span><br><span class="line">        overrideBrowserslist: [<span class="string">&#x27;Android 4.1&#x27;</span>, <span class="string">&#x27;iOS 7.1&#x27;</span>, <span class="string">&#x27;Chrome &gt; 31&#x27;</span>, <span class="string">&#x27;ff &gt; 31&#x27;</span>, <span class="string">&#x27;ie &gt;= 8&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;postcss-pxtorem&#x27;</span>: &#123;</span><br><span class="line">        rootValue: designWidth,</span><br><span class="line">        propList: [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;!border&#x27;</span>],</span><br><span class="line">        selectorBlackList: [<span class="string">&#x27;.ignore&#x27;</span>, <span class="string">&#x27;.hairlines&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 你可以使用 <code>Px</code> 或 <code>PX</code> 来让 <code>postcss-pxtorem</code> 忽略转换，而且这样浏览器也能识别。</p>
</blockquote>
<p>3、在 <code>src/main.js</code> 中引入 <code>amfe-flexible</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">import &#39;amfe-flexible&#39;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="底部安全区适配"><a href="#底部安全区适配" class="headerlink" title="底部安全区适配"></a>底部安全区适配</h3><p>iPhone X 等机型底部存在底部指示条，指示条的操作区域与页面底部存在重合，容易导致用户误操作，因此我们需要针对这些机型进行底部安全区适配。Vant 中部分组件提供了<code>safe-area-inset-bottom</code>属性，设置该属性后，即可在对应的机型上开启适配，如下示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 head 标签中添加 meta 标签，并设置 viewport-fit=cover 值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, viewport-fit=cover&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启 safe-area-inset-bottom 属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-number-keyboard</span> <span class="attr">safe-area-inset-bottom</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置自定义主题色方案"><a href="#配置自定义主题色方案" class="headerlink" title="配置自定义主题色方案"></a>配置自定义主题色方案</h3><h4 id="1、按需引入样式"><a href="#1、按需引入样式" class="headerlink" title="1、按需引入样式"></a>1、按需引入样式</h4><p>在 <code>babel.config.js</code> 中配置按需引入样式源文件:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;import&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        libraryName: <span class="string">&#x27;vant&#x27;</span>,</span><br><span class="line">        libraryDirectory: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">        <span class="comment">// 指定样式路径</span></span><br><span class="line">        style: <span class="function">(<span class="params">name</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>/style/less`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;vant&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="2、-修改样式变量"><a href="#2、-修改样式变量" class="headerlink" title="2、 修改样式变量"></a>2、 修改样式变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add less less-loader</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      less: &#123;</span><br><span class="line">        modifyVars: &#123;</span><br><span class="line">          <span class="comment">// 直接覆盖变量</span></span><br><span class="line">          <span class="string">&#x27;text-color&#x27;</span>: <span class="string">&#x27;#111&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;border-color&#x27;</span>: <span class="string">&#x27;#eee&#x27;</span>,</span><br><span class="line">          <span class="comment">// 或者可以通过 less 文件覆盖（文件路径为绝对路径）</span></span><br><span class="line">          hack: <span class="string">&#x27;true; @import &quot;your-less-file-path.less&quot;;&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Vant 使用了 <span class="exturl" data-url="aHR0cDovL2xlc3Njc3Mub3JnLw==" title="http://lesscss.org/">Less<i class="fa fa-external-link"></i></span> 对样式进行预处理，并内置了一些样式变量，下面是一些基本的样式变量，所有可用的颜色变量请参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdXphbi92YW50L2Jsb2IvZGV2L3NyYy9zdHlsZS92YXIubGVzcw==" title="https://github.com/youzan/vant/blob/dev/src/style/var.less">配置文件<i class="fa fa-external-link"></i></span>。</p>
</blockquote>
<h3 id="配置基于-Viewport-的适配方案（推荐）"><a href="#配置基于-Viewport-的适配方案（推荐）" class="headerlink" title="配置基于 Viewport 的适配方案（推荐）"></a>配置基于 Viewport 的适配方案（推荐）</h3><p>该方案和<strong>配置基于 Rem 的适配方案</strong>是互斥的，请二选一。</p>
<blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC91LzQzODIzODYvYmxvZy80MjkwNzA3" title="https://my.oschina.net/u/4382386/blog/4290707">移动端布局之postcss-px-to-viewport（兼容vant）<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY25sb29wL3AvOTY5NzIyOS5odG1s" title="https://www.cnblogs.com/cnloop/p/9697229.html">vue —— 利用 viewport 进行适配<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>1、安装 postcss-px-to-viewport</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add postcss-px-to-viewport -D</span></span><br></pre></td></tr></table></figure>

<p>2、配置<code>postcss.config.js</code> 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">&#123; file &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> designWidth = file.dirname.includes(<span class="string">&#x27;node_modules/vant&#x27;</span>) ? <span class="number">375</span> : <span class="number">750</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    plugins: &#123;</span><br><span class="line">      autoprefixer: &#123;</span><br><span class="line">        <span class="comment">// 用来给不同的浏览器自动添加相应前缀，如-webkit-，-moz-等等</span></span><br><span class="line">        overrideBrowserslist: [</span><br><span class="line">          <span class="string">&#x27;Android 4.1&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;iOS 7.1&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;Chrome &gt; 31&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;ff &gt; 31&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;ie &gt;= 8&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;postcss-px-to-viewport&quot;</span>: &#123;</span><br><span class="line">          unitToConvert: <span class="string">&quot;px&quot;</span>, <span class="comment">// 要转化的单位</span></span><br><span class="line">        viewportWidth: designWidth, <span class="comment">// UI设计稿的宽度</span></span><br><span class="line">        unitPrecision: <span class="number">6</span>, <span class="comment">// 转换后的精度，即小数点位数</span></span><br><span class="line">        propList: [<span class="string">&quot;*&quot;</span>,<span class="string">&quot;!border&quot;</span>], <span class="comment">// 指定转换的css属性的单位，*代表全部css属性的单位都进行转换</span></span><br><span class="line">        viewportUnit: <span class="string">&quot;vw&quot;</span>, <span class="comment">// 指定需要转换成的视窗单位，默认vw</span></span><br><span class="line">        fontViewportUnit: <span class="string">&quot;vw&quot;</span>, <span class="comment">// 指定字体需要转换成的视窗单位，默认vw</span></span><br><span class="line">        selectorBlackList: [<span class="string">&#x27;.ignore&#x27;</span>, <span class="string">&#x27;.hairlines&#x27;</span>], <span class="comment">// 指定不转换为视窗单位的类名</span></span><br><span class="line">        minPixelValue: <span class="number">1</span>, <span class="comment">// 默认值1，小于或等于1px则不进行转换</span></span><br><span class="line">        landscape: <span class="literal">false</span> <span class="comment">// 是否处理横屏情况</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>propList</code>: 当有些属性的单位我们不希望转换的时候，可以添加在数组后面，并在前面加上<code>!</code>号，如<code>propList: [&quot;*&quot;,&quot;!border&quot;]</code>,这表示：所有css属性的属性的单位都进行转化，除了<code>border</code>的</li>
<li><code>selectorBlackList</code>：转换的黑名单，在黑名单里面的我们可以写入字符串，只要类名包含有这个字符串，就不会被匹配。比如<code>selectorBlackList: [&#39;wrap&#39;]</code>,它表示形如<code>wrap</code>,<code>my-wrap</code>,<code>wrapper</code>这样的类名的单位，都不会被转换</li>
</ul>
<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><h3 id="vue中style-scope深度访问新方式-v-deep"><a href="#vue中style-scope深度访问新方式-v-deep" class="headerlink" title="vue中style scope深度访问新方式(::v-deep)"></a>vue中style scope深度访问新方式(<code>::v-deep</code>)</h3><blockquote>
<p>参考： <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMTU3NjM0OA==" title="https://segmentfault.com/a/1190000021576348">vue中style scope深度访问新方式(::v-deep)<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>由于使用 scoped 后，父组件的样式将不会渗透到子组件中。官方引入了 <span class="exturl" data-url="aHR0cHM6Ly92dWUtbG9hZGVyLnZ1ZWpzLm9yZy96aC9ndWlkZS9zY29wZWQtY3NzLmh0bWwj5rex5bqm5L2c55So6YCJ5oup5Zmo" title="https://vue-loader.vuejs.org/zh/guide/scoped-css.html#深度作用选择器">深度作用选择器<i class="fa fa-external-link"></i></span>，来解决这个问题。记得之前使用的是 <code>/deep/</code>，据说这个属性有兼容问题，现在引入了新方式：<code>::v-deep</code>:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#editDoctorAdvice</span> &#123;</span><br><span class="line">  .topSearch &#123;</span><br><span class="line">    <span class="selector-tag">float</span>: <span class="selector-tag">left</span>;</span><br><span class="line">    <span class="selector-tag">margin-right</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">::v-deep</span> <span class="selector-class">.el-input__inner</span> &#123;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">6px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.dateTimeClass</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzlmMjI4NzZmYjlhMDVlNDI1NTU2ZWQ=" title="https://juejin.im/post/5c9f22876fb9a05e425556ed">Vue入门指南(快速上手vue)<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTBjMTkxZjZmYjlhMDQ1MTQ2Mzk0MTk=" title="https://juejin.im/post/5a0c191f6fb9a04514639419">vue快速入门的三个小实例<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NoaW11cmFpL2h0dHAtcHJveHktbWlkZGxld2FyZQ==" title="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
<th align="center">公众号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>掘金专栏</tag>
        <tag>vant</tag>
        <tag>微精通</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Deno 构建 HTTP Server 实践指南</title>
    <url>/2020/07/%E5%9F%BA%E4%BA%8E-Deno-%E6%9E%84%E5%BB%BA-HTTP-Server-%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/07/29/Vn7jhOu3Z2c6pTe.png" alt=""></p>
<a id="more"></a>

<p>大家好，我是俊宁，这是一篇介绍如何使用 Deno 构建 HTTP Server 的实践指南，如果你还不了解Deno是什么，可以移步我的另一篇 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZjFkNDA2NWYyNjVkYTIyZDgzNDRkYzY=" title="https://juejin.im/post/5f1d4065f265da22d8344dc6">Deno入门文章<i class="fa fa-external-link"></i></span>。</p>
<p>本文还使用到了 Docker，如果不熟悉可以看一下 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTExMjQzMDAxODY5" title="https://juejin.im/post/6844904111243001869">一个前端工程师的Docker学习笔记【持续更新】<i class="fa fa-external-link"></i></span>。</p>
<p>mongodb 入门可以看一下 <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9tb25nb2RiL21vbmdvZGItdHV0b3JpYWwuaHRtbA==" title="https://www.runoob.com/mongodb/mongodb-tutorial.html">MongoDB 教程<i class="fa fa-external-link"></i></span>。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>deno: 使用 <code>deno -V</code> 查看是否正确安装了 deno</li>
<li>VSCode Deno插件: 支持 Deno 开发的 VSCode 插件</li>
<li>VSCode REST Client插件: 直接在VSCode中进行接口测试的插件</li>
</ul>
<h2 id="基础体验"><a href="#基础体验" class="headerlink" title="基础体验"></a>基础体验</h2><h3 id="官方示例解析"><a href="#官方示例解析" class="headerlink" title="官方示例解析"></a>官方示例解析</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; serve &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std/http/server.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = serve(&#123; port: <span class="number">8080</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;http://localhost:8080/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个会等待每一个请求的 for 循环</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> req <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.url);</span><br><span class="line">  req.respond(&#123; body: <span class="string">&quot;Hello World\n&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让我们来看看上面这段代码做了什么:</p>
<ol>
<li><p>首先我们引入 server 模块: 这里使用了 ES 模块，第三方模块通过 URL 导入。</p>
<blockquote>
<p>注意：Deno 不支持 <code>require</code> 语法。模块也不是集中管理的，而是通过 URL 导入。</p>
</blockquote>
</li>
<li><p>使用 <code>serve</code> 函数初始化一个 HTTP 服务</p>
</li>
<li><p>使用 <span class="exturl" data-url="aHR0cDovL3MwZGV2ZWxvcGVyMG1vemlsbGEwb3JnLmljb3B5LnNpdGUvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9mb3ItYXdhaXQuLi5vZg==" title="http://s0developer0mozilla0org.icopy.site/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of">for-await-of<i class="fa fa-external-link"></i></span> 语法监听请求，<code>for-await-of</code> 语句创建一个循环，循环遍历异步可迭代对象以及同步可迭代对象。</p>
<blockquote>
<p>注意：Deno不再捆绑在 async 函数之中，所以可以全局使用</p>
</blockquote>
</li>
</ol>
<h3 id="解析请求体"><a href="#解析请求体" class="headerlink" title="解析请求体"></a>解析请求体</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> decoder = <span class="keyword">new</span> TextDecoder(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> data: <span class="built_in">Uint8Array</span> = <span class="keyword">await</span> Deno.readAll(req.body);</span><br><span class="line"><span class="keyword">const</span> body = decoder.decode(data) ? <span class="built_in">JSON</span>.parse(decoder.decode(data)) : &#123;&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="简易REST-API"><a href="#简易REST-API" class="headerlink" title="简易REST API"></a>简易REST API</h3><p>1、这个Demo提供了两个api，分别是从文件读取数据返回和从网络获取数据并返回。结合数据库的放到后面使用框架的部分讲解：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; serve &#125; <span class="keyword">from</span> <span class="string">&quot;./deps.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = serve(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;http://localhost:8080/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> juejin = <span class="string">&quot;https://xiaoce-timeline-api-ms.juejin.im/v1/getListByLastTime?pageNum=1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> req <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.url === <span class="string">&quot;/books&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="keyword">await</span> Deno.readFile(<span class="string">&quot;./books.json&quot;</span>);</span><br><span class="line">    req.respond(&#123; <span class="attr">body</span>: body &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.url === <span class="string">&quot;/juejin&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(juejin);</span><br><span class="line">    <span class="keyword">const</span> jsonData = <span class="keyword">await</span> response.json();</span><br><span class="line">    req.respond(&#123;</span><br><span class="line">      body: <span class="built_in">JSON</span>.stringify(jsonData), <span class="comment">// body 不能接受对象</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、执行 <code>deno run --allow-read --allow-net index.ts</code></p>
<p>3、使用 VSCode  REST Client 访问一下试试：</p>
<blockquote>
<p>注意：如果 localhost 请求失败，请使用 ip 的形式。4090ok</p>
</blockquote>
<img src="https://i.loli.net/2020/07/30/ibwyIrKvjJld5GQ.png" />

<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>截止2020年7月30日，GitHub比较热门的 HTTP Server 框架有5个，分别是 oak、servest、deno-drash、abc、pogo（排名分先后）。</p>
<p>起初我也和大家一样面对这么多框架不知如何选，直到使用了<span class="exturl" data-url="aHR0cHM6Ly9zdGFyLWhpc3RvcnkudDl0LmlvLw==" title="https://star-history.t9t.io/">Star History<i class="fa fa-external-link"></i></span> 对比了他们的star趋势后，毫无犹豫的选择了 oak。</p>
<p>但是本着技术探究的角度，我们还是分别体验一下这5个框架的 Hello World，然后再利用oak进行实战演习。</p>
<p><a href="https://star-history.t9t.io/#oakserver/oak&keroxp/servest&drashland/deno-drash&zhmushan/abc&sholladay/pogo"><img src="https://i.loli.net/2020/08/01/w6FZXsfHQ4gydcK.png" style="zoom:45%;" /></a></p>
<h3 id="Oak"><a href="#Oak" class="headerlink" title="Oak"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29ha3NlcnZlci9vYWs=" title="https://github.com/oakserver/oak">Oak<i class="fa fa-external-link"></i></span></h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Oak 是最有前景的 Deno HTTP server 中间件框架，包含一个 路由中间件，目前能找到的社区资源最多。这款框架的灵感来自 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tvYWpzL2tvYQ==" title="https://github.com/koajs/koa">Koa<i class="fa fa-external-link"></i></span>，路由中间件的灵感来自 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tvYWpzL3JvdXRlci8=" title="https://github.com/koajs/router/">@koa/router<i class="fa fa-external-link"></i></span>。</p>
<h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p>创建一个 <code>server.ts</code> 文件并编写一个简单的 server：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Application &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/oak/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Application();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.response.body = <span class="string">&quot;Hello Oak!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`🦕 oak server running at http://127.0.0.1:8001/ 🦕`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> app.listen(<span class="string">&quot;127.0.0.1:8001&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>执行 <code>deno run --allow-net server.ts</code>开启服务，并使用 VSCode REST Client 测试：</p>
<p><img src="https://i.loli.net/2020/07/30/8q3AKy4EVLBb6Q1.png" alt=""></p>
<p>编写一个拥有两个自定义中间件的Demo:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Application &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/oak/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Application();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logger</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="keyword">const</span> rt = ctx.response.headers.get(<span class="string">&quot;X-Response-Time&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;ctx.request.method&#125;</span> <span class="subst">$&#123;ctx.request.url&#125;</span> - <span class="subst">$&#123;rt&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Timing</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start;</span><br><span class="line">  ctx.response.headers.set(<span class="string">&quot;X-Response-Time&quot;</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hello World!</span></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.response.body = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`🦕 oak server running at http://127.0.0.1:8889/ 🦕`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> app.listen(&#123; port: <span class="number">8889</span> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="servest"><a href="#servest" class="headerlink" title="servest"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tlcm94cC9zZXJ2ZXN0" title="https://github.com/keroxp/servest">servest<i class="fa fa-external-link"></i></span></h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><blockquote>
<p>用于Deno的渐进式http服务器</p>
</blockquote>
<p><code>Servest</code> 是一个适用于 Deno 的 http 模块，它由三个主要的 HTTP 协议的 API 组成</p>
<ul>
<li>App API: 通用HTTP路由服务器</li>
<li>Server API: 处理的 HTTP/1.1 请求的低级的 HTTP API</li>
<li>Agent API: 处理 HTTP/1.1 的 Keep-Alive 连接的低级API</li>
</ul>
<p>为了实验和进步，<code>Servest</code> 在 <span class="exturl" data-url="aHR0cHM6Ly9kZW5vLmxhbmQvc3RkL2h0dHA=" title="https://deno.land/std/http">std/http<i class="fa fa-external-link"></i></span> 之外实现了自己的 HTTP/1.1 server。</p>
<h4 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h4><p>与 std/http 高度兼容：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;https://servestjs.org/@v1.1.1/mod.ts&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = createApp();</span><br><span class="line">app.handle(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (req) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> req.respond(&#123;</span><br><span class="line">    status: <span class="number">200</span>,</span><br><span class="line">    headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">      <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    body: <span class="string">&quot;Hello, Servest!&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(&#123; port: <span class="number">8899</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>专为实际业务而设计：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;https://servestjs.org/@v1.1.1/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp();</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/post&quot;</span>, <span class="keyword">async</span> (req) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> body = <span class="keyword">await</span> req.json();</span><br><span class="line">  <span class="keyword">await</span> req.respond(&#123;</span><br><span class="line">    status: <span class="number">200</span>,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(body),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(&#123; port: <span class="number">8888</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>支持websoket：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;https://servestjs.org/@v1.1.1/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp();</span><br><span class="line"></span><br><span class="line">app.ws(<span class="string">&quot;/ws&quot;</span>, <span class="keyword">async</span> (sock) =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> msg <span class="keyword">of</span> sock) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> msg === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;[index]&quot;</span>, msg);</span><br><span class="line">      <span class="comment">// handle messages...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(&#123; port: <span class="number">8888</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>内置 jsx/tsx 支持，无需任何配置：</p>
<blockquote>
<p>默认情况下，JSX文件（<code>.jsx</code>，<code>.tsx</code>）将由 <code>React.createElement()</code>转换。因此，您必须在jsx/tsx文件的头上导入React。</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @deno-types=&quot;https://servestjs.org/@v1.1.1/types/react/index.d.ts&quot;</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;https://dev.jspm.io/react/index.js&quot;</span>;</span><br><span class="line"><span class="comment">// @deno-types=&quot;https://servestjs.org/@v1.1.1/types/react-dom/server/index.d.ts&quot;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOMServer <span class="keyword">from</span> <span class="string">&quot;https://dev.jspm.io/react-dom/server.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;https://servestjs.org/@v1.1.1/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp();</span><br><span class="line"></span><br><span class="line">app.handle(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (req) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> req.respond(&#123;</span><br><span class="line">    status: <span class="number">200</span>,</span><br><span class="line">    headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">      <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;text/html; charset=UTF-8&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    body: ReactDOMServer.renderToString(</span><br><span class="line">      &lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">          &lt;meta charSet=<span class="string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="line">          &lt;title&gt;servest&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">          &lt;h1&gt;Hello Servest!&lt;/h1&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">      &lt;/html&gt;,</span><br><span class="line">    ),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(&#123; port: <span class="number">8899</span> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="deno-drash"><a href="#deno-drash" class="headerlink" title="deno-drash"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RyYXNobGFuZC9kZW5vLWRyYXNo" title="https://github.com/drashland/deno-drash">deno-drash<i class="fa fa-external-link"></i></span></h3><p>A REST microframework for Deno’s HTTP server with zero dependencies.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Drash &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/drash@v1.x/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HomeResource <span class="keyword">extends</span> Drash.Http.Resource &#123;</span><br><span class="line">  <span class="keyword">static</span> paths = [<span class="string">&quot;/&quot;</span>];</span><br><span class="line">  <span class="keyword">public</span> GET() &#123;</span><br><span class="line">    <span class="built_in">this</span>.response.body = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.response;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> Drash.Http.Server(&#123;</span><br><span class="line">  response_output: <span class="string">&quot;text/html&quot;</span>,</span><br><span class="line">  resources: [HomeResource],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.run(&#123;</span><br><span class="line">  hostname: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">  port: <span class="number">8888</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`🦕 drash server running at http://127.0.0.1:8888/ 🦕`</span>);</span><br></pre></td></tr></table></figure>

<h3 id="abc"><a href="#abc" class="headerlink" title="abc"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pobXVzaGFuL2FiYw==" title="https://github.com/zhmushan/abc">abc<i class="fa fa-external-link"></i></span></h3><p>A better Deno framework to create web application.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Application &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/abc@v1/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Application();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/hello&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, Abc!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.start(&#123; port: <span class="number">8888</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`🦕 abc server running at http://127.0.0.1:8888/ 🦕`</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Pogo"><a href="#Pogo" class="headerlink" title="Pogo"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nob2xsYWRheS9wb2dv" title="https://github.com/sholladay/pogo">Pogo<i class="fa fa-external-link"></i></span></h3><p>Pogo是用于编写Web服务器和应用程序的易于使用，安全且富有表现力的框架，它的灵感来自 hapi。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;https://dev.jspm.io/react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> pogo <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/pogo/main.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = pogo.server(&#123; port: <span class="number">8888</span> &#125;);</span><br><span class="line"></span><br><span class="line">server.router.get(<span class="string">&quot;/&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;h1&gt;Hello, world!&lt;/h1&gt;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.start();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`🦕 pogo server running at http://127.0.0.1:8888/ 🦕`</span>);</span><br></pre></td></tr></table></figure>

<h2 id="oak-实战"><a href="#oak-实战" class="headerlink" title="oak 实战"></a>oak 实战</h2><blockquote>
<p>项目源码已同步开源: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2Rlbm8tb2FrLW1vbmdvLWRlbW8=" title="https://github.com/youngjuning/deno-oak-mongo-demo">youngjuning/deno-oak-mongo-demo<i class="fa fa-external-link"></i></span>，下文只对遇到的坑做介绍，具体代码请查看源码。</p>
</blockquote>
<h3 id="项目骨架"><a href="#项目骨架" class="headerlink" title="项目骨架"></a>项目骨架</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .env # 使用 denv 插件来获取</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── config # 配置文件</span><br><span class="line">│   └── db.ts</span><br><span class="line">├── deps.ts # 官方推荐的依赖管理方式</span><br><span class="line">├── controllers # 存放路由处理器</span><br><span class="line">│   ├── createBooks.ts</span><br><span class="line">│   ├── deleteBook.ts</span><br><span class="line">│   ├── getBookDetails.ts</span><br><span class="line">│   ├── getBooks.ts</span><br><span class="line">│   ├── notFound.ts</span><br><span class="line">│   └── updateBook.ts</span><br><span class="line">├── middlewares # 存放中间件，用于处理每个请求</span><br><span class="line">│   └── error.ts</span><br><span class="line">├── models # 存放模型定义</span><br><span class="line">│   └── Book.ts</span><br><span class="line">├── publish.sh # 发布脚本</span><br><span class="line">├── router.ts # 定义路由信息</span><br><span class="line">├── server.ts # 服务入口文件</span><br><span class="line">├── services # 存放模型定义</span><br><span class="line">│   └── books.ts</span><br><span class="line">├── test.http # VSCode REST Client 文件，用来调试接口</span><br><span class="line">└── utils # 工具函数</span><br><span class="line">    └── getParams.ts # 将 ctx.request.url.search 转成对象</span><br></pre></td></tr></table></figure>

<h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><blockquote>
<p>作为一个前端工程师，为了写这篇文章，专门学了 mongodb。由于第一次接触，遇到最多的坑也是关于它的。</p>
</blockquote>
<h4 id="多容器链接"><a href="#多容器链接" class="headerlink" title="多容器链接"></a>多容器链接</h4><p>1、使用 <code>--link</code> 参数链接 mongo 容器，deno_mongo 是我们指定的映射到 juejin 容器内的数据库别名（这个很重要，连接数据库时要用）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --restart always \</span><br><span class="line">  --name mongo \</span><br><span class="line">  -v mongo_configdb:/data/configdb \</span><br><span class="line">  -v mongo_data:/data/db \</span><br><span class="line">  -p 27017:27017 \</span><br><span class="line">  mongo \</span><br><span class="line">  --auth</span><br><span class="line">docker run -d \</span><br><span class="line">  --restart always \</span><br><span class="line">  --name juejin \</span><br><span class="line">  -p 1998:1998 \</span><br><span class="line">  --link mongo:deno_mongo \</span><br><span class="line">  juejin</span><br></pre></td></tr></table></figure>

<p>2、跨容器连接时不设置身份校验，开启服务端无法连接上mongo数据库，所以必须事先配置好 mongodb 的账号密码，并通过 <code>mongodb://root:123456@deno_mongo:27017/</code> 的形式连接。</p>
<p>3、虽然不开启 <code>--auth</code> 是可以使用 mongo 的，但是这样不安全，强烈建议启动容器的时候加上 <code>--auth</code> 参数。</p>
<h4 id="deno-mongo"><a href="#deno-mongo" class="headerlink" title="deno_mongo"></a>deno_mongo</h4><p>这个插件在 run 起来的时候依赖的文件在 github 上，我卡在这里一下午。docker 启动项目后，由于容器内访问不了 github，导致一直失败。</p>
<p>幸运的是，码云可以同步 github 上的项目，coding 可以上传单文件不超过 20M 的文件，我成功地完成了这篇文章最后的一步：docker 部署项目。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20veWFuZ2p1bm5pbmcvZGVub19tb25nby9yYXcvbWFzdGVyL21vZC50cw==" title="https://gitee.com/yangjunning/deno_mongo/raw/master/mod.ts">插件地址<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly95b3VuZ3VuaW5nLmNvZGluZy5uZXQvcC9kZW5vX21vbmdvL2QvZGVub19tb25nby9naXQvcmF3L21hc3Rlcg==" title="https://younguning.coding.net/p/deno_mongo/d/deno_mongo/git/raw/master">依赖的文件地址<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>其他部分就没什么好说了，clone 代码后，需要先配置一下 mongodb。然后再改代码，就是直接执行 <code>./publish.sh</code> 就可以应用更改。</p>
<h4 id="mongodb-初始配置"><a href="#mongodb-初始配置" class="headerlink" title="mongodb 初始配置"></a>mongodb 初始配置</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不带权限校验的模式开启 mongo</span></span><br><span class="line">$ docker run -d \</span><br><span class="line">  --restart always \</span><br><span class="line">  --name mongo \</span><br><span class="line">  -v mongo_data:/data/db \</span><br><span class="line">  -p 27017:27017 \</span><br><span class="line">  mongo \</span><br><span class="line"><span class="comment"># mongodb 默认不开启验证，只要能访问服务器，即可直接登录，所以需要配置一下账号密码进行校验。</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it mongo mongo admin</span><br><span class="line"><span class="comment"># 创建超级管理员</span></span><br><span class="line">&gt; db.createUser(&#123; user: <span class="string">&quot;root&quot;</span> , <span class="built_in">pwd</span>: <span class="string">&quot;123456&quot;</span>, roles: [<span class="string">&quot;root&quot;</span>]&#125;);</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">   <span class="string">&quot;user&quot;</span> : <span class="string">&quot;root&quot;</span>,</span><br><span class="line">   <span class="string">&quot;roles&quot;</span> : [<span class="string">&quot;root&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 尝试使用上面创建的用户信息进行连接。</span></span><br><span class="line">&gt; db.auth(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">1</span><br><span class="line"><span class="comment"># 创建一个名为 admin，密码为 123456 的用户。</span></span><br><span class="line">&gt; db.createUser(&#123; user: <span class="string">&quot;admin&quot;</span>, <span class="built_in">pwd</span>: <span class="string">&quot;123456&quot;</span>, roles:[<span class="string">&quot;userAdminAnyDatabase&quot;</span>, <span class="string">&quot;dbAdminAnyDatabase&quot;</span>, <span class="string">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">   <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">   <span class="string">&quot;roles&quot;</span>: [</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="string">&quot;role&quot;</span>: <span class="string">&quot;userAdminAnyDatabase&quot;</span>,</span><br><span class="line">      <span class="string">&quot;db&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 尝试使用上面创建的用户信息进行连接。</span></span><br><span class="line">&gt; db.auth(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><blockquote>
<p>完成了 mongodb 的初始化配置，之后就可以使用 <code>./publish.sh</code> 一键发布应用。</p>
</blockquote>
<ol>
<li>给脚本赋予可执行权限：<code>chmod a+x ./publish.sh</code></li>
<li>构建镜像并发布容器：<code>./publish.sh</code></li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzgxYzFlOGU1MWQ0NTUzNWM0ZmU1YzI=" title="https://juejin.im/post/5c81c1e8e51d45535c4fe5c2">我为 VS Code 开发了一个 Deno 插件<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM2Mzg3MS9hcnRpY2xlL2RldGFpbHMvMTA0MDU4ODk4" title="https://blog.csdn.net/weixin_43363871/article/details/104058898">VScode中测试接口代替postman<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzNzQxNTIzNDkyODc3" title="https://juejin.im/post/6844903741523492877">Docker容器化部署尝试——多容器通信（node + mongoDB + nginx）<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTYyMzIxMjUyMzYwI2hlYWRpbmctMjE=" title="https://juejin.im/post/6844904162321252360#heading-21">了不起的 Deno 实战篇<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUE1NDExeDdiZw==" title="https://www.bilibili.com/video/BV1A5411x7bg">Deno快速入门指南<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXYudG8va3J5ei93cml0ZS1hLXNtYWxsLWFwaS11c2luZy1kZW5vLTFjbDA=" title="https://dev.to/kryz/write-a-small-api-using-deno-1cl0">Write a small API using Deno<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B0b21hbmFnbGUvNS13YXlzLXRvLWJ1aWxkLWEtaHR0cC1zZXJ2ZXItd2l0aC1kZW5vLTMxNjkzODkxMThhYQ==" title="https://medium.com/@tomanagle/5-ways-to-build-a-http-server-with-deno-3169389118aa">5 Ways to Build a HTTP Server With Deno<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXYudG8vc2xpbWhtaWRpL2NyZWF0ZS1hLXNlcnZlci13aXRoLWRlbm8tYW5kLW1vbmdvLTIwNmw=" title="https://dev.to/slimhmidi/create-a-server-with-deno-and-mongo-206l">Create a server with deno and mongo.<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvOWxnZHJBWEE3Ml9faTJsa3pqMkdOQQ==" title="https://mp.weixin.qq.com/s/9lgdrAXA72__i2lkzj2GNA">【译】Deno + MongoDB 构建 CRUD API<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>后续，我想基于本文所述的架构，开发一个婚礼请柬小程序的后台，之前不会操作数据库，曾想使用 leancloud。奋战两天之后，妈妈再也不担心我不会写接口了。最后来放上一只喝奶茶的吉祥物：</p>
<p><img src="https://i.loli.net/2020/08/03/4VM2kKtZS1Pazwo.png" alt=""></p>
<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
<th align="center">公众号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZjFkMWQ5N2YyNjVkYTIyYjY0OTVlZDI=" title="https://juejin.im/post/5f1d1d97f265da22b6495ed2">🏆 技术专题第一期 | 聊聊 Deno的一些事儿……<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Deno</category>
      </categories>
      <tags>
        <tag>掘金专栏</tag>
        <tag>Deno</tag>
      </tags>
  </entry>
  <entry>
    <title>装它|再也不用操心ESLint配置</title>
    <url>/2020/07/%E8%A3%85%E5%AE%83-%E4%BD%A0%E5%86%8D%E4%B9%9F%E4%B8%8D%E7%94%A8%E6%93%8D%E5%BF%83ESLint%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/07/24/aGtwAFpOXledCUc.png" alt=""></p>
<a id="more"></a>

<p>大家是否像我一样苦 ESlint 久已呢？只是配置一个代码格式化工具，动辄10几个依赖。依赖之间又相互依赖，版本错误，配置顺序错误都会导致失效。</p>
<p>就算熟练掌握了 ESLint 配置，但是换了项目，又要重新配置。如果是从React切换到Vue项目，情况会更糟糕，你不得不额外做一些无意义的配置工作。而我今天带来的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2VzbGludC1jb25maWctYWlyYm5i" title="https://github.com/youngjuning/eslint-config-airbnb">@youngjuning/eslint-config-airbnb<i class="fa fa-external-link"></i></span> 便是用来把你从繁琐的 ESLint 配置工作中解放出来的一款插件。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一款基于 airbnb 的强大的 eslint 配置插件，支持 vue、jsx、js、ts、tsx、html、jest，致力于把你从繁琐的 ESLint 配置工作中解放出来。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>首先，为了避免冲突，请移除项目中已存在的配置，你可以保留 rules</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add -D @youngjuning/eslint-config-airbnb</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Add to your eslint config (<code>.eslintrc.js</code>):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">extends</span>: <span class="string">&#x27;@youngjuning/airbnb&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="react-native"><a href="#react-native" class="headerlink" title="react native"></a>react native</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">extends</span>: <span class="string">&#x27;@youngjuning/airbnb&#x27;</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    <span class="string">&#x27;react-native/react-native&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vue-with-typescript"><a href="#vue-with-typescript" class="headerlink" title="vue with typescript"></a>vue with typescript</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">extends</span>: <span class="string">&#x27;@youngjuning/airbnb&#x27;</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><h3 id="eslintignore"><a href="#eslintignore" class="headerlink" title=".eslintignore"></a>.eslintignore</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!.eslintrc.js</span><br><span class="line">!.prettierrc.js</span><br></pre></td></tr></table></figure>

<h3 id="prettierrc-js"><a href="#prettierrc-js" class="headerlink" title=".prettierrc.js"></a>.prettierrc.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...require(<span class="string">&#x27;@youngjuning/eslint-config-airbnb/.prettierrc.js&#x27;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="prettierignore"><a href="#prettierignore" class="headerlink" title=".prettierignore"></a>.prettierignore</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**&#x2F;node_modules&#x2F;*</span><br></pre></td></tr></table></figure>

<h3 id="editorconfig"><a href="#editorconfig" class="headerlink" title=".editorconfig"></a>.editorconfig</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># EditorConfig is awesome: http:&#x2F;&#x2F;EditorConfig.org</span><br><span class="line"></span><br><span class="line"># top-most EditorConfig file</span><br><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line"># Unix-style newlines with a newline ending every file</span><br><span class="line">[*]</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 2</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">trim_trailing_whitespace &#x3D; true</span><br><span class="line">insert_final_newline &#x3D; true</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace &#x3D; false</span><br><span class="line"></span><br><span class="line">[*.gradle]</span><br><span class="line">indent_size &#x3D; 4</span><br><span class="line"></span><br><span class="line">[BUCK]</span><br><span class="line">indent_size &#x3D; 4</span><br></pre></td></tr></table></figure>

<h2 id="yorkie-amp-lint-staged"><a href="#yorkie-amp-lint-staged" class="headerlink" title="yorkie &amp; lint-staged"></a>yorkie &amp; lint-staged</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add -D yorkie lint-staged</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;gitHooks&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// you can add wxml/html...</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;less,md,json&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;prettier --write&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
<th align="center">公众号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>掘金专栏</tag>
        <tag>ESLint</tag>
      </tags>
  </entry>
  <entry>
    <title>怕什么真理无穷，进一寸有一寸的欢喜 | 掘金征文</title>
    <url>/2020/07/%E6%80%95%E4%BB%80%E4%B9%88%E7%9C%9F%E7%90%86%E6%97%A0%E7%A9%B7%EF%BC%8C%E8%BF%9B%E4%B8%80%E5%AF%B8%E6%9C%89%E4%B8%80%E5%AF%B8%E7%9A%84%E6%AC%A2%E5%96%9C-%E6%8E%98%E9%87%91%E5%BE%81%E6%96%87/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/07/16/zxg29fl1ptGhIAb.png" alt=""></p>
<a id="more"></a>

<p>大家好，我是俊宁，也是我的名字，不是我自恋，是我朋友同事都这么叫我（懒的起花名🐶），<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL3d4LXByb21pc2UtcHJv" title="https://github.com/youngjuning/wx-promise-pro">wx-promise-pro<i class="fa fa-external-link"></i></span> 的作者，微信是 <code>yang_jun_ning</code>。</p>
<h2 id="我的现状"><a href="#我的现状" class="headerlink" title="我的现状"></a>我的现状</h2><ol>
<li>专注于：React、React Native、Node</li>
<li>目标：成为全栈工程师（非全干工程师）</li>
</ol>
<h2 id="上半年总结"><a href="#上半年总结" class="headerlink" title="上半年总结"></a>上半年总结</h2><p>2020 的上半年注定是不平凡的一年，不管什么谈话基本都可以从疫情聊起：</p>
<ul>
<li>朋友A：你们公司复工了吗？还在家办公吗？</li>
<li>朋友B：你们工资及时发了吗？公司不会倒闭了吧？</li>
<li>某亲戚：今年这疫情弄得，办个婚礼都没人去，好多都推了。</li>
<li>面试官：你为什么从之前公司离职？<ul>
<li>我：教育行业，因为疫情拖欠了俩月工资</li>
</ul>
</li>
</ul>
<p>总的来说，疫情对我的直接影响还挺大。工作上来说，如果不是被拖欠工资，大概率不会这么快离职；生活上来说，订婚从2月份推迟到了4月底才办…</p>
<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>上家公司是从 2018年3月干到2020年5月的，整整两年，写过小程序，负责过公众号、参与过基于element 和 vue 的后台程序开发、基于React Native开发过业务，搞过React Native 项目的架构。离职时，职位停留在了移动端开发负责人，实现了月薪过万的小目标。</p>
<p>离职原因一方面是因为薪资拖欠，另一方面是在公司也摸到了天花板。第二方面是最让我难受的，这天花板离我的心理预期太远。之前之所以一直拖着没跳槽是信了leader的核心人员以后不会亏待。长期的境况与心理预期不符不管是对公司还是对自己都是不负责任的，再加上疫情拖欠薪资，直接造成了房贷的还款困难（年前刚开始自己承担全部贷款），我最终下定决心离开工作了两年的公司。</p>
<p>再来说一下新工作吧，本人找工作的base是郑州，一个互联网三线城市。刚开始主动打招呼的和海投回应的都很多，9成都是 Vue 开发，甚至需要维护 jquery 项目。我心想还是主动投投 React Native 岗位吧，现实再次打了我的脸，郑州这边 RN 岗位两个手数的过来，并且范围都是 8-10K，甚至 4-8K。抱着快要放弃的心态，再次缩小范围投递了几家 React 技术栈的公司，最终实现了试用期工资高于上家的目标。</p>
<h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>在 4月初与小女友定亲啦，当时的沸点也得到了掘友的祝福，证明了掘金是一个有爱的有温度的技术社区。</p>
<blockquote>
<p> 多图预警！！！！！！</p>
</blockquote>
<p><img src="https://i.loli.net/2020/07/17/bSTtBd25R8DQgxc.jpg" alt=""></p>
<p><img src="https://i.loli.net/2020/07/17/KTA5E8pIHlCcmYt.jpg" alt=""></p>
<p><img src="https://i.loli.net/2020/07/17/VJE1z9hnwGLWy7S.jpg" alt=""></p>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ol>
<li><p>看完了一个关于 Linux 的视频教程，并写下了<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTgxZTJkYjUxODgyNTczN2I0YWQ5MTE=" title="https://juejin.im/post/5e81e2db518825737b4ad911">写给前端工程师的Linux实战教程【持续更新】<i class="fa fa-external-link"></i></span>。</p>
</li>
<li><p>看完了《Docker从入门到实践》，并写下<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTgzOWYyODUxODgyNTczYWI0NGYxYjQ=" title="https://juejin.im/post/5e839f2851882573ab44f1b4">一个前端工程师的Docker学习笔记【持续更新】<i class="fa fa-external-link"></i></span>，感谢掘金编写的推荐，获得了不少流量扶持。</p>
</li>
<li><p>工作需要，总结了React Native 开发经验并输出了<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTUzNWUwZGYyNjVkYTU3NmI1NjYzOTc=" title="https://juejin.im/post/5e535e0df265da576b566397">React Native 项目架构面面观【持续更新】<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTUwZjNhY2U1MWQ0NTI2ZWY1ZjhkNTY=" title="https://juejin.im/post/5e50f3ace51d4526ef5f8d56">react-navigation 5.x 最佳实践<i class="fa fa-external-link"></i></span> 等多篇相关博文，这几篇也成为了几十篇文章中阅读量和点赞最多的。果然我还是个只能靠实力的蓝孩子。这个系列还有更多的存货没有放出来。待我新工作转正继续输出。</p>
</li>
<li><p>新公司入职有两个月了，独立负责了两个不大的中台项目，技术栈是基于 umijs 的，而 umijs 基于 dva、antd、react-router，而 dva 又基于 redux。两个项目下来，我的水平停留在了熟练基于 umijs 开发业务。为后续研究源码和性能优化打下了基础。这方面的经验我写了一篇<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZWYxZGQ2MmYyNjVkYTAyOTgxZjAyNjY=" title="https://juejin.im/post/5ef1dd62f265da02981f0266">UmiJS开发技巧【持续更新】<i class="fa fa-external-link"></i></span> 做了总结。</p>
</li>
</ol>
<h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><p>我现在混得社区比较少，一个是GitHub，一个是掘金。短期内也没计划再混其他的社区（不想精力分散太多）。</p>
<h4 id="掘金"><a href="#掘金" class="headerlink" title="掘金"></a>掘金</h4><p>从2月份到现在共发布了30篇博客。</p>
<p><img src="https://i.loli.net/2020/07/25/B4hfwZtiTGWmuga.png" alt=""></p>
<p>很多朋友都是通过<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTUzNWUwZGYyNjVkYTU3NmI1NjYzOTc=" title="https://juejin.im/post/5e535e0df265da576b566397">React Native 项目架构面面观【持续更新】<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTUwZjNhY2U1MWQ0NTI2ZWY1ZjhkNTY=" title="https://juejin.im/post/5e50f3ace51d4526ef5f8d56">react-navigation 5.x 最佳实践<i class="fa fa-external-link"></i></span> 这两篇文章认识我的，从推送来看，都是在点赞这两篇文章之后关注我。后期我也会继续输出Hybrid相关的技术分享。</p>
<h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p>假期的时候，我更新了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL3d4LXByb21pc2UtcHJv" title="https://github.com/youngjuning/wx-promise-pro">wx-promise-pro<i class="fa fa-external-link"></i></span>，支持了TS，并优化了内部实现。更新之后到现在累计增加100star。这是一个微信小程序的增强插件，年前已被 <span class="exturl" data-url="aHR0cHM6Ly9oZWxsb2dpdGh1Yi5jb20vcGVyaW9kaWNhbC92b2x1bWUvNDcvI3d4LXByb21pc2UtcHJv" title="https://hellogithub.com/periodical/volume/47/#wx-promise-pro">HelloGitHub 47期<i class="fa fa-external-link"></i></span> 收录，有 20+ 的 github 库在使用，欢迎尝试。</p>
<p>最后，秀一波我的 README：</p>
<p><img src="https://i.loli.net/2020/07/17/jkGrLHhA8lP57Bx.png" alt=""></p>
<h2 id="下半年愿景"><a href="#下半年愿景" class="headerlink" title="下半年愿景"></a>下半年愿景</h2><ol>
<li>每天看 React 文档、视频、博客、源码以达到精通 React 的程度</li>
<li>不间断读 Lodash 源码并输入系列源码解析文章</li>
<li>每天一道算法题训练大脑</li>
<li>把自己的 React Native 开发经验总结输出</li>
<li>若有余力，学习 Node 后端开发</li>
</ol>
<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
<th align="center">公众号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
]]></content>
      <categories>
        <category>总结</category>
        <category>年中总结</category>
      </categories>
      <tags>
        <tag>掘金专栏</tag>
        <tag>年中总结</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】在 React Native TypeScript 项目中使用 defaultProps</title>
    <url>/2020/08/%E3%80%90%E8%AF%91%E3%80%91%E5%9C%A8%20React%20Native%20TypeScript%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%20defaultProps/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/08/10/aK152TMsqfjJlbZ.png" alt=""></p>
<p>随着时间的推移，TypeScript 已经改进了 <code>defaultProps</code> 相关的类型检查。本文将讲述最新的用法和旧版本中的用法以及一些问题。<span class="exturl" data-url="aHR0cDovL3QuY24vQWk5TUs1cjE=" title="http://t.cn/Ai9MK5r1">原文<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>

<h2 id="TypeScript-3-0-以上"><a href="#TypeScript-3-0-以上" class="headerlink" title="TypeScript 3.0 以上"></a>TypeScript 3.0 以上</h2><p>TypeScript 特意<span class="exturl" data-url="aHR0cDovL3QuY24vQWk5NlIxdlA=" title="http://t.cn/Ai96R1vP">添加了对 defaultProps 的支持<i class="fa fa-external-link"></i></span>以此让类型检查符合你的预期：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line">interface Props &#123;</span><br><span class="line">  foo: string;</span><br><span class="line">  bar: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello <span class="keyword">extends</span> React.Component&lt;Props, &#123;&#125;&gt; &#123;</span><br><span class="line">  public <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    foo: <span class="string">&quot;default&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; bar, foo &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Text&gt;&#123; bar &#125;, &#123; foo.toUpperCase() &#125;&lt;/Text&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Hello 这个组件可以在不传递 <code>foo</code> 属性的情况下渲染、编译正常：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Hello bar=<span class="string">&quot;Hello&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>尽管<code>foo</code>不是必须的，但是我们并没有把它被标记为可选的（例如 <code>foo?: string</code>）。标记为可选的意味着它可能是 <code>undefined</code>，但是实际上因为 <code>defaultProps</code> 提供了默认值，它绝对不可能变成 <code>undefined</code>。</li>
<li><code>defaultProps</code> 没有明确的类型声明。它的类型是由编译器推断的。</li>
<li>需要 <code>@types/react</code> 版本在 <code>16.4.11</code> 以上</li>
</ul>
<h2 id="TypeScript-2-1-到-3-0"><a href="#TypeScript-2-1-到-3-0" class="headerlink" title="TypeScript 2.1 到 3.0"></a>TypeScript 2.1 到 3.0</h2><p>你可以使用 TypeScript 的 <code>Partial type</code> 特性，这意味着当前的接口只会实现被包裹的接口的一部分，这样我们可以随意拓展 <code>defaultProps</code> 而不需要改其他任何地方。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;reac&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line">interface Props &#123;</span><br><span class="line">  foo?: string;</span><br><span class="line">  bar: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>, </span>&#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps: Partial&lt;Props&gt; = &#123;</span><br><span class="line">    foo: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ul>
<li>因为 TypeScript 在检查 JSX 属性时只考虑了 props，你必须把有默认值的 props 标记为可选的</li>
<li>当使用 <code>strictNullChecks</code> 时，<code>this.props.foo</code> 的值可能会是 <code>undefined</code>。你可以使用非空断言（例如 <code>this.props.foo!</code>）或者类型守护（例如 <code>if (this.props.foo) &#123;...&#125;</code>）来移除 <code>undefined</code>。这是非常恼人的，因为实际上它是有默认值，所以绝对不会是 <code>undefined</code>，但是 TS 并不理解这个逻辑。这也是 TS 3.0 专门支持 <code>defaultProps</code> 的主要原因之一。</li>
</ul>
<h2 id="函数组件的-defaultProps"><a href="#函数组件的-defaultProps" class="headerlink" title="函数组件的 defaultProps"></a>函数组件的 defaultProps</h2><p>您也可以在函数组件上使用 <code>defaultProps</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line">interface Props &#123;</span><br><span class="line">  foo: string;</span><br><span class="line">  bar: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent: React.SFC&lt;Props&gt; = <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">  &lt;Text&gt;</span><br><span class="line">    Hello, &#123;props.foo&#125;, &#123;props.bar&#125;</span><br><span class="line">  &lt;/Text&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">MyComponent.defaultProps = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyComponent</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：你不必再使用 <code>Partial&lt;Props&gt;</code>，因为 React.SFC 已经在 TS 2.1+ 被指定为 partial.</p>
</blockquote>
<p>另一个可选的方案是解构你的 props 参数然后直接符默认值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line">interface Props &#123;</span><br><span class="line">  foo: string;</span><br><span class="line">  bar: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent: React.SFC&lt;Props&gt; = <span class="function">(<span class="params">&#123; foo = <span class="string">&#x27;default&#x27;</span>, bar &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Text&gt;</span><br><span class="line">      Hello, &#123;foo&#125;, &#123;bar&#125;</span><br><span class="line">    &lt;/Text&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><table>
<thead>
<tr>
<th align="center">作者微信</th>
<th align="center">知识星球</th>
<th align="center">赞赏作者</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>翻译</tag>
        <tag>TypeScript</tag>
        <tag>掘金专栏</tag>
        <tag>defaultProps</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开发一款Deno插件并发布</title>
    <url>/2020/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E4%B8%80%E6%AC%BEDeno%E6%8F%92%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/08/12/TBuR1bJgl4azw5n.png" alt=""></p>
<p>大家好，我是俊宁，那个写<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODU0NTczMjIwNDMyMjQ4ODM5" title="https://juejin.im/post/6854573220432248839">《Deno从入门到跑路》<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODU2NDQ3OTgyOTA1MDY1NDg2" title="https://juejin.im/post/6856447982905065486">《基于 Deno 构建 HTTP Server 实践指南》<i class="fa fa-external-link"></i></span>的作者，本来入手Deno只是为了白嫖掘金的大礼包，为此还挑战了零基础一天入门Deno。但是Deno真香，前后又花了一周的业余时间学习了MongoDB写出了一篇自认很完整的 HTTP Server 实践指南（后端同学轻喷）。</p>
<a id="more"></a>

<p>本文是一篇介绍我如何开发了一款Deno插件并发布到Deno官方插件库的。插件的名字叫Duck，是一款自动扫描controller层并注册路由的小工具。如何使用这个插件请有需要的同学点击logo直达：</p>
<p><a href="https://deno.land/x/duck@v1.0.1"><img src="https://i.loli.net/2020/08/05/XBzRTIeoSnQc5vH.png" width="150"/></a></p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>这个项目诞生的因为写<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODU2NDQ3OTgyOTA1MDY1NDg2" title="https://juejin.im/post/6856447982905065486">《基于 Deno 构建 HTTP Server 实践指南》<i class="fa fa-external-link"></i></span>时，为了实现自动扫描controller的功能。借鉴了廖雪峰大佬关于koa的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY2hhZWxsaWFvL2xlYXJuLWphdmFzY3JpcHQvYmxvYi9tYXN0ZXIvc2FtcGxlcy9ub2RlL3dlYi9rb2Evdmlldy1rb2EvY29udHJvbGxlci5qcw==" title="https://github.com/michaelliao/learn-javascript/blob/master/samples/node/web/koa/view-koa/controller.js">自动扫描controller<i class="fa fa-external-link"></i></span>，除了使用的语言不一样，实现细节和思路上也不太一样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── addAbcControllers.ts</span><br><span class="line">├── addOakControllers.ts</span><br><span class="line">├── addServestControllers.ts</span><br><span class="line">├── mod.ts</span><br><span class="line">└── test</span><br><span class="line">    ├── abc</span><br><span class="line">    │   ├── controllers</span><br><span class="line">    │   │   └── helloworld.ts</span><br><span class="line">    │   └── server.ts</span><br><span class="line">    ├── oak</span><br><span class="line">    │   ├── controllers</span><br><span class="line">    │   │   └── helloworld.ts</span><br><span class="line">    │   └── server.ts</span><br><span class="line">    └── servest</span><br><span class="line">        ├── controllers</span><br><span class="line">        │   └── helloworld.ts</span><br><span class="line">        └── server.ts</span><br></pre></td></tr></table></figure>

<ul>
<li><code>mod.ts</code>：Deno官方推荐的插件入口文件</li>
<li><code>test</code>：一些测试的demo</li>
<li><code>add***Controllers.ts</code>：兼容的常见的Http Server中间件插件，自动判断，不需要用户传参数。</li>
</ul>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="自动扫描controller"><a href="#自动扫描controller" class="headerlink" title="自动扫描controller"></a>自动扫描controller</h3><blockquote>
<p>注意：以下是代码片段，源码请点击开头的那只鸭子查看。</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> realPath = Deno.realPathSync(dir);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> dirEntry <span class="keyword">of</span> Deno.readDirSync(dir)) &#123;</span><br><span class="line">  <span class="keyword">if</span> (dirEntry.name.endsWith(<span class="string">&quot;.ts&quot;</span>) || dirEntry.name.endsWith(<span class="string">&quot;.js&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> controller = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">`file://<span class="subst">$&#123;realPath&#125;</span>/<span class="subst">$&#123;dirEntry.name&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> method = controller.method || <span class="string">&quot;get&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> api = controller.api ||</span><br><span class="line">    dirEntry.name.replace(<span class="regexp">/(.*\/)*([^.]+).*/ig</span>, <span class="string">&quot;$2&quot;</span>);</span><br><span class="line">    router[method](<span class="string">`/<span class="subst">$&#123;api&#125;</span>`</span>, controller.default);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>根据用户传递的 <code>dir</code> 获取的文件夹使用 <code>Deno.realPathSync</code> 获取真实的绝对路径，这里后边获取文件的时候用。</li>
<li>使用 <code>Deno.readDirSync</code> 接口读取文件夹下所有的文件，这里做了校验，必须是 <code>js</code> 或 <code>ts</code> 结尾的文件才可以。</li>
<li>使用 <code>import</code> 动态导入模块，这里有个坑就是不加 <code>file://</code> 前缀的话，实际运行会自动加<code>https://</code>。</li>
<li>这里假设如果controller没有导出name，自动读取文件名作为api名（这里借鉴了umijs）</li>
<li>最后动态把这个controller挂载到router上（router这个也是用户传递进来的）。</li>
</ul>
<h3 id="智能兼容"><a href="#智能兼容" class="headerlink" title="智能兼容"></a>智能兼容</h3><p>这个真没啥好说的，就是人工比对了这些插件带的独有的属性来识别是哪款插件的，目前支持 servest、oak、abc这三个关注度比较高的项目。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">router: <span class="built_in">any</span>, dir: <span class="built_in">string</span> = &quot;controllers&quot;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (router.handle) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">await</span> addServestControllers(router,dir);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(router.middleware) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">await</span> addAbcControllers(router,dir);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> addOakControllers(router,dir);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="开箱友好"><a href="#开箱友好" class="headerlink" title="开箱友好"></a>开箱友好</h3><p>使用duck之后，默认会给两个路由路径，而且<code>checkHealth</code>这个是项目必备的接口了基本上（后端同学告诉我的）。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">router.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">ctx: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.response.body = <span class="string">&quot;Hello Oak!&quot;</span>;</span><br><span class="line">&#125;).get(<span class="string">&quot;/checkHealth&quot;</span>, <span class="function">(<span class="params">ctx: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.response.body = <span class="string">&quot;The server is health. Just do it.&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="发布插件"><a href="#发布插件" class="headerlink" title="发布插件"></a>发布插件</h2><p>1、打开 <span class="exturl" data-url="aHR0cHM6Ly9kZW5vLmxhbmQveA==" title="https://deno.land/x">https://deno.land/x<i class="fa fa-external-link"></i></span></p>
<p>2、点击 Add a module</p>
<p><img src="https://i.loli.net/2020/08/12/9q5HPhsMZE6utyv.png" alt=""></p>
<p>3、按照下图的指引我们需要创建一个托管在GitHub的公有仓库</p>
<p><img src="https://i.loli.net/2020/08/12/3alkvjy14qoJsB6.png" alt=""></p>
<p>4、起一个好听的名字，趁早注册，不然要被 justjavac 大佬抢完了，可能是怕我这种水逼水插件吧，哈哈哈哈。</p>
<p><img src="https://i.loli.net/2020/08/12/SfHVQXqRdL2tF1C.png" alt=""></p>
<p>5、后边就是提示你去添加 GitHub 的 webhook，然后就发布成功了，我刚试了一下 superman 还没被注册。</p>
<p>最后狗头镇楼！！！</p>
<p><img src="https://i.loli.net/2020/08/11/eJUIZ5l3CT1LPtM.png" alt=""></p>
<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
<th align="center">公众号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
]]></content>
  </entry>
  <entry>
    <title>基于Docker和Jenkins自动构建Android项目</title>
    <url>/2020/08/%E5%9F%BA%E4%BA%8EDocker%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAAndroid%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/08/09/M9PfYQahL2F5Z8C.png" alt=""></p>
<a id="more"></a>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTExMjQzMDAxODY5I2hlYWRpbmctMTE=" title="https://juejin.im/post/6844904111243001869#heading-11">Docker<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTUyMDAzMjQ4MTM2" title="https://juejin.im/post/6844904152003248136">Jenkins<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="android-sdk"><a href="#android-sdk" class="headerlink" title="android-sdk"></a>android-sdk</h2><h3 id="安装-android-sdk"><a href="#安装-android-sdk" class="headerlink" title="安装 android-sdk"></a>安装 android-sdk</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt update | apt install android-sdk</span></span><br></pre></td></tr></table></figure>

<h3 id="复制到-jenkins-volume"><a href="#复制到-jenkins-volume" class="headerlink" title="复制到 jenkins volume"></a>复制到 jenkins volume</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp -R /usr/lib/android-sdk/ /var/lib/docker/volume/jenkins_home/_data/</span></span><br></pre></td></tr></table></figure>

<p>android-sdk 的安装位置可以通过 <code>adb --version</code> 查看：</p>
<img src="https://user-gold-cdn.xitu.io/2020/5/9/171f7fae7cf4ff7a?w=864&h=230&f=png&s=176444" alt="" style="zoom: 75%;" />

<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>将下面的的配置加入到 <code>~/.bash_profile</code> 或 <code>~/.zshrc</code> 中，并执行 <code>srouce ~/.bash_profile</code> 或 <code>srouce ~/.zshrc</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ANDROID_HOME&#x3D;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;jenkins_home&#x2F;_data&#x2F;android-sdk</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;tools</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;tools&#x2F;bin</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;platform-tools</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;emulator</span><br></pre></td></tr></table></figure>

<h2 id="sdkmagager"><a href="#sdkmagager" class="headerlink" title="sdkmagager"></a>sdkmagager</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt update | apt install snapd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> snap install androidsdk</span></span><br></pre></td></tr></table></figure>

<h2 id="accepted-licences"><a href="#accepted-licences" class="headerlink" title="accepted licences"></a>accepted licences</h2><blockquote>
<p>如果不授权会报错： Failed to install the following Android SDK packages as some licences have not been accepted.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yes | sdkmanager --sdk_root=<span class="variable">$&#123;ANDROID_HOME&#125;</span> --licenses</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果不指定 <code>--sdk_root=$&#123;ANDROID_HOME&#125;</code> 会报错：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjA3MzA2MTUvc2RrbWFuYWdlci13YXJuaW5nLWNvdWxkLW5vdC1jcmVhdGUtc2V0dGluZy1qYXZhLWxhbmctaWxsZWdhbGFyZ3VtZW50ZXhjZXB0aQ==" title="https://stackoverflow.com/questions/60730615/sdkmanager-warning-could-not-create-setting-java-lang-illegalargumentexcepti">SDKmanager : Warning: Could not create setting. java.lang.IllegalArgumentException<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="Jenkins-ANDROID-HOME"><a href="#Jenkins-ANDROID-HOME" class="headerlink" title="Jenkins ANDROID_HOME"></a>Jenkins ANDROID_HOME</h2><p>进入 <strong>系统管理</strong> -&gt; <strong>系统配置</strong> -&gt; <strong>全局属性</strong> 新增环境变量 <code>ANDROID_HOME</code>：</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/5/9/171f7fae8171f318?w=1980&h=486&f=png&s=65179" alt=""></p>
<h2 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h2><p>然后你就可以为所欲为了！！！</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/5/9/171f7fae81791d69?w=1890&h=1120&f=png&s=263338" alt=""></p>
<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
<th align="center">公众号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>手摸手带你封装 React Native 富文本编辑器</title>
    <url>/2020/08/%E6%89%8B%E6%91%B8%E6%89%8B%E5%B8%A6%E4%BD%A0%E5%B0%81%E8%A3%85-React-Native-%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6cc0c871ddd47d0a27b4d146273b807~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<a id="more"></a>

<p>大家好，我是俊宁，最近研究了下如何实现一个 React Native 富文本编辑器，并产出了两个富文本编辑器插件，特此分享一下我是如何实现的。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>你是否接到过在 React Native 项目里实现富文本编辑的需求呢？你是否像我一样找不到一款合适的 React Native 富文本编辑器插件呢？你是否想过自己实现一款富文本编辑器呢？</p>
<p>曾经就有掘友加我微信请教我 React Native 下如何实现富文本编辑器。当时我就说等等我，我将要用 Webview 封装一个移动端富文本编辑器。然而，那是三个月以前的flag了。那个掘友是谁我也不记得了！🐶🐶🐶</p>
<h2 id="React-Native-Webview"><a href="#React-Native-Webview" class="headerlink" title="React Native Webview"></a>React Native Webview</h2><p>实现一个React Native 富文本编辑器我有两个思路。一个是基于已有的原生编辑器，通过桥接来实现；另一个是基于已有的H5编辑器通过WebView实现。基于H5的编辑器比较多，所以我选用了第二个方案。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add react-native-webview</span><br><span class="line"><span class="comment"># pod install for ios</span></span><br><span class="line">$ <span class="built_in">cd</span> ios &amp; pod install</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="引入-URL-资源"><a href="#引入-URL-资源" class="headerlink" title="引入 URL 资源"></a>引入 URL 资源</h4><p>这是最常见的 WebView  用例。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; WebView &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-webview&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWeb</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;WebView</span><br><span class="line">        source=&#123;&#123; <span class="attr">uri</span>: <span class="string">&#x27;https://infinite.red&#x27;</span> &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="加载本地-HTML-文件"><a href="#加载本地-HTML-文件" class="headerlink" title="加载本地 HTML 文件"></a>加载本地 HTML 文件</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Dimensions, Platform &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; WebView &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-webview&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source=&#123;Platform.OS === <span class="string">&#x27;ios&#x27;</span> ? <span class="built_in">require</span>(<span class="string">&#x27;./assets/quill.html&#x27;</span>) : &#123; <span class="attr">uri</span>: <span class="string">&#x27;file:///android_asset/quill.html&#x27;</span> &#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWeb</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WebView</span> <span class="attr">source</span>=<span class="string">&#123;source&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>iOS 直接使用 <code>require(&#39;&#39;)</code> 的形式即可引入本地文件</p>
</li>
<li><p>Android需要先将文件复制到 <code>your-project/android/app/src/main/assets/</code> 文件夹下，然后使用 <code>&#123;uri: &#39;&#39;&#125;</code> 的形式引入</p>
</li>
</ul>
<h4 id="Web-和-React-Native-的通信"><a href="#Web-和-React-Native-的通信" class="headerlink" title="Web 和 React Native 的通信"></a>Web 和 React Native 的通信</h4><ol>
<li>React Native -&gt; Web:  <code>injectedJavaScript</code>、<code>injectedJavaScriptBeforeContentLoaded</code> 属性</li>
<li>Web -&gt; React Native:  <code>window.ReactNativeWebView.postMessage</code> 方法和 <code>onMessage</code> 属性</li>
</ol>
<p><code>injectedJavaScriptBeforeContentLoaded</code> 属性：</p>
<p>这是一个在 web 页面第一次加载前执行的脚本。它只会执行一次，即使页面重载或者导航走了。当你想要往 window、localstorage或者document上注入东西时非常有用。</p>
<p><code>window.ReactNativeWebView.postMessage</code> 方法和 <code>onMessage</code> 属性：</p>
<p><code>window.ReactNativeWebView.postMessage</code> 只接受一个参数并且只能是字符串类型。接收数据的是 <code>event.nativeEvent.data</code>。</p>
<h2 id="react-native-quill-editor-封装"><a href="#react-native-quill-editor-封装" class="headerlink" title="react-native-quill-editor 封装"></a>react-native-quill-editor 封装</h2><blockquote>
<p>插件已封装完毕可用，源码在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL3JlYWN0LW5hdGl2ZS1xdWlsbC1lZGl0b3I=" title="https://github.com/youngjuning/react-native-quill-editor">https://github.com/youngjuning/react-native-quill-editor<i class="fa fa-external-link"></i></span> , 欢迎大佬们使用完善。</p>
</blockquote>
<h3 id="html-文件准备"><a href="#html-文件准备" class="headerlink" title="html 文件准备"></a>html 文件准备</h3><ol>
<li>css文件：<code>https://cdn.quilljs.com/1.3.6/quill.snow.css</code></li>
<li>js文件：<code>https://cdn.quilljs.com/1.3.6/quill.min.js</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- 放置CSS文件内容 --&gt;</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;editor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="comment">&lt;!-- 放置js文件内容 --&gt;</span></span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 初始化 quill 编辑器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这里的 options 是通过 injectedJavaScriptBeforeContentLoaded 属性注入的</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> quill = <span class="keyword">new</span> Quill(<span class="string">&#x27;#editor&#x27;</span>, <span class="built_in">window</span>.options)</span></span><br><span class="line"><span class="javascript">    quill.on(<span class="string">&#x27;text-change&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">delta, oldDelta, source</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> html = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#editor&#x27;</span>).children[<span class="number">0</span>].innerHTML</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> message = &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="string">&#x27;onChange&#x27;</span>,</span></span><br><span class="line">        message: html,</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 触发 onMessage 事件</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.ReactNativeWebView.postMessage(<span class="built_in">JSON</span>.stringify(message))</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="React-Native-侧封装"><a href="#React-Native-侧封装" class="headerlink" title="React Native 侧封装"></a>React Native 侧封装</h3><blockquote>
<p>注意：这里亮点是通过 <code>injectedJavaScriptBeforeContentLoaded</code> 属性实现 options 的自定义配置。</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Dimensions, Platform, ViewStyle &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; WebView, WebViewMessageEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-webview&#x27;</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  style?: ViewStyle</span><br><span class="line">  defaultValue?: string</span><br><span class="line">  options?: any</span><br><span class="line">  onChange?: <span class="function">(<span class="params">html: string</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Quill = <span class="function">(<span class="params">props: Props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 默认的quill配置</span></span><br><span class="line">  <span class="keyword">const</span> options = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    placeholder: <span class="string">&#x27;请输入...&#x27;</span>,</span><br><span class="line">    modules: &#123;</span><br><span class="line">      toolbar: [[&#123; <span class="attr">header</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">false</span>] &#125;], [<span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;italic&#x27;</span>, <span class="string">&#x27;underline&#x27;</span>], [<span class="string">&#x27;image&#x27;</span>, <span class="string">&#x27;code-block&#x27;</span>]],</span><br><span class="line">    &#125;,</span><br><span class="line">    ...props.options,</span><br><span class="line">    theme: <span class="string">&#x27;snow&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> injectedJavaScriptBeforeContentLoaded = <span class="string">`window.options=<span class="subst">$&#123;options&#125;</span>`</span></span><br><span class="line">  <span class="keyword">const</span> injectedJavaScript = <span class="string">`document.querySelector(&#x27;#editor&#x27;).children[0].innerHTML=&quot;<span class="subst">$&#123;props.defaultValue&#125;</span>&quot;`</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onMessage = <span class="function">(<span class="params">e: WebViewMessageEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(e.nativeEvent.data)</span><br><span class="line">    <span class="keyword">if</span> (data.type === <span class="string">&#x27;onChange&#x27;</span>) &#123;</span><br><span class="line">      props.onChange(data.message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;WebView</span><br><span class="line">      onMessage=&#123;onMessage&#125;</span><br><span class="line">      source=&#123;Platform.OS === <span class="string">&#x27;ios&#x27;</span> ? <span class="built_in">require</span>(<span class="string">&#x27;./assets/quill.html&#x27;</span>) : &#123; <span class="attr">uri</span>: <span class="string">&#x27;file:///android_asset/quill.html&#x27;</span> &#125;&#125;</span><br><span class="line">      javaScriptEnabled</span><br><span class="line">      injectedJavaScriptBeforeContentLoaded=&#123;injectedJavaScriptBeforeContentLoaded&#125;</span><br><span class="line">      injectedJavaScript=&#123;injectedJavaScript&#125;</span><br><span class="line">      style=&#123;&#123; <span class="attr">height</span>: Dimensions.get(<span class="string">&#x27;window&#x27;</span>).height - <span class="number">42</span>, <span class="attr">width</span>: Dimensions.get(<span class="string">&#x27;window&#x27;</span>).width, ...props.style &#125;&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Quill.defaultProps = &#123;</span><br><span class="line">  style: &#123;&#125;,</span><br><span class="line">  defaultValue: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  onChange: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  options: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Quill</span><br></pre></td></tr></table></figure>

<h3 id="使用体验优化"><a href="#使用体验优化" class="headerlink" title="使用体验优化"></a>使用体验优化</h3><p>前面提到的，Android 下边需要先把 html 文件复制到 <code>your-project/android/app/src/main/assets/</code> 下并通过 <code>&#123;uri: &#39;file:///&#39;&#125;</code> 的形式引用才会起作用。这就很不美丽了。人家的机制我改不了，只能想办法优化我的插件的用户的体验。我的方法是使用 <code>postinstall</code> 方法，在用户 <code>yarn install</code> 时，自动复制文件到指定文件夹下，亲测很好用。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;postinstall&quot;</span>: <span class="string">&quot;cpy &#x27;assets/quill.html&#x27; &#x27;../../android/app/src/main/assets/&#x27;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h3><p>本地开发时，有个问题就是如何实时看到自己修改的效果。方案有两个，一个是直接在 RN 项目中写，然后导出指定文件夹。另一个是使用我之前博客提到的<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ3OTAyMjI1MzU2OTgwMjMy" title="https://juejin.im/post/6847902225356980232">使用 wml 进行npm模块调试真香<i class="fa fa-external-link"></i></span>。我用的后者，亲测好用，具体配置看博客和源码即可。</p>
<img src="https://i.loli.net/2020/08/27/LvuyxVr3R2mlk9p.png" width="300px" />

<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>quill</tag>
        <tag>zx-editor</tag>
        <tag>富文本编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>精读CSS揭秘之背景与边框</title>
    <url>/2020/08/%E7%B2%BE%E8%AF%BBCSS%E6%8F%AD%E7%A7%98%E4%B9%8B%E8%83%8C%E6%99%AF%E4%B8%8E%E8%BE%B9%E6%A1%86/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/08/08/NbqGOWrvzUhHY3g.png" alt=""></p>
<a id="more"></a>

<p>CSS对于前端工程师来说是基础中的基础，如果基础不扎实，就得日常跪求UED给图来实现效果。</p>
<blockquote>
<p>《CSS揭秘》这本书读来让人有满满的安全感，LEA VEROU 是CSS方面的专家，对CSS3的设计和未来的发展了解很多。描述的47个css技巧也很接地气，值得一读再读。</p>
</blockquote>
<blockquote>
<p>本文是精读《CSS揭秘》系列文章的第一篇，预计有8篇，以一（kan）周（wo）一（xin）篇（qing）的进度发布。</p>
</blockquote>
<blockquote>
<p>如无特殊说明，样式对应的html结构都是 <code>&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code></p>
</blockquote>
<blockquote>
<p>由于掘金限制，无法嵌入 iframe 标签，我把 codepen 的示例链接都附在了每一节，方便大家边读边练。</p>
</blockquote>
<h2 id="半透明边框"><a href="#半透明边框" class="headerlink" title="半透明边框"></a>半透明边框</h2><blockquote>
<p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9LS3pLcm9C" title="https://codepen.io/youngjuning/pen/KKzKroB">codepen<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>CSS 背景的工作原理是默认延伸到border区域的，CSS3 中，我们可以使用 <code>background-clip</code> 属性来调整这个默认行为带来的不便。将它设为 <code>padding-box</code>，便可以不让背景侵入边框所在的范围。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2020/08/09/WzDYntbHJx49kaI.png" style="zoom:50%;" />

<h2 id="多重边框"><a href="#多重边框" class="headerlink" title="多重边框"></a>多重边框</h2><blockquote>
<p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9yTmVhT29i" title="https://codepen.io/youngjuning/pen/rNeaOob">codepen<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h3 id="box-shadow-方案"><a href="#box-shadow-方案" class="headerlink" title="box-shadow 方案"></a>box-shadow 方案</h3><ol>
<li>利用 <code>box-shadow</code> 属性第四个参数（扩张半径）控制投影面积，其他两个偏移量和模糊半径都设置为。</li>
<li>利用 <code>box-shadow</code> 支持逗号分隔的语法，我们可以创建任意数量的投影。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#655</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> deeppink,</span><br><span class="line">    <span class="number">0</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/08/08/PzA4XJSi8eME7UK.png" alt=""></p>
<p>注意：</p>
<ol>
<li>投影的行为跟外边框不完全一致，因为它不会影响布局，而且也不会受到 <code>box-sizing</code> 属性的影响。不过，你还是可以通过内边距或外边距（这取决于投影是内嵌还是外扩的）来额外模拟出边框</li>
<li>上述代码创建出的假边框出现在元素的<strong>外圈</strong>。它们并不会响应鼠标事件，比如悬停或点击。如果这一点非常重要，你可以给 <code>box-shadow</code> 属性加上 <code>inset</code> 关键字，来使投影绘制在元素的<strong>内圈</strong>。请注意，此时你需要增加额外的内边距来腾出足够的空隙。</li>
</ol>
<h3 id="outline-方案"><a href="#outline-方案" class="headerlink" title="outline 方案"></a>outline 方案</h3><p>如果你只需要两层边框，那就可以先设置一层常规边框，再加上 <code>outline</code>（描边）属性来产生外层的边框。</p>
<p>该方案还可以利用 <code>outline-offset</code> 属性来控制描边和元素边缘之间的距离（可以为负值），下面代码的效果就是一个缝边的效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">1px</span> dashed deeppink;</span><br><span class="line">  <span class="attribute">outline-offset</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/08/08/Orcg4ytVRuKNbGS.png" alt=""></p>
<h2 id="灵活的背景定位"><a href="#灵活的背景定位" class="headerlink" title="灵活的背景定位"></a>灵活的背景定位</h2><blockquote>
<p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9XTndibVJq" title="https://codepen.io/youngjuning/pen/WNwbmRj">codepen<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h3 id="background-position-的扩展语法方案"><a href="#background-position-的扩展语法方案" class="headerlink" title="background-position 的扩展语法方案"></a>background-position 的扩展语法方案</h3><p>在CSS3中，<code>background-position</code> 属性已经得到扩展，它允许我们制定背景图片<strong>距离任意角的偏移量</strong>，只要我们<strong>在偏移量前面加上指定关键字</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(https://i.loli.net/<span class="number">2020</span>/<span class="number">08</span>/<span class="number">08</span>/jWNPK6e3ucf47LV.png) no-repeat</span><br><span class="line">    right bottom/<span class="number">50px</span> <span class="number">#6a99bf</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: right <span class="number">15px</span> bottom <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/08/08/yIVnde16BwN3bSk.png" alt=""></p>
<h3 id="background-origin-方案"><a href="#background-origin-方案" class="headerlink" title="background-origin 方案"></a>background-origin 方案</h3><p><code>background-origin</code> 是用来控制背景起始点的属性，默认是以<code>padding-box</code> 为准的，如果我们想让背景的的起点以内容区的边缘为基准（也就是说，此时背景图片距离边角的偏移量就跟内边距保持一致了）。</p>
<p>如果你想要背景偏移量与容器的内边距一致，那么就可以使用这个方案，代码实现如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(https://i.loli.net/<span class="number">2020</span>/<span class="number">08</span>/<span class="number">08</span>/jWNPK6e3ucf47LV.png) no-repeat</span><br><span class="line">    right bottom/<span class="number">50px</span> <span class="number">#6a99bf</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-origin</span>: content-box;</span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/08/08/CufS4jGV75qhgJL.png" alt=""></p>
<h3 id="calc-background-position-方案"><a href="#calc-background-position-方案" class="headerlink" title="calc() + background-position 方案"></a>calc() + background-position 方案</h3><p>calc() 函数可以传入形似 <code>100% - 20px</code> 的表达式（注意，<code>-</code> 两边必须有空格。）。我们可以利用这个特性来结合 <code>background-position</code> 以右上角为基准定位：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(https://i.loli.net/<span class="number">2020</span>/<span class="number">08</span>/<span class="number">08</span>/jWNPK6e3ucf47LV.png) no-repeat</span><br><span class="line">    right bottom/<span class="number">50px</span> <span class="number">#6a99bf</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">10px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/08/08/yIVnde16BwN3bSk.png" alt=""></p>
<h2 id="边框内圆角"><a href="#边框内圆角" class="headerlink" title="边框内圆角"></a>边框内圆角</h2><blockquote>
<p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9aRVdZTnhl" title="https://codepen.io/youngjuning/pen/ZEWYNxe">codepen<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>有时，我们需要一个容器，只在内侧有圆角，而边框或描边的四个角在外部仍然保持直角的形状。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#d9c2bc</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#655</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">10px</span> solid <span class="number">#655</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/08/08/jesrqO2BW1yXuDp.png" alt=""></p>
<p>能实现以上的效果，主要得益于两个事实：描边（outline）不会跟着元素的圆角走（因而显示出直角），但<code>box-shadow</code>却是会的。</p>
<p>我们把这两者叠加到一起，<code>box-shadow</code> 会刚好填补描边和容器圆角之间的空隙，这两者的组合达成了我们想要的效果。</p>
<blockquote>
<p>注意：<code>box-shadow</code> 的颜色需要和 <code>outline</code> 保持一致，<code>box-shadow</code> 的扩张半径设为<code>outline</code>的一半即可。</p>
</blockquote>
<h2 id="条纹背景"><a href="#条纹背景" class="headerlink" title="条纹背景"></a>条纹背景</h2><p>条纹背景在CSS中是基于 <code>linear-gradient</code>、<code>repeat-linear-gradient</code> 实现的，本节为大家展示了一些可快速食用的例子。</p>
<h3 id="1、德国国旗🇩🇪"><a href="#1、德国国旗🇩🇪" class="headerlink" title="1、德国国旗🇩🇪"></a>1、德国国旗🇩🇪</h3><blockquote>
<p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9nT3JiVkdv" title="https://codepen.io/youngjuning/pen/gOrbVGo">codepen<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">130px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">78px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    #<span class="number">000</span> <span class="number">0</span>,</span><br><span class="line">    #<span class="number">000</span> <span class="number">33.3%</span>,</span><br><span class="line">    #cc2a1d <span class="number">33.3%</span>,</span><br><span class="line">    #cc2a1d <span class="number">66.6%</span>,</span><br><span class="line">    #f8cf47 <span class="number">66.6%</span>,</span><br><span class="line">    #f8cf47 <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/Flag_of_Germany.svg/260px-Flag_of_Germany.svg.png" alt=""></p>
<h3 id="2、法国国旗🇫🇷"><a href="#2、法国国旗🇫🇷" class="headerlink" title="2、法国国旗🇫🇷"></a>2、法国国旗🇫🇷</h3><blockquote>
<p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9nT3JiVkdv" title="https://codepen.io/youngjuning/pen/gOrbVGo">codepen<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">130px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">78px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    to right,</span><br><span class="line">    #<span class="number">002590</span> <span class="number">0</span>,</span><br><span class="line">    #<span class="number">002590</span> <span class="number">33.3%</span>,</span><br><span class="line">    #ffffff <span class="number">33.3%</span>,</span><br><span class="line">    #ffffff <span class="number">66.6%</span>,</span><br><span class="line">    #db3c3f <span class="number">66.6%</span>,</span><br><span class="line">    #db3c3f <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Flag_of_France.svg/260px-Flag_of_France.svg.png" alt=""></p>
<h3 id="3、地址栏红蓝分割线"><a href="#3、地址栏红蓝分割线" class="headerlink" title="3、地址栏红蓝分割线"></a>3、地址栏红蓝分割线</h3><blockquote>
<p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9tZFB5WkJl" title="https://codepen.io/youngjuning/pen/mdPyZBe">codepen<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>代码搬运自vant的联系人组件，使用了循环式的加强版<code>linear-gradient</code>：<code>repeating-linear-gradient</code>，它的色标是无限循环重复的，直到铺满整个背景。</p>
<p>重复线性渐变完美适用于——条纹效果！这得益于它们可以无限循环的天赋是，一个渐变图案就可以自动重复并铺满整个背景。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="comment">/* 这里的语法在CSS4中可能会被简化 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">    -<span class="number">45deg</span>,</span><br><span class="line">    #ff6c6c <span class="number">0</span>,</span><br><span class="line">    #ff6c6c <span class="number">20%</span>,</span><br><span class="line">    transparent <span class="number">0</span>,</span><br><span class="line">    transparent <span class="number">25%</span>,</span><br><span class="line">    #<span class="number">1989</span>fa <span class="number">0</span>,</span><br><span class="line">    #<span class="number">1989</span>fa <span class="number">45%</span>,</span><br><span class="line">    transparent <span class="number">0</span>,</span><br><span class="line">    transparent <span class="number">50%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/08/09/d9olAseI1npxgFw.png" alt=""></p>
<h3 id="4、老式信封边框样式"><a href="#4、老式信封边框样式" class="headerlink" title="4、老式信封边框样式"></a>4、老式信封边框样式</h3><blockquote>
<p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9aRVdHWUtO" title="https://codepen.io/youngjuning/pen/ZEWGYKN">codepen<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>使用 <code>border-image</code> + <code>repeating-linear-gradient</code> 很容易实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  My name is 俊宁</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: padding-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-image</span>: <span class="number">5</span></span><br><span class="line">    <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      -<span class="number">45deg</span>,</span><br><span class="line">      #ff6c6c <span class="number">0</span>,</span><br><span class="line">      #ff6c6c <span class="number">10%</span>,</span><br><span class="line">      transparent <span class="number">0</span>,</span><br><span class="line">      transparent <span class="number">15%</span>,</span><br><span class="line">      #<span class="number">1989</span>fa <span class="number">0</span>,</span><br><span class="line">      #<span class="number">1989</span>fa <span class="number">25%</span>,</span><br><span class="line">      transparent <span class="number">0</span>,</span><br><span class="line">      transparent <span class="number">30%</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>border-image 第一个值不能带单位，否则没有效果！</p>
</blockquote>
<p><img src="https://i.loli.net/2020/08/09/IXDHzKROQhyLsxu.png" alt=""></p>
<h3 id="5、🐜蚂蚁行军边框"><a href="#5、🐜蚂蚁行军边框" class="headerlink" title="5、🐜蚂蚁行军边框"></a>5、🐜蚂蚁行军边框</h3><blockquote>
<p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9CYUtOeW14" title="https://codepen.io/youngjuning/pen/BaKNymx">codepen<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(white, white) padding-box,</span><br><span class="line">    <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">        -<span class="number">45deg</span>,</span><br><span class="line">        black <span class="number">0</span>,</span><br><span class="line">        black <span class="number">25%</span>,</span><br><span class="line">        transparent <span class="number">0</span>,</span><br><span class="line">        transparent <span class="number">50%</span></span><br><span class="line">      )</span><br><span class="line">      <span class="number">0%</span> <span class="number">0%</span> / <span class="number">0.6em</span> <span class="number">0.6em</span>;</span><br><span class="line">  <span class="attribute">animation</span>: ants <span class="number">10s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> ants &#123;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>首先要设置容器的边框宽度为1px，颜色要设置成透明，以便稍后设置的背景能够显示出来。</li>
<li>可以设置多重背景，并用逗号隔开，设置在前面的总是会覆盖后面的。这里设置了两层背景，第一层背景使用线性渐变<code>linear-gradient</code>设置了从白色到白色的渐变，<code>padding-box</code>是<code>background-clip</code>属性的值，表示背景图片绘制在内边距方框内。其实就是绘制了一个白色的块，用来遮盖第二层背景的中间部分，保留边框部分。</li>
<li>把 <code>background-size</code> 改为某个合适的值。</li>
<li>最后将背景图片的位置从左上角（0% 0%）逐渐过渡到右下角（100% 100%），看起来的效果就像边框动起来了一样。</li>
</ul>
<blockquote>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>掘金专栏</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞定规范化Git Commit</title>
    <url>/2020/09/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9A%E8%A7%84%E8%8C%83%E5%8C%96Git-Commit/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/09/28/2c6PtO7umUjKxC1.png" alt=""></p>
<a id="more"></a>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>规范化 <code>git commit</code> 对于提高 <code>git log</code> 可读性、可控的版本控制和 changelog 生成都有着重要的作用。然而阻碍我们脚步的不只是团队的推广，单单对于一系列工具的配置都让人头大。这其中主要就是 commitlint 和 commitizen 的配合使用以及自定义提交规范。本文总结了目前的最佳实践给大家，如果有帮助，赏个star足矣。</p>
<h2 id="Conventional-Commits-约定式提交规范"><a href="#Conventional-Commits-约定式提交规范" class="headerlink" title="Conventional Commits 约定式提交规范"></a>Conventional Commits 约定式提交规范</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29udmVudGlvbmFsY29tbWl0cy5vcmcvemgtaGFucy92MS4wLjAtYmV0YS40Lw==" title="https://www.conventionalcommits.org/zh-hans/v1.0.0-beta.4/">Conventional Commits<i class="fa fa-external-link"></i></span> 是一种用于给提交信息增加人机可读含义的规范。约定式提交规范是一种基于消息的轻量级约定。它提供了一组用于创建清晰的提交历史的简单规则；这使得编写基于规范的自动化工具变得更容易。这个约定与 <span class="exturl" data-url="aHR0cDovL3NlbXZlci5vcmcv" title="http://semver.org/">SemVer<i class="fa fa-external-link"></i></span> 相吻合，在提交信息中描述新特性、bug 修复和破坏性变更。</p>
<p>提交说明的结构如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;类型&gt;([可选的作用域]): &lt;描述&gt;</span><br><span class="line"></span><br><span class="line">[可选的正文]</span><br><span class="line"></span><br><span class="line">[可选的脚注]</span><br></pre></td></tr></table></figure>

<h3 id="类型（type）"><a href="#类型（type）" class="headerlink" title="类型（type）"></a>类型（type）</h3><ul>
<li><code>feat:</code>:  类型为 <code>feat</code> 的提交表示在代码库中新增了一个功能（这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#摘要"><code>MINOR</code></a> 相对应）。 </li>
<li><code>fix:</code>：类型为 <code>fix</code> 的 提交表示在代码库中修复了一个 bug （这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#摘要"><code>PATCH</code></a> 相对应）。</li>
<li><code>docs:</code>: 只是更改文档。</li>
<li><code>style:</code>: 不影响代码含义的变化（空白、格式化、缺少分号等）。</li>
<li><code>refactor:</code>: 代码重构，既不修复错误也不添加功能。</li>
<li><code>perf:</code>: 改进性能的代码更改。</li>
<li><code>test:</code>: 添加确实测试或更正现有的测试。 </li>
<li><code>build:</code>: 影响构建系统或外部依赖关系的更改（示例范围：gulp、broccoli、NPM）。</li>
<li><code>ci:</code>: 更改持续集成文件和脚本（示例范围：Travis、Circle、BrowserStack、SauceLabs）。</li>
<li><code>chore:</code>:  其他不修改<code>src</code>或<code>test</code>文件。</li>
<li><code>revert:</code>: commit 回退。</li>
</ul>
<h3 id="范围（scope）"><a href="#范围（scope）" class="headerlink" title="范围（scope）"></a>范围（scope）</h3><p>可以为提交类型添加一个围在圆括号内的作用域，以为其提供额外的上下文信息。例如 <code>feat(parser): adds ability to parse arrays.</code>。</p>
<h3 id="BREAKING-CHANGE"><a href="#BREAKING-CHANGE" class="headerlink" title="BREAKING CHANGE"></a>BREAKING CHANGE</h3><p>在可选的正文或脚注的起始位置带有 <code>BREAKING CHANGE:</code> 的提交，表示引入了破坏性 API 变更（这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#摘要"><code>MAJOR</code></a> 相对应）。 破坏性变更可以是任意 <em>类型</em> 提交的一部分。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="包含了描述以及正文内有破坏性变更的提交说明"><a href="#包含了描述以及正文内有破坏性变更的提交说明" class="headerlink" title="包含了描述以及正文内有破坏性变更的提交说明"></a>包含了描述以及正文内有破坏性变更的提交说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feat: allow provided config object to extend other configs</span><br><span class="line"></span><br><span class="line">BREAKING CHANGE: &#96;extends&#96; key in config file is now used for extending other config files</span><br></pre></td></tr></table></figure>

<h4 id="包含了可选的-字符以提醒注意破坏性变更的提交说明"><a href="#包含了可选的-字符以提醒注意破坏性变更的提交说明" class="headerlink" title="包含了可选的 ! 字符以提醒注意破坏性变更的提交说明"></a>包含了可选的 <code>!</code> 字符以提醒注意破坏性变更的提交说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chore!: drop Node 6 from testing matrix</span><br><span class="line"></span><br><span class="line">BREAKING CHANGE: dropping Node 6 which hits end of life in April</span><br></pre></td></tr></table></figure>

<h4 id="不包含正文的提交说明"><a href="#不包含正文的提交说明" class="headerlink" title="不包含正文的提交说明"></a>不包含正文的提交说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docs: correct spelling of CHANGELOG</span><br></pre></td></tr></table></figure>

<h4 id="包含作用域的提交说明"><a href="#包含作用域的提交说明" class="headerlink" title="包含作用域的提交说明"></a>包含作用域的提交说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feat(lang): add polish language</span><br></pre></td></tr></table></figure>

<h4 id="为-fix-编写的提交说明，包含（可选的）-issue-编号"><a href="#为-fix-编写的提交说明，包含（可选的）-issue-编号" class="headerlink" title="为 fix 编写的提交说明，包含（可选的） issue 编号"></a>为 fix 编写的提交说明，包含（可选的） issue 编号</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fix: correct minor typos in code</span><br><span class="line"></span><br><span class="line">see the issue for details on the typos fixed</span><br><span class="line"></span><br><span class="line">closes issue #12</span><br></pre></td></tr></table></figure>

<h3 id="约定式提交规范"><a href="#约定式提交规范" class="headerlink" title="约定式提交规范"></a>约定式提交规范</h3><ol>
<li>每个提交都<strong>必须</strong>使用类型字段前缀，它由一个名词组成，诸如<code>feat</code>或<code>fix</code>，其后接一个<strong>可选的</strong>作用域字段，以及一个<strong>必要的</strong>冒号（英文半角）和空格。</li>
<li>当一个提交为应用或类库实现了新特性时，<strong>必须</strong>使用<code>feat</code>类型。</li>
<li>当一个提交为应用修复 bug 时，<strong>必须</strong>使用<code>fix</code>类型。</li>
<li>作用域字段可以跟随在类型字段后面。作用有<strong>必须</strong>是一个描述某部分代码的名词，并用圆括号包围，例如：<code>fix(parser):</code></li>
<li>描述字段<strong>必须</strong>紧接在类型/作用域前缀的空格之后。描述指的是对代码变更的简短总结，例如：<code>fix:array parsing issue when multiplejspaces were contained in string</code>。</li>
<li>在简短描述之后，<strong>可以</strong>编写更长的提交正文，为代码变更提供额外的上下文信息。正文<strong>必须</strong>起始于描述字段结束的一个空行后。</li>
<li>在正文结束的一个空行之后，<strong>可以</strong>编写一行或或多行脚注。脚注<strong>必须</strong>包含关于提交的元信息，例如：关联的合并请求、Reviewer、破坏性变更、每条元信息一行。</li>
<li>破坏性变更<strong>必须</strong>标示在正文区域最开始处，或脚注区域中某一行的开始。一个破坏性变更<strong>必须</strong>包含大写的文本<code>BREAKING CHANGE</code>，后面紧跟冒号和空格。</li>
<li>在<code>BREAKING CHANGE:</code>之后<strong>必须</strong>提供描述，以描述对 API 的变更。例如：<code>BREAKING CHANGE: enviroment variables now take precedence over cofig files</code>。</li>
<li>在提交说明中，<strong>可以</strong>使用<code>feat</code>和<code>fix</code>之外的类型。</li>
<li>工具的实现<strong>必须不</strong>区分大小写地解析构成约定式提交的信息单元，只有<code>BREAKING CHANGE</code>  <strong>必须</strong>是大写的。</li>
<li><strong>可以</strong>在类型/作用域前缀之后，<code>:</code>之前，附加<code>!</code>字符，以进一步提醒注意破坏性变更。当有<code>!</code>前缀时，正文或脚注内必须包含<code>BREAKING CHANGE: description</code></li>
</ol>
<h3 id="为什么使用约定式提交"><a href="#为什么使用约定式提交" class="headerlink" title="为什么使用约定式提交"></a>为什么使用约定式提交</h3><ul>
<li>自动化生产 CHANGELOG。</li>
<li>基于提交的类型，自动决定语义化的版本变更。</li>
<li>向同事、公众与其他利益关系者传达变化的性质。</li>
<li>触发构建和部署流程。</li>
<li>让人们探索一个更加结构化的提交历史，以便降低对你的项目作出贡献的难度。</li>
</ul>
<h2 id="cz-customizable"><a href="#cz-customizable" class="headerlink" title="cz-customizable"></a>cz-customizable</h2><p>可自定义的Commitizen插件（或独立实用运行）可帮助实现一致的提交消息。</p>
<p>安装 cz-customizable：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add cz-customizable -D</span><br></pre></td></tr></table></figure>

<p>向 package.json 添加新的 script：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span> : &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;commit&quot;: &quot;./node_modules/cz-customizable/standalone.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在根目录新建 <code>.cz-config.js</code> 并复制 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xlb25hcmRvYW5hbGlzdGEvY3otY3VzdG9taXphYmxlL2Jsb2IvbWFzdGVyL2N6LWNvbmZpZy1FWEFNUExFLmpz" title="https://github.com/leonardoanalista/cz-customizable/blob/master/cz-config-EXAMPLE.js">cz-config-EXAMPLE.js<i class="fa fa-external-link"></i></span> 到文件。</p>
<p>效果：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d049880526b4738ba54915d182831c4~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<h2 id="commitlint"><a href="#commitlint" class="headerlink" title="commitlint"></a>commitlint</h2><p>commitlint检查您的提交消息是否符合<span class="exturl" data-url="aHR0cHM6Ly9jb252ZW50aW9uYWxjb21taXRzLm9yZy8=" title="https://conventionalcommits.org/">conventional commit format<i class="fa fa-external-link"></i></span>。</p>
<p>1、安装 @commitlint/cli、husky：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D @commitlint/cli husky</span></span><br></pre></td></tr></table></figure>

<p>2、添加 git commit hooks 到 package.json：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;husky&quot;: &#123;</span><br><span class="line">    &quot;hooks&quot;: &#123;</span><br><span class="line">      &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、安装 commitlint-config-cz：</p>
<p>commitlint-config-cz 合并 cz-customizable 的配置 <code>&#123;types,scopes,scopeOverrides&#125;</code> 和 commitlint 的配置 <code>&#123;type-enum,scope-enum&#125;</code>。这样，你就可以在一个地方维护 types 和 scopes。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add commitlint-config-cz -D</span></span><br></pre></td></tr></table></figure>

<p>4、在 <code>commitlint.config.js</code> 中用 <code>cz</code> 扩展您的 commitlint 配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">extends</span>: [<span class="string">&#x27;cz&#x27;</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="comment">// must add these rules</span></span><br><span class="line">    <span class="string">&#x27;type-empty&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;subject-empty&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="vscode-commitizen"><a href="#vscode-commitizen" class="headerlink" title="vscode commitizen"></a>vscode commitizen</h2><p>在 VS Code 中搜索装 vscode commitizen，然后就可以摆脱命令行了，而且这个插件是和前面所有的配置兼容的，效果如下：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c46df7e45f584f63b99b1748c5b6e743~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><p>新建一个 github workflow <code>.github/workflows/commitlint.yml</code>，作用是在提交 pull_request 时，检查信息:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Lint</span> <span class="string">Commit</span> <span class="string">Messages</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">pull_request</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">commitlint:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;10.x&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Add</span> <span class="string">dependencies</span> <span class="string">for</span> <span class="string">commitlint</span> <span class="string">action</span></span><br><span class="line">        <span class="comment"># $GITHUB_WORKSPACE is the path to your repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;::set-env name=NODE_PATH::$GITHUB_WORKSPACE/node_modules&quot;</span></span><br><span class="line">      <span class="comment"># Now the commitlint action will run considering its own dependencies and yours as well 🚀</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">wagoid/commitlint-github-action@v2</span></span><br></pre></td></tr></table></figure>

<h2 id="standard-version"><a href="#standard-version" class="headerlink" title="standard-version"></a>standard-version</h2><p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvc3RhbmRhcmQtdmVyc2lvbg==" title="https://link.zhihu.com/?target=https%3A//github.com/conventional-changelog/standard-version">standard-version<i class="fa fa-external-link"></i></span> 是一款遵循<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9zZW12ZXIub3JnLw==" title="https://link.zhihu.com/?target=https%3A//semver.org/">语义化版本（ semver）<i class="fa fa-external-link"></i></span>和 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9jb252ZW50aW9uYWxjb21taXRzLm9yZy8=" title="https://link.zhihu.com/?target=https%3A//conventionalcommits.org/">commit message 标准规范<i class="fa fa-external-link"></i></span> 的版本和 changelog 自动化工具。通常情况线下，我们会在 master 分支进行如下的版本发布操作：</p>
<ol>
<li><code>git pull origin master</code></li>
<li>根据 <code>package.json</code> 中的 <code>version</code> 更新版本号，更新 CHANGELOG</li>
<li><code>git add .</code></li>
<li><code>git commit</code></li>
<li><code>git tag</code> 打版本操作</li>
<li><code>git push --tags</code>：push 版本 tag 和 master 分支到仓库</li>
</ol>
<p>其中 <strong>2，3，4，5</strong> 是 standard-version 工具会自动完成的工作，配合本地的 shell 脚本，则可以自动完成一系列版本发布的工作了。</p>
<h3 id="安装-amp-使用"><a href="#安装-amp-使用" class="headerlink" title="安装 &amp; 使用"></a>安装 &amp; 使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D standard-version</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;release&quot;</span>: <span class="string">&quot;standard-version&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>First Release：<code>yarn release --first-release</code></li>
<li>Cutting Release：<code>yarn release</code></li>
<li>Release as a Pre-Release：<code>yarn release --prerelease</code> or <code>yarn release --prerelease alpha</code></li>
<li>Release as a Target Type Imperatively (<code>npm version</code>-like)：<code>yarn release --release-as minor</code> or <code>yarn release --release-as 1.1.0</code>，可以合并 <code>--prerelease</code>以此方便发布实验性特性</li>
<li>Prevent Git Hooks：<code>yarn release --no-verify</code></li>
</ul>
<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
<th align="center">公众号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>commitlint</tag>
        <tag>commitizen</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Jest和Enzyme进行React Native单元测试</title>
    <url>/2020/10/%E4%BD%BF%E7%94%A8Jest%E5%92%8CEnzyme%E8%BF%9B%E8%A1%8CReact%20Native%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/11/18/cnIAURFYCOsGfDk.png" alt=""></p>
<a id="more"></a>

<h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><ul>
<li>jest：Jest是一个令人愉快的 JavaScript 测试框架，专注于简洁明快。</li>
<li>enzyme：Enzyme是用于React的JavaScript测试实用程序，可以更轻松地测试React组件的输出。您还可以根据给定的输出进行操作，遍历并以某种方式模拟运行时。</li>
<li>jest-enzyme: Jest assertions for enzyme</li>
<li>enzyme-adapter-react-16: React Native 测试所需的桥接器</li>
<li>enzyme-to-json: 将 Enzyme wrappers 转换成符合 Jest 快照测试的JSON格式。</li>
<li>react-native-mock-render: A fully mocked and test-friendly version of react native</li>
</ul>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add jest -D</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> babel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add babel-jest -D</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> enzyme</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add enzyme enzyme-adapter-react-16 enzyme-to-json -D</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> react-native-mock-render</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add react-native-mock-render -D</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> types</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add @types/enzyme @types/jest @types/react @types/react-native -D</span></span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="jest-config-js"><a href="#jest-config-js" class="headerlink" title="jest.config.js"></a>jest.config.js</h3><ul>
<li>setupFilesAfterEnv：使用Jest运行安装文件以配置Enzyme和适配器（如下文<code>jest.setup.js</code>中所示），之前是<code>setupTestFrameworkScriptFile</code>，也可以使用<code>setupFiles</code></li>
<li>snapshotSerializers：推荐使用序列化程序使用<code>enzyme-to-json</code>，它的安装和使用非常简单，并允许您编写简洁的快照测试。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  preset: <span class="string">&#x27;react-native&#x27;</span>,</span><br><span class="line">  verbose: <span class="literal">true</span>,</span><br><span class="line">  collectCoverage: <span class="literal">true</span>,</span><br><span class="line">  moduleNameMapper: &#123; <span class="comment">// for https://github.com/facebook/jest/issues/919</span></span><br><span class="line">    <span class="string">&#x27;^image![a-zA-Z0-9$_-]+$&#x27;</span>: <span class="string">&#x27;GlobalImageStub&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;^[@./a-zA-Z0-9$_-]+\\.(png|gif)$&#x27;</span>: <span class="string">&#x27;RelativeImageStub&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  setupFilesAfterEnv: [<span class="string">&quot;&lt;rootDir&gt;/jest.setup.js&quot;</span>],</span><br><span class="line">  snapshotSerializers: [<span class="string">&#x27;enzyme-to-json/serializer&#x27;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Jest 在 <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTU3NTI2NzMvb3B0aW9uLXNldHVwdGVzdGZyYW1ld29ya3NjcmlwdGZpbGUtd2FzLXJlcGxhY2VkLWJ5LWNvbmZpZ3VyYXRpb24tc2V0dXBmaWxlc2E=" title="https://stackoverflow.com/questions/55752673/option-setuptestframeworkscriptfile-was-replaced-by-configuration-setupfilesa">24.1.0<i class="fa fa-external-link"></i></span> 之后只能使用 <code>setupFilesAfterEnv</code></p>
</blockquote>
<h3 id="jest-setup-js"><a href="#jest-setup-js" class="headerlink" title="jest.setup.js"></a>jest.setup.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;react-native-mock-render/mock&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;react-native/Libraries/Animated/src/bezier&#x27;</span>; <span class="comment">// for https://github.com/facebook/jest/issues/4710</span></span><br><span class="line"><span class="keyword">import</span> Enzyme <span class="keyword">from</span> <span class="string">&#x27;enzyme&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Adapter <span class="keyword">from</span> <span class="string">&#x27;enzyme-adapter-react-16&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Enzyme.configure(&#123; <span class="attr">adapter</span>: <span class="keyword">new</span> Adapter() &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="覆盖率指标"><a href="#覆盖率指标" class="headerlink" title="覆盖率指标"></a>覆盖率指标</h2><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE1LzA2L2lzdGFuYnVsLmh0bWw=" title="https://www.ruanyifeng.com/blog/2015/06/istanbul.html">代码覆盖率工具 Istanbul 入门教程<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>Statements（stmts）：表达式覆盖率，是不是每个表达式都执行了？</p>
</li>
<li><p>Branches（Branch）：分支覆盖率，是不是每个if代码块都执行了？</p>
</li>
<li><p>Functions（Funcs）：函数覆盖率，是不是每个函数都调用了？</p>
</li>
<li><p>Lines（Lines）：行覆盖率，是不是每一行都执行了？</p>
</li>
</ul>
<h2 id="enzyme-入门"><a href="#enzyme-入门" class="headerlink" title="enzyme 入门"></a>enzyme 入门</h2><ul>
<li><p>shallow render（shallow）</p>
</li>
<li><p>full render（mount）</p>
</li>
<li><p>static render（render）</p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDA3NzYxMjEvZW56eW1lLWlzLW5vdC1maW5kaW5nLWNvbXBvbmVudC1ieS1wcm9wcw==" title="https://stackoverflow.com/questions/40776121/enzyme-is-not-finding-component-by-props">Enzyme is not finding component by props<i class="fa fa-external-link"></i></span></p>
</li>
</ul>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="jest-useFakeTimers"><a href="#jest-useFakeTimers" class="headerlink" title="jest.useFakeTimers()"></a>jest.useFakeTimers()</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly95ZXMtMS1hbS5naXRib29rLmlvL2Jsb2cvY2Utc2hpL2plc3QtemhvbmctcnUtaGUtY2Utc2hpLXNldHRpbWVvdXQ=" title="https://yes-1-am.gitbook.io/blog/ce-shi/jest-zhong-ru-he-ce-shi-settimeout">Jest 中 如何测试 setTimeout<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="组件测试"><a href="#组件测试" class="headerlink" title="组件测试"></a>组件测试</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDYyNTIzOTYvamVzdC1ob3ctdG8tdGVzdC1pZi1hLWNvbXBvbmVudC1kb2VzLW5vdC1leGlzdA==" title="https://stackoverflow.com/questions/46252396/jest-how-to-test-if-a-component-does-not-exist">Jest - how to test if a component does not exist?<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuenltZWpzL2VuenltZS9pc3N1ZXMvMzE2" title="https://github.com/enzymejs/enzyme/issues/316">Refs not working in component being shallow rendered<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="生命周期测试"><a href="#生命周期测试" class="headerlink" title="生命周期测试"></a>生命周期测试</h3><ul>
<li><span class="exturl" data-url="aHR0cDovL2VjaGl6ZW4uZ2l0aHViLmlvL3RlY2gvMjAxNy8wNC0yNC1jb21wb25lbnQtbGlmeWN5Y2xlLXRlc3Q=" title="http://echizen.github.io/tech/2017/04-24-component-lifycycle-test">组件生命周期测试 - jest+enzyme<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B0amh1YmVydC9yZWFjdC1lbnp5bWUtdGVzdGluZy1jb21wb25lbnR3aWxscmVjZWl2ZXByb3BzLXRoZS1jbGVhbi13YXktNGRiYTRmMDJiZTBi" title="https://medium.com/@tjhubert/react-enzyme-testing-componentwillreceiveprops-the-clean-way-4dba4f02be0b">React Enzyme: Testing componentWillReceiveProps, the Clean Way<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="UI测试"><a href="#UI测试" class="headerlink" title="UI测试"></a>UI测试</h3><h3 id="组件函数调用"><a href="#组件函数调用" class="headerlink" title="组件函数调用"></a>组件函数调用</h3><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="如何忽略某一块代码"><a href="#如何忽略某一块代码" class="headerlink" title="如何忽略某一块代码"></a>如何忽略某一块代码</h3><p>添加以下格式的注释到要忽略的代码块前即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br></pre></td></tr></table></figure>

<h3 id="如何使用-ES6-的-import-和-export"><a href="#如何使用-ES6-的-import-和-export" class="headerlink" title="如何使用 ES6 的 import 和 export"></a>如何使用 ES6 的 import 和 export</h3><p>首先安装 <code>@babel/plugin-transform-modules-commonjs</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D @babel/plugin-transform-modules-commonjs</span></span><br></pre></td></tr></table></figure>

<p>首先新建一个 <code>babel.config.js</code> 文件，添加以下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env: &#123;</span><br><span class="line">    test: &#123;</span><br><span class="line">      plugins: [<span class="string">&#x27;@babel/plugin-transform-modules-commonjs&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="How-to-Remove-warnings-when-rendering-react-native-components"><a href="#How-to-Remove-warnings-when-rendering-react-native-components" class="headerlink" title="How to Remove warnings when rendering react-native components"></a>How to Remove warnings when rendering react-native components</h3><ul>
<li>参考自：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuenltZWpzL2VuenltZS9pc3N1ZXMvODMxI2lzc3VlY29tbWVudC0zNTI5MzQ5NjM=" title="https://github.com/enzymejs/enzyme/issues/831#issuecomment-352934963">Remove warnings when rendering react-native components<i class="fa fa-external-link"></i></span></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&#x27;mounting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> origConsole = <span class="built_in">console</span>.error;</span><br><span class="line">    beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    afterEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error = origConsole;</span><br><span class="line">    &#125;);</span><br><span class="line">    it ...... </span><br><span class="line">       mount....</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="其他-issues"><a href="#其他-issues" class="headerlink" title="其他 issues"></a>其他 issues</h3><ul>
<li>@enzyme<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuenltZWpzL2VuenltZS9pc3N1ZXMvMTQzNg==" title="https://github.com/enzymejs/enzyme/issues/1436">Create Adapter for React Native &amp; React 16<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuenltZWpzL2VuenltZS9pc3N1ZXMvOTkx" title="https://github.com/enzymejs/enzyme/issues/991">Can’t simulate press event in react-native<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuenltZWpzL2VuenltZS9pc3N1ZXMvMTYzNg==" title="https://github.com/enzymejs/enzyme/issues/1636">Shallow with New React Context API. Consumer not getting context<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li>@jest<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2plc3QvaXNzdWVzLzkxOQ==" title="https://github.com/facebook/jest/issues/919">requiring image in react-native<i class="fa fa-external-link"></i></span></li>
<li><a href="https://github.com/facebook/jest/issues/4710">TypeError: Cannot read property ‘Object.<anonymous>‘ of null</a></li>
<li><a href="https://github.com/facebook/jest/issues/6434">ReferenceError: You are trying to <code>import</code> a file after the Jest environment has been torn down.</a></li>
</ul>
</li>
</ul>
<h2 id="其他选型"><a href="#其他选型" class="headerlink" title="其他选型"></a>其他选型</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTQxNTI1NjIvZGlmZmVyZW5jZS1iZXR3ZWVuLWVuenltZS1yZWFjdHRlc3R1dGlscy1hbmQtcmVhY3QtdGVzdGluZy1saWJyYXJ5" title="https://stackoverflow.com/questions/54152562/difference-between-enzyme-reacttestutils-and-react-testing-library">Difference between enzyme, ReactTestUtils and react-testing-library<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="react-test-renderer-amp-react-dom-test-utils"><a href="#react-test-renderer-amp-react-dom-test-utils" class="headerlink" title="react-test-renderer &amp; react-dom/test-utils"></a>react-test-renderer &amp; react-dom/test-utils</h3><h3 id="react-native-testing-library"><a href="#react-native-testing-library" class="headerlink" title="react-native-testing-library"></a>react-native-testing-library</h3><h3 id="Sinon"><a href="#Sinon" class="headerlink" title="Sinon"></a>Sinon</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGVpZ2hoYWxsaWRheS5jb20vdGVzdGluZy1yZWFjdC1qZXN0LWVuenltZS1zaW5vbg==" title="https://www.leighhalliday.com/testing-react-jest-enzyme-sinon">Testing React with Jest, Enzyme, and Sinon<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMDM3MjYzNA==" title="https://segmentfault.com/a/1190000010372634">Sinon 入门,看这篇文章就够了<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sb3Zla3kuZ2l0aHViLmlvLzIwMTgvMDYvMDUvdW5pdC10ZXN0aW5nLXJlYWN0LWNvbXBvbmVudC13aXRoLWplc3Qv" title="https://loveky.github.io/2018/06/05/unit-testing-react-component-with-jest/">利用 Jest 为 React 组件编写单元测试<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cubGVhbm90ZS5jb20vcG9zdC9oYWl0YW5nLnJlZ0BxcS5jb20vRW56eW1lJUU3JUFDJTk0JUU4JUFFJUIw" title="http://blog.leanote.com/post/haitang.reg@qq.com/Enzyme%E7%AC%94%E8%AE%B0">Enzyme笔记<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Zyb250ZW5kOS9mZTktbGlicmFyeS9pc3N1ZXMvMjQ0" title="https://github.com/frontend9/fe9-library/issues/244">使用jest+enzyme测试react组件<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NzAwOTY2NA==" title="https://zhuanlan.zhihu.com/p/47009664">使用Jest测试JavaScript(Mock篇)<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzODI4MjI4MTYxNTQ0" title="https://juejin.im/post/6844903828228161544">使用 Jest 和 Enzyme 测试 React 组件<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90dXR1cmUuY28vMjAyMC8wNC8wNC85ZTc0OTZkLw==" title="https://tuture.co/2020/04/04/9e7496d/">一杯茶的时间，上手 Jest 测试框架<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0hzdWVoLUplbi9ibG9nL2lzc3Vlcy8x" title="https://github.com/Hsueh-Jen/blog/issues/1">用jest+enzyme來寫Reactjs的單元測試吧！<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpbnhpbjYzMC9ibG9nL2lzc3Vlcy8yMg==" title="https://github.com/yinxin630/blog/issues/22">Jest单元测试配置和所遇问题解决办法<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGhpbmJ1Zy5jb20vcS80OTc3MjQ5Nw==" title="https://www.thinbug.com/q/49772497">使用Jest和Enzyme模拟自定义事件<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3VzdTgvcC85NTEyMzkzLmh0bWw=" title="https://www.cnblogs.com/susu8/p/9512393.html">react前端自动化测试： jest + enzyme<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="react-native"><a href="#react-native" class="headerlink" title="react native"></a>react native</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvbmV3cy81Nzg0MjE=" title="https://cloud.tencent.com/developer/news/578421">携程租车React Native单元测试实践<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzOTI5OTk4NzM3NDE2" title="https://juejin.im/post/6844903929998737416">Jest+enzyme测试React-native项目（从配置到案例）<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL3JlYWN0LW5hdGl2ZS1lbGVtZW50cw==" title="https://github.com/youngjuning/react-native-elements">react-native-elements<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC91LzQwODg5ODMvYmxvZy80NTQ0NDc3" title="https://my.oschina.net/u/4088983/blog/4544477">JavaScript 测试系列实战（三）：使用 Mock 模拟模块并处理组件交互<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly90dGZiLnRlc3QudHJhdmVsb2thLmNvbS90ZXN0aW5nLXJlYWN0LWNvbXBvbmVudC11c2luZy1lbnp5bWUtamVzdC1wYXJ0LTEv" title="https://ttfb.test.traveloka.com/testing-react-component-using-enzyme-jest-part-1/">Testing React Component using Enzyme + Jest Part 1: Setup<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubmV3bGluZS5jby9mdWxsc3RhY2stcmVhY3QvMzAtZGF5cy1vZi1yZWFjdC9kYXktMjUv" title="https://www.newline.co/fullstack-react/30-days-of-react/day-25/">Better Testing with Enzyme<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucm9iaW53aWVydWNoLmRlL3JlYWN0LXRlc3RpbmctamVzdC1lbnp5bWU=" title="https://www.robinwieruch.de/react-testing-jest-enzyme">How to test React with Jest &amp; Enzyme<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Jest</tag>
        <tag>单元测试</tag>
        <tag>端到端测试</tag>
      </tags>
  </entry>
  <entry>
    <title>使用rollup打包React Native插件并发布</title>
    <url>/2020/10/%E4%BD%BF%E7%94%A8rollup%E6%89%93%E5%8C%85React-Native%E6%8F%92%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/11/03/O9j3z1o2iyhKvNr.png" alt=""></p>
<a id="more"></a>

<h2 id="安装-rollup"><a href="#安装-rollup" class="headerlink" title="安装 rollup"></a>安装 rollup</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add -D rollup</span><br></pre></td></tr></table></figure>

<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;react-native-refined-components&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.1.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;refined react-native components&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;dist/cjs/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;dist/es/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;browser&quot;</span>: <span class="string">&quot;dist/umd/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;dist/es/index.d.ts&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;rimraf dist/* &amp;&amp; rollup -c&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;rollup -c -w&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="rollup配置文件"><a href="#rollup配置文件" class="headerlink" title="rollup配置文件"></a>rollup配置文件</h2><p>在根目录新建 <code>rollup.config.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">&#x27;./package.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  <span class="comment">// browser-friendly UMD build</span></span><br><span class="line">  &#123;</span><br><span class="line">    input: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">      file: pkg.browser, <span class="comment">// 文件</span></span><br><span class="line">      format: <span class="string">&#x27;umd&#x27;</span>, <span class="comment">// 格式</span></span><br><span class="line">      name: <span class="string">&#x27;refined-components&#x27;</span>, <span class="comment">// 生成包名称，代表你的 iife/umd 包</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// CommonJS (for Node) and ES module (for bundlers) build.</span></span><br><span class="line">  &#123;</span><br><span class="line">        input: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">        output: [</span><br><span class="line">            &#123; <span class="attr">file</span>: pkg.main, <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">file</span>: pkg.module, <span class="attr">format</span>: <span class="string">&#x27;es&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="转换-json-文件为-ES6-modules"><a href="#转换-json-文件为-ES6-modules" class="headerlink" title="转换 .json 文件为 ES6 modules"></a>转换 <code>.json</code> 文件为 ES6 modules</h2><h3 id="安装-rollup-plugin-json"><a href="#安装-rollup-plugin-json" class="headerlink" title="安装 @rollup/plugin-json:"></a>安装 <code>@rollup/plugin-json</code>:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add -D @rollup/plugin-json</span><br></pre></td></tr></table></figure>

<h3 id="配置-rollup-config-js"><a href="#配置-rollup-config-js" class="headerlink" title="配置 rollup.config.js"></a>配置 <code>rollup.config.js</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">&#x27;./package.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  <span class="comment">// browser-friendly UMD build</span></span><br><span class="line">  &#123;</span><br><span class="line">    input: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">      file: pkg.browser, <span class="comment">// 文件</span></span><br><span class="line">      format: <span class="string">&#x27;umd&#x27;</span>, <span class="comment">// 格式</span></span><br><span class="line">      name: <span class="string">&#x27;refined-components&#x27;</span>, <span class="comment">// 生成包名称，代表你的 iife/umd 包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      json(),</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// CommonJS (for Node) and ES module (for bundlers) build.</span></span><br><span class="line">  &#123;</span><br><span class="line">        input: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">        output: [</span><br><span class="line">            &#123; <span class="attr">file</span>: pkg.main, <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">file</span>: pkg.module, <span class="attr">format</span>: <span class="string">&#x27;es&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    plugins: [json()]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="加载并解析-CommonJS-模块"><a href="#加载并解析-CommonJS-模块" class="headerlink" title="加载并解析 CommonJS 模块"></a>加载并解析 CommonJS 模块</h2><p>我们写组件库或工具库时不可避免会用到外部库，这些外部库可能是符合 CommonJS 规范的。而 Rollup 力图实现 ES 模块的规范， 因此，加载 CommonJS 模块和使用 Node 模块位置解析逻辑都被实现为可选插件，默认情况下不在 Rollup 内核中。我们需要安装并配置 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9wbHVnaW5zL3RyZWUvbWFzdGVyL3BhY2thZ2VzL2NvbW1vbmpz" title="https://github.com/rollup/plugins/tree/master/packages/commonjs">CommonJS<i class="fa fa-external-link"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9wbHVnaW5zL3RyZWUvbWFzdGVyL3BhY2thZ2VzL25vZGUtcmVzb2x2ZQ==" title="https://github.com/rollup/plugins/tree/master/packages/node-resolve">node-resolve<i class="fa fa-external-link"></i></span> 插件。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add -D @rollup/plugin-node-resolve @rollup/plugin-commonjs</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>一般我们打的 cjs 和 esm 格式文件需要把第三放包打进来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-commonjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; nodeResolve &#125; <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-node-resolve&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">&#x27;./package.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  <span class="comment">// browser-friendly UMD build</span></span><br><span class="line">  &#123;</span><br><span class="line">    input: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">      file: <span class="string">&quot;./dist/umd/index.js&quot;</span>, <span class="comment">// 文件</span></span><br><span class="line">      format: <span class="string">&#x27;umd&#x27;</span>, <span class="comment">// 格式</span></span><br><span class="line">      name: <span class="string">&#x27;refined-components&#x27;</span>, <span class="comment">// 生成包名称，代表你的 iife/umd 包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      json(),</span><br><span class="line">      commonjs(), <span class="comment">// 加载 commonjs 模块</span></span><br><span class="line">      nodeResolve() <span class="comment">// 将 commonjs 转换为 ES 模块</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：CommonJS 和 ES module 格式下我们一般不希望把第三方库打包到输出产物中，所以并不需要配置这两个插件。</p>
</blockquote>
<h2 id="忽略-warning-treating-module-as-external-dependency"><a href="#忽略-warning-treating-module-as-external-dependency" class="headerlink" title="忽略 warning-treating-module-as-external-dependency"></a>忽略 <code>warning-treating-module-as-external-dependency</code></h2><p>Rollup 默认只会解析相对路径的模块，像是 <code>import _ from &#39;lodash&#39;</code> 不会被打包进 bundle，并且打包时会有警告。如果你想忽略这些警告，你需要在 <code>external</code> 中指明这些外部模块。那么有没有更优雅的方式呢？答案是肯定的，我们只需要安装并配置 <code>rollup-plugin-node-externals</code> 插件即可。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add -D rollup-plugin-node-externals</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> externals <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-node-externals&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  <span class="comment">// CommonJS (for Node) and ES module (for bundlers) build.</span></span><br><span class="line">  &#123;</span><br><span class="line">        output: [</span><br><span class="line">            &#123; </span><br><span class="line">        file: <span class="string">&#x27;./dist/cjs/index.js&#x27;</span>,</span><br><span class="line">        format: <span class="string">&#x27;cjs&#x27;</span>,</span><br><span class="line">        <span class="built_in">exports</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">            &#123; </span><br><span class="line">        file: <span class="string">&#x27;./dist/es/index.js&#x27;</span>,</span><br><span class="line">        format: <span class="string">&#x27;es&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    plugins: [</span><br><span class="line">      externals(&#123;<span class="attr">deps</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="打包-ts-文件"><a href="#打包-ts-文件" class="headerlink" title="打包 ts 文件"></a>打包 ts 文件</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add -D rollup-plugin-typescript2 typescript</span><br></pre></td></tr></table></figure>

<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-typescript2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  <span class="comment">// browser-friendly UMD build</span></span><br><span class="line">  &#123;</span><br><span class="line">    input: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">      file: <span class="string">&#x27;./dist/umd/index.js&#x27;</span>, <span class="comment">// 文件</span></span><br><span class="line">      format: <span class="string">&#x27;umd&#x27;</span>, <span class="comment">// 格式</span></span><br><span class="line">      name: <span class="string">&#x27;refined-components&#x27;</span>, <span class="comment">// 生成包名称，代表你的 iife/umd 包</span></span><br><span class="line">      globals: &#123;</span><br><span class="line">        <span class="string">&#x27;react&#x27;</span>: <span class="string">&#x27;React&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;react-native&#x27;</span>: <span class="string">&#x27;reactNative&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      sourcemap: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="comment">// 如果用了 rollup-plugin-node-resolve， 则必须将它放在 typescript 插件前面</span></span><br><span class="line">      typescript(&#123; </span><br><span class="line">        tsconfigOverride: &#123; </span><br><span class="line">          compilerOptions: &#123; <span class="attr">declaration</span>: <span class="literal">false</span> &#125; </span><br><span class="line">        &#125; </span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    external: [<span class="string">&quot;react&quot;</span>,<span class="string">&quot;react-native&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// CommonJS (for Node) and ES module (for bundlers) build.</span></span><br><span class="line">  &#123;</span><br><span class="line">        input: <span class="string">&#x27;./src/index.ts&#x27;</span>,</span><br><span class="line">        output: [</span><br><span class="line">            &#123; <span class="attr">dir</span>: <span class="string">&#x27;./dist/cjs/index.js&#x27;</span>, <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>, <span class="attr">exports</span>: <span class="string">&#x27;auto&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">dir</span>: <span class="string">&#x27;./dist/es/index.js&#x27;</span>, <span class="attr">format</span>: <span class="string">&#x27;es&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    plugins: [</span><br><span class="line">      typescript(),</span><br><span class="line">    ],</span><br><span class="line">    external: [<span class="string">&quot;react&quot;</span>,<span class="string">&quot;react-native&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [<span class="string">&quot;dist&quot;</span>,<span class="string">&quot;rollup.config.js&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="rollup-plugin-multi-input-使用"><a href="#rollup-plugin-multi-input-使用" class="headerlink" title="rollup-plugin-multi-input 使用"></a>rollup-plugin-multi-input 使用</h2><p>组件库比较大时，我们可能需要让我们的库支持 tree-shaking。那么你就不能将所有的文件都打入到一个文件中。<code>rollup-plugin-multi-input</code> 便是一个将打包产物输出到各自的文件中的插件。就像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">  - A.ts </span><br><span class="line">  - B.ts </span><br><span class="line">  - index.ts</span><br><span class="line">-&gt;</span><br><span class="line">dist</span><br><span class="line">  - A.js</span><br><span class="line">  - B.js</span><br><span class="line">  - index.js</span><br></pre></td></tr></table></figure>

<h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add -D rollup-plugin-multi-input</span><br></pre></td></tr></table></figure>

<h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><blockquote>
<p>注意：因为产物是多文件，所以需要用 <code>dir</code> 属性指定文件夹。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiInput <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-multi-input&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// CommonJS (for Node) and ES module (for bundlers) build.</span></span><br><span class="line">  &#123;</span><br><span class="line">        input: [<span class="string">&#x27;src/**/*.ts&#x27;</span>,<span class="string">&#x27;src/**/*.tsx&#x27;</span>],</span><br><span class="line">        output: [</span><br><span class="line">            &#123; <span class="attr">dir</span>: <span class="string">&#x27;./src&#x27;</span>, <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>, <span class="attr">exports</span>: <span class="string">&#x27;auto&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">dir</span>: <span class="string">&#x27;./src&#x27;</span>, <span class="attr">format</span>: <span class="string">&#x27;es&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    plugins: [</span><br><span class="line">      multiInput(),</span><br><span class="line">    ],</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h2><ul>
<li>rollup-plugin-progress: 打包进度条</li>
<li>rollup-plugin-terser: 压缩文件</li>
</ul>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>rollup</tag>
        <tag>前端打包</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 lerna 的多包 JavaScript 项目搭建维护笔记</title>
    <url>/2020/11/%E5%9F%BA%E4%BA%8E-lerna-%E7%9A%84%E5%A4%9A%E5%8C%85-JavaScript-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E7%BB%B4%E6%8A%A4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/11/14/2VMPXulGiLD6JU8.png" alt=""></p>
<a id="more"></a>

<blockquote>
<p>本篇文章的代码托管在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2xlcm5hLXJlcG8=" title="https://github.com/youngjuning/lerna-repo">Github<i class="fa fa-external-link"></i></span>上。</p>
</blockquote>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="全局安装-lerna"><a href="#全局安装-lerna" class="headerlink" title="全局安装 lerna"></a>全局安装 lerna</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install lerna -g</span><br></pre></td></tr></table></figure>

<h3 id="新建一个-git-仓库"><a href="#新建一个-git-仓库" class="headerlink" title="新建一个 git 仓库"></a>新建一个 git 仓库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git init lerna-repo &amp;&amp; <span class="built_in">cd</span> lerna-repo</span><br></pre></td></tr></table></figure>

<h3 id="初始化-lerna-项目"><a href="#初始化-lerna-项目" class="headerlink" title="初始化 lerna 项目"></a>初始化 lerna 项目</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ lerna init --independent</span><br></pre></td></tr></table></figure>

<p>你的代码仓库目前应该是如下结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lerna-repo&#x2F;</span><br><span class="line">  packages&#x2F;</span><br><span class="line">  package.json</span><br><span class="line">  lerna.json</span><br></pre></td></tr></table></figure>

<h2 id="创建-package"><a href="#创建-package" class="headerlink" title="创建 package"></a>创建 package</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ lerna create module-1</span><br><span class="line">$ lerna create module-2</span><br></pre></td></tr></table></figure>

<h2 id="yarn-workspaces-amp-Lerna-Hoisting"><a href="#yarn-workspaces-amp-Lerna-Hoisting" class="headerlink" title="yarn workspaces &amp; Lerna Hoisting"></a>yarn workspaces &amp; Lerna Hoisting</h2><p>使用 <span class="exturl" data-url="aHR0cHM6Ly95YXJucGtnLmNvbS9sYW5nL3poLUhhbnMvZG9jcy93b3Jrc3BhY2VzLw==" title="https://yarnpkg.com/lang/zh-Hans/docs/workspaces/">yarn workspaces<i class="fa fa-external-link"></i></span> 结合 Lerna useWorkspaces 可以实现 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xlcm5hL2xlcm5hL2Jsb2IvbWFpbi9kb2MvaG9pc3QubWQ=" title="https://github.com/lerna/lerna/blob/main/doc/hoist.md">Lerna Hoisting<i class="fa fa-external-link"></i></span>。这并不是多此一举，这可以让你在统一的地方（根目录）管理依赖，这即节省时间又节省空间。</p>
<p>配置 lerna.json:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;npmClient&quot;: &quot;yarn&quot;,</span><br><span class="line">  &quot;useWorkspaces&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顶级 package.json 必须包含一个 workspaces 数组:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  ...</span><br><span class="line">  &quot;workspaces&quot;: [&quot;packages/*&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="npm-registry"><a href="#npm-registry" class="headerlink" title="npm registry"></a>npm registry</h2><h3 id="搭建-verdaccio"><a href="#搭建-verdaccio" class="headerlink" title="搭建 verdaccio"></a>搭建 verdaccio</h3><blockquote>
<p>verdaccio 是一个开源轻量的npm私服</p>
</blockquote>
<p>全局安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install verdaccio -g</span><br></pre></td></tr></table></figure>

<p>配置 <code>~/.config/verdaccio/config.yaml</code> uplinks:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"># a list of other known repositories we can talk to</span><br><span class="line">uplinks:</span><br><span class="line">  npmjs:</span><br><span class="line">    url: https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br><span class="line">  taobao:</span><br><span class="line">    url: https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br><span class="line">  tuya:</span><br><span class="line">    url: https:&#x2F;&#x2F;registry-npm.tuya-inc.top&#x2F;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h3><p>0、run <code>sudo npm i -g pm2</code></p>
<p>1、run <code>pm2 start verdaccio</code> &amp; <code>pm2 startup</code></p>
<p>outputs:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[PM2] Init System found: launchd</span><br><span class="line">[PM2] To setup the Startup Script, copy/paste the following <span class="built_in">command</span>:</span><br><span class="line">sudo env PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/bin /usr/<span class="built_in">local</span>/lib/node_modules/pm2/bin/pm2 startup launchd -u luozhu --hp /Users/luozhu</span><br></pre></td></tr></table></figure>

<p>2、run <code>sudo env PATH=$PATH:/usr/local/bin /usr/local/lib/node_modules/pm2/bin/pm2 startup launchd -u luozhu --hp /Users/luozhu</code></p>
<p>outputs:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[PM2] Freeze a process list on reboot via:</span><br><span class="line">$ pm2 save</span><br><span class="line"></span><br><span class="line">[PM2] Remove init script via:</span><br><span class="line">$ pm2 unstartup launchd</span><br></pre></td></tr></table></figure>

<h3 id="修改-lerna-publishConfig"><a href="#修改-lerna-publishConfig" class="headerlink" title="修改 lerna publishConfig"></a>修改 lerna publishConfig</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lerna.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;command&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;publish&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;ignoreChanges&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;ignored-file&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.md&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;chore(release): publish %s&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;registry&quot;</span>: <span class="string">&quot;http://localhost:4873&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 各 package 的 package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;publishConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;registry&quot;</span>: <span class="string">&quot;http://localhost:4873&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="commitlint-amp-commitizen"><a href="#commitlint-amp-commitizen" class="headerlink" title="commitlint &amp; commitizen"></a>commitlint &amp; commitizen</h2><blockquote>
<p>请参考我之前的文章 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODc3NDYyNzQ3NjMxMDI2MTkw" title="https://juejin.im/post/6877462747631026190">一文搞定规范化Git Commit<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn install</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ lerna bootstrap</span><br></pre></td></tr></table></figure>

<h3 id="package依赖"><a href="#package依赖" class="headerlink" title="package依赖"></a>package依赖</h3><p>给指定package安装依赖：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn workspace module-1 add lodash</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ lerna add lodash --scope module-1</span><br></pre></td></tr></table></figure>

<p>给所有package安装依赖：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn workspaces add dayjs</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ lerna add dayjs</span><br></pre></td></tr></table></figure>

<h3 id="workspace依赖"><a href="#workspace依赖" class="headerlink" title="workspace依赖"></a>workspace依赖</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ lerna add module-2 --scope module-1</span><br></pre></td></tr></table></figure>

<h3 id="共用的工具依赖"><a href="#共用的工具依赖" class="headerlink" title="共用的工具依赖"></a>共用的工具依赖</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add -W -D typescript</span><br></pre></td></tr></table></figure>

<h2 id="lerna-json"><a href="#lerna-json" class="headerlink" title="lerna.json"></a>lerna.json</h2><ul>
<li>version: 当前仓库的版本，Independent mode 请设置为 <code>independent</code></li>
<li>npmClient: 指定运行命令的客户端程序（默认是npm）</li>
<li>command<ul>
<li>publish<ul>
<li>ignoreChanges: 一个不包含在 <code>lerna changed/publish</code> 的 glob 数组。使用这个去阻止发布不必要的更新，比如修复 <code>README.md</code></li>
<li>message: 一个 publish 时的自定义 commit 信息。详情请查看<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xlcm5hL2xlcm5hL2Jsb2IvbWFpbi9jb21tYW5kcy92ZXJzaW9uIy0tbWVzc2FnZS1tc2c=" title="https://github.com/lerna/lerna/blob/main/commands/version#--message-msg">@lerna/version<i class="fa fa-external-link"></i></span></li>
<li>registry: 设置自定义的 npm 代理（比如使用 verdaccio 搭建的私服）</li>
</ul>
</li>
<li>version<ul>
<li>conventionalCommits: <code>lerna version</code> 会自动决定 version bump 和生成 CHANGELOG 文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="npm-scripts"><a href="#npm-scripts" class="headerlink" title="npm scripts"></a>npm scripts</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;release:beta&quot;</span>: <span class="string">&quot;lerna publish --canary --pre-dist-tag=beta --preid=beta --yes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release:rc&quot;</span>: <span class="string">&quot;lerna publish prerelease --pre-dist-tag=rc --preid=rc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release:next&quot;</span>: <span class="string">&quot;lerna publish prerelease --pre-dist-tag=next --preid=next&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release:preminor&quot;</span>: <span class="string">&quot;lerna publish preminor --pre-dist-tag=next --preid=next&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release:premajor&quot;</span>: <span class="string">&quot;lerna publish premajor --pre-dist-tag=next --preid=next&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release&quot;</span>: <span class="string">&quot;lerna publish&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release:minor&quot;</span>: <span class="string">&quot;lerna publish minor&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release:major&quot;</span>: <span class="string">&quot;lerna publish major&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;commit&quot;</span>: <span class="string">&quot;git cz&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzNTY4NzUxNzIyNTA5" title="https://juejin.im/post/6844903568751722509">lerna管理前端模块最佳实践<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>lerna</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习笔记</title>
    <url>/2020/12/AST%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<a id="more"></a>

<h3 id="AST-标识"><a href="#AST-标识" class="headerlink" title="AST 标识"></a>AST 标识</h3><ul>
<li>FUNC</li>
<li>KIND</li>
<li>LITERAL ID</li>
<li>SUSPEND COUNT</li>
<li>NAME</li>
<li>INFERRED NAME</li>
<li>DECLS</li>
<li>VARIABLE</li>
<li>BLOCK NOCOMPLETIONS</li>
<li>EXPRESSION STATEMENT</li>
<li>INIT</li>
<li>VAR PROXY unallocated</li>
<li>mode</li>
<li>assigned</li>
<li>LITERAL</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>图解Google V8 学习笔记</title>
    <url>/2020/12/%E5%9B%BE%E8%A7%A3Google-V8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>图解Google V8 学习笔记</p>
<a id="more"></a>

<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul>
<li>JIT: Just In Time，即时编译技术。混合使用编译器和解释器的技术。不常用代码解释执行，常用代码编译执行。</li>
<li>惰性编译</li>
<li>内联缓存</li>
<li>隐藏类（Hide Class）</li>
<li>事件循环系统（Event Loop）</li>
<li>垃圾回收机制</li>
</ul>
<p>作用域、词法环境、执行上下文、CPU架构（intel、ARM、MIPS）、AST、机器语言</p>
<h2 id="V8-是什么"><a href="#V8-是什么" class="headerlink" title="V8 是什么"></a>V8 是什么</h2><p>V8 是一个由 Google 开发的开源 JavaScript 引擎，也被称为虚拟机，模拟实际计算机各种功能来实现代码的编译和执行。目前用在 Chrome 浏览器和 Node.js 中，其核心功能是执行易于人类理解的 JavaScript 代码。</p>
<h2 id="Mac-安装-V8"><a href="#Mac-安装-V8" class="headerlink" title="Mac 安装 V8"></a>Mac 安装 V8</h2><h3 id="预备条件"><a href="#预备条件" class="headerlink" title="预备条件"></a>预备条件</h3><ul>
<li>Install Xcode (Avaliable on the Mac App Store)</li>
<li>Install Xcode Command Line Tools (Preferences &gt; Downloads)</li>
<li>Install <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hyb21pdW0ub3JnL2RldmVsb3BlcnMvaG93LXRvcy9pbnN0YWxsLWRlcG90LXRvb2xz" title="https://www.chromium.org/developers/how-tos/install-depot-tools">depot_tools<i class="fa fa-external-link"></i></span><ul>
<li><code>cd ~ &amp;&amp; git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</code></li>
<li><code>sudo nano ~/.zshrc</code>(zsh) or <code>sudo nano ~/.bash_profile</code>(bash)</li>
<li>Add <code>export PATH=~/depot_tools:&quot;$PATH&quot;</code> (it’s important that depot_tools comes first here)</li>
<li><code>source ~/.zshrc</code></li>
<li>From the directory you want to install V8 into, run <code>gclient</code></li>
</ul>
</li>
</ul>
<h3 id="Build-V8"><a href="#Build-V8" class="headerlink" title="Build V8"></a>Build V8</h3><ul>
<li><p><code>fetch v8</code></p>
</li>
<li><p><code>cd ~/v8</code></p>
</li>
<li><p><code>gclient sync</code></p>
</li>
<li><p><code>tools/dev/v8gen.py x64.optdebug</code></p>
</li>
<li><p><code>ninja -C out.gn/x64.optdebug</code> (prepare for lots of fan noise)</p>
<p>I’d also recommend adding these to your <code>.zshrc</code>:</p>
</li>
<li><p><code>sudo nano ~/.zshrc</code></p>
</li>
<li><p>Add <code>alias d8=~/v8/out.gn/x64.optdebug/d8</code></p>
</li>
<li><p>Add <code>alias tick-processor=~/v8/tools/mac-tick-processor</code></p>
</li>
<li><p>Add <code>export D8_PATH=&quot;~/v8/out.gn/x64.optdebug&quot;</code></p>
</li>
<li><p><code>source ~/.zshrc</code></p>
</li>
</ul>
<blockquote>
<p>使用 Demo 请参考 <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20va2V2aW5jZW5uaXMvMGNkMjEzOGM3OGEwNzQxMmVmMjEjZDgtc2hlbGwtZXhhbXBsZXM=" title="https://gist.github.com/kevincennis/0cd2138c78a07412ef21#d8-shell-examples">d8-shell-examples<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="d8命令"><a href="#d8命令" class="headerlink" title="d8命令"></a>d8命令</h2><h3 id="查看解析器生成的AST"><a href="#查看解析器生成的AST" class="headerlink" title="查看解析器生成的AST"></a>查看解析器生成的AST</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ d8 --<span class="built_in">print</span>-ast &lt;file&gt;</span><br></pre></td></tr></table></figure>

<h3 id="查看解析器生成的作用域"><a href="#查看解析器生成的作用域" class="headerlink" title="查看解析器生成的作用域"></a>查看解析器生成的作用域</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ d8 --<span class="built_in">print</span>-scopes &lt;file&gt;</span><br></pre></td></tr></table></figure>

<h3 id="查看解释器生成的字节码"><a href="#查看解释器生成的字节码" class="headerlink" title="查看解释器生成的字节码"></a>查看解释器生成的字节码</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ d8 --<span class="built_in">print</span>-bytecode &lt;file&gt;</span><br></pre></td></tr></table></figure>

<h2 id="V8执行一段JavaScript流程"><a href="#V8执行一段JavaScript流程" class="headerlink" title="V8执行一段JavaScript流程"></a>V8执行一段JavaScript流程</h2><p>解释执行:</p>
<p>编译执行:</p>
<h2 id="代码执行方式"><a href="#代码执行方式" class="headerlink" title="代码执行方式"></a>代码执行方式</h2><h3 id="解释执行"><a href="#解释执行" class="headerlink" title="解释执行"></a>解释执行</h3><p>需要先将输入的源代码通过解析器编译成中间代码，之后直接使用解释器解释执行中间代码，然后直接输出结果。解释执行的启动速度快，但是执行时的速度慢。</p>
<h3 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h3><p>采用这种方式时，也需要先将源代码转换为中间代码，然后我们的编译器再将中间代码编译成机器代码。通常编译成的机器代码是以二进制文件形式存储的，需要执行这段程序的时候直接执行二进制文件就可以了。还可以使用虚拟机将编译后的机器代码保存在内存中，然后直接执行内存中的二进制代码。编译执行的启动速度慢，但是执行时的速度快。</p>
<h2 id="JavaScript-虚拟机"><a href="#JavaScript-虚拟机" class="headerlink" title="JavaScript 虚拟机"></a>JavaScript 虚拟机</h2><ul>
<li>Safari: JavaScriptCore</li>
<li>Firefox: TraceMonkey</li>
<li>Chrome: V8</li>
<li>Edge: Chakra</li>
</ul>
<h2 id="变量提升（Hoisting）"><a href="#变量提升（Hoisting）" class="headerlink" title="变量提升（Hoisting）"></a>变量提升（Hoisting）</h2><blockquote>
<p>详细概念请参考 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9Ib2lzdGluZw==" title="https://developer.mozilla.org/zh-CN/docs/Glossary/Hoisting">https://developer.mozilla.org/zh-CN/docs/Glossary/Hoisting<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line">sayHello()</span><br><span class="line"><span class="keyword">var</span> sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;极客时间&quot;</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sayHello() // TypeError: sayHello is not a function</span></span><br><span class="line"><span class="comment">// var sayHello</span></span><br><span class="line"><span class="comment">// sayHello = function () &#123;</span></span><br><span class="line"><span class="comment">//   var a = &quot;极客时间&quot;</span></span><br><span class="line"><span class="comment">//   return a</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line">sayHello()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;极客时间&quot;</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function () &#123;</span></span><br><span class="line"><span class="comment">//   var a = &quot;极客时间&quot;</span></span><br><span class="line"><span class="comment">//   return a</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// sayHello()</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>V8</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 数组对象</title>
    <url>/2020/01/JavaScript%20%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>ECMAScript 数组的每一项可以保存任何类型的数据；而且大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。</p>
<a id="more"></a>

<h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>() <span class="comment">// []</span></span><br><span class="line">colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>) <span class="comment">// [empty × 10]</span></span><br><span class="line">colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>) <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组字面量表示法"><a href="#数组字面量表示法" class="headerlink" title="数组字面量表示法"></a>数组字面量表示法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [] <span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>] <span class="comment">// 创建一个包含 3 个字符串的数组</span></span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>] <span class="comment">// 不要这样！这样会创建一个包含2或3项的数组</span></span><br><span class="line"><span class="keyword">var</span> options = [, , , , ,] <span class="comment">// 不要这样！这样会创建一个包含5或6项的数组</span></span><br></pre></td></tr></table></figure>

<h2 id="读取和设置数组的值"><a href="#读取和设置数组的值" class="headerlink" title="读取和设置数组的值"></a>读取和设置数组的值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>] <span class="comment">// 创建一个包含3个字符串的数组</span></span><br><span class="line">alert(colors[<span class="number">0</span>]) <span class="comment">// 显示第1项</span></span><br><span class="line">colors[<span class="number">2</span>] = <span class="string">&#x27;black&#x27;</span> <span class="comment">// 修改第3项</span></span><br><span class="line">colors[<span class="number">3</span>] = <span class="string">&#x27;brown&#x27;</span> <span class="comment">// 新增第4项</span></span><br></pre></td></tr></table></figure>

<h2 id="length-属性"><a href="#length-属性" class="headerlink" title="length 属性"></a>length 属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>] <span class="comment">// 创建一个包含3个字符串的数组</span></span><br><span class="line">alert(colors.length) <span class="comment">// 显示数组长度</span></span><br><span class="line">colors[colors.length] = <span class="string">&#x27;black&#x27;</span> <span class="comment">// 在位置3添加一种颜色</span></span><br><span class="line">colors[colors.length] = <span class="string">&#x27;brown&#x27;</span> <span class="comment">// 在位置4再添加一种颜色</span></span><br></pre></td></tr></table></figure>

<h2 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = []</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(array)) &#123;</span><br><span class="line">  <span class="comment">// 对数组执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Array-isArray-Polyfill"><a href="#Array-isArray-Polyfill" class="headerlink" title="Array.isArray Polyfill"></a>Array.isArray Polyfill</h3><p>如果是实际项目可以配置 <code>@babel/polyfill</code> 或者 <code>transform-runtime</code>，这不在本文的讨论范围</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">&#x27;[object Array]&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ES1-方法"><a href="#ES1-方法" class="headerlink" title="ES1 方法"></a>ES1 方法</h2><ul>
<li><code>Array.prototype.join</code>: <code>join()</code> 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。<strong>原始数组不会被改变</strong>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// join</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colors.join()) <span class="comment">// &quot;red,blue,green&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(colors.join(<span class="string">&#x27;|&#x27;</span>)) <span class="comment">// &quot;red|blue|green&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(colors.join(<span class="string">&#x27;|&#x27;</span>)) <span class="comment">// &quot;red|blue|green&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;red|blue|green&#x27;</span>.split(<span class="string">&#x27;|&#x27;</span>)) <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Array.prototype.reverse()</code>: <code>reverse()</code> 方法将数组中元素的位置颠倒，并返回该数组。<strong>该方法会改变原数组</strong>。</li>
<li><code>Array.prototype.sort()</code>: <code>sort()</code> 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的; sort 方法接收一个比较函数作为参数，如果第一参数应该位于第二个参数之前则返回负数，如果第一个参数应该位于第二个之后则返回一个正数。<strong>该方法会改变原数组</strong>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reverse</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colors.reverse()) <span class="comment">// [5, 4, 3, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sort</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr, asc = true</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (asc) &#123;</span><br><span class="line">      <span class="keyword">return</span> a - b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b - a</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sort(colors)) <span class="comment">// [1, 3, 5, 10, 20]</span></span><br><span class="line"><span class="built_in">console</span>.log(sort(colors, <span class="literal">false</span>)) <span class="comment">// [20, 10, 5, 3, 1]</span></span><br></pre></td></tr></table></figure>

<h2 id="ES3-方法"><a href="#ES3-方法" class="headerlink" title="ES3 方法"></a>ES3 方法</h2><ul>
<li><code>Array.prototype.push</code>: <code>push()</code> 方法可以接受任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。<strong>该方法会改变原数组</strong>。</li>
<li><code>Array.prototype.pop</code>: <code>pop()</code> 方法从数组末尾移除最后一项，减少数组的 <code>length</code> 值，并返回该项。<strong>该方法会改变原数组</strong>。</li>
<li><code>Array.prototype.shift</code>: <code>shift()</code> 方法能够移除数组中的第一项并返回该项, 同时将数组长度减 1。<strong>该方法会改变原数组</strong>。</li>
<li><code>Array.prototype.unshift</code>: <code>unshift()</code> 方法能够在数组前端添加任意个项，并返回新数组的长度。<strong>该方法会改变原数组</strong>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// push、pop</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> count = colors.push(<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>) <span class="comment">// 向末尾推入两项</span></span><br><span class="line"><span class="built_in">console</span>.log(count) <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">var</span> item = colors.pop() <span class="comment">// 取得最后一项</span></span><br><span class="line"><span class="built_in">console</span>.log(item) <span class="comment">// &quot;brown&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shift、unshift</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> count = colors.unshift(<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>) <span class="comment">// 向开头推入两项</span></span><br><span class="line"><span class="built_in">console</span>.log(count) <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">var</span> item = colors.shift() <span class="comment">// 取得第一项</span></span><br><span class="line"><span class="built_in">console</span>.log(item) <span class="comment">// &quot;red&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Array.prototype.concat()</code>: <code>concat()</code> 方法用于合并两个或多个数组。<strong>原始数组不会被改变</strong>，而是返回一个新数组。</li>
<li><code>Array.prototype.slice()</code>: <code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的浅拷贝（包括 <code>begin</code>，不包括 <code>end</code>）。<strong>原始数组不会被改变</strong>。</li>
<li><code>Array.prototype.splice()</code>: <code>splice()</code> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。<strong>此方法会改变原数组</strong>。<ul>
<li><strong>删除</strong>: 可以删除任意数量的项，只需指定 2 个参数: 要删除的第一项的位置和要删除的项数。例如，<code>splice(0, 2)</code> 会删除数组中的前两项。</li>
<li><strong>插入</strong>: 可以向指定位置插入任意数量的项，只需要提供 3 个参数：起始位置、0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入任意多个项。例如，<code>splice(2, 0, &quot;red&quot;, &quot;green&quot;)</code> 会从当前数组的位置 2 开始插入字符串 <code>&quot;red&quot;</code> 和 <code>green</code>。</li>
<li><strong>替换</strong>: 可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需要指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项不必与删除的项数相等。例如，<code>splice(2, 1, &quot;red&quot;, &quot;green&quot;)</code> 会删除当前数组位置 2 的项，然后再从位置 2 开始插入字符串 <code>&quot;red&quot;</code> 和 <code>green</code>。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// concat</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> colors1 = [<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colors.concat(colors1)) <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br><span class="line"><span class="comment">// slice</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果 `slice()` 方法的参数中有一个负数，则用数组长度加上该数来确定相应地位置。例如，在一个包含5项的数组上调用 `slice(-2, -1)` 与调用 `slice(3, 4)` 得到的结果相同。如果结束位置小于起始位置，则返回空数组。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.slice(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> colors3 = colors.slice(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors2) <span class="comment">// [&quot;blue&quot;, &quot;green&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors3) <span class="comment">// [&quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * splice() 方法始终都会返回一个数组，该数组中包含从原始数组中删除的项（如果没有删除任何项，则返回一个空数组）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> removed = colors.splice(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">// 删除第一项</span></span><br><span class="line"><span class="built_in">console</span>.log(colors) <span class="comment">// [&quot;green&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(removed) <span class="comment">// [&quot;red&quot;] 返回的数组中只包含一项</span></span><br><span class="line"></span><br><span class="line">removed = colors.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>) <span class="comment">// 从位置 1 开始插入两项</span></span><br><span class="line"><span class="built_in">console</span>.log(colors) <span class="comment">// [&quot;green&quot;, &quot;red&quot;, &quot;orange&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(removed) <span class="comment">// 返回的是一个空数组</span></span><br><span class="line"></span><br><span class="line">removed = colors.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>) <span class="comment">// 删除一项，增加两项</span></span><br><span class="line"><span class="built_in">console</span>.log(colors) <span class="comment">// [&quot;green&quot;, &quot;red&quot;, &quot;purple&quot;, &quot;orange&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(removed) <span class="comment">// yellow，返回的数组中只包含一项</span></span><br></pre></td></tr></table></figure>

<h2 id="ES5-方法"><a href="#ES5-方法" class="headerlink" title="ES5 方法"></a>ES5 方法</h2><ul>
<li><code>Array.prototype.indexOf()</code>: <code>indexOf()</code> 方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。从数组的前面向后查找，从 <code>fromIndex</code> 处开始。</li>
<li><code>Array。prototype.lastIndexOf)()</code>: <code>lastIndexOf()</code> 方法返回指定元素在数组中的最后一个索引，如果不存在则返回-1。从数组的后面向前查找，从 <code>fromIndex</code> 处开始。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(numbers.indexOf(<span class="number">4</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers.lastIndexOf(<span class="number">4</span>)) <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers.indexOf(<span class="number">4</span>, <span class="number">4</span>)) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers.lastIndexOf(<span class="number">4</span>, <span class="number">4</span>)) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;Nicholas&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> people = [&#123; <span class="attr">name</span>: <span class="string">&#x27;Nicholas&#x27;</span> &#125;]</span><br><span class="line"><span class="keyword">var</span> morePeople</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * indexOf、lastIndexOf 在比较第一个参数与数组中的每一项时，会使用全等操作符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(people.indexOf(person)) <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(morePeople.indexOf(person)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Array.prototype.every()</code>: 对数组中的每一项运行给定函数，如果该函数对每一项都返回 <code>true</code>，则返回 <code>true</code>。</li>
<li><code>Array.prototype.some()</code>: 对数组中的每一项运行给定函数，如果该函数对任一项返回 <code>true</code>，则返回 <code>true</code>。</li>
<li><code>Array.prototype.filter()</code>: 对数组中的每一项运行给定函数，返回该函数会返回 <code>true</code> 的项组成的数组。</li>
<li><code>Array.prototype.map()</code>: 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>
<li><code>Array.prototype.forEach()</code>: 对数组中的每一项运行给定函数，这个方法没有返回值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// every</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> everyResult = numbers.every(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(everyResult) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// some</span></span><br><span class="line"><span class="keyword">var</span> someResult = numbers.some(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(someResult) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// filter</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> filterResult = numbers.filter(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(filterResult) <span class="comment">// [3, 4, 5, 4, 3]</span></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> mapResult = numbers.map(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(mapResult) <span class="comment">// [2, 4, 6, 8, 10, 8, 6, 4, 2]</span></span><br><span class="line"><span class="comment">// forEach</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Array.prototype.reduce()</code></li>
<li><code>Array.prototype.reduceRight()</code></li>
</ul>
<p><code>reduce()</code> 和 <code>reduceRight()</code> 方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，<code>reduce()</code> 方法从数组的第一项开始，逐个遍历到最后。而 <code>reduceRight()</code> 则从数组的最后一项开始，向前遍历到第一项。</p>
<p>这两个参数都接受两个参数: 一个在每一项上调用的函数和（可选的）作为归并基础的初始值。传给 <code>reduce</code> 和 <code>reduceRight</code> 的函数接受 4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组求和</span></span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> sum = values.reduce(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev + cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"><span class="comment">// 数组求乘积</span></span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> pro = values.reduce(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev * cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(pro) <span class="comment">// 120</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【累加对象数组里的值】</span></span><br><span class="line"><span class="comment"> * 要累加对象数组中包含的值，必须提供初始值，以便各个item正确通过你的函数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> values = [&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;]</span><br><span class="line"><span class="keyword">var</span> sum = values.reduce(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev + cur.x</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 求最大值</span></span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> max = values.reduce(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev &gt; cur ? prev : cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(max) <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 计算数组中每个元素出现的次数</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tiff&#x27;</span>, <span class="string">&#x27;Bruce&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> countedNames = names.reduce(<span class="function">(<span class="params">allNames, name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (allNames.indexOf(name) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    allNames[name]++</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    allNames[name] = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> allNames</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 按属性对object array分类</span></span><br><span class="line"><span class="keyword">var</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;李扬&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;杨六&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> groupBy = <span class="function">(<span class="params">objectArray, property</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> objectArray.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = cur[property]</span><br><span class="line">    <span class="keyword">if</span> (!acc[key]) &#123;</span><br><span class="line">      acc[key] = [cur]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      acc[key].push(cur)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> groupedPeople = groupBy(people, <span class="string">&#x27;age&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>reduce 高级用法:</strong></p>
<blockquote>
<p>搬砖工小王拿到了这样的格式：<code>var arr = [ &#123;n ame: &#39;brick1&#39;&#125;, &#123;name: &#39;brick2&#39;&#125;, &#123;name: &#39;brick3&#39;&#125; ]</code><br>希望得到这样的数据格式：<code>brick1, brick2 &amp; brick3</code><br>当然数组异常流: <code>[&#123;name:&#39;brick1&#39;&#125;]</code> 和空数组传入得到 <code>&quot;brick1&quot;</code> 和空</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [&#123; <span class="attr">name</span>: <span class="string">&#x27;brick11&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;brick12&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;brick13&#x27;</span> &#125;]</span><br><span class="line"><span class="keyword">var</span> carryBricks = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> cur.name</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === array.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> prev + <span class="string">&#x27; &amp; &#x27;</span> + cur.name</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prev + <span class="string">&#x27;,&#x27;</span> + cur.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(carryBricks(array)) <span class="comment">// &quot;brick11,brick12 &amp; brick13&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(carryBricks([&#123; <span class="attr">name</span>: <span class="string">&#x27;brick1&#x27;</span> &#125;])) <span class="comment">// &quot;brick1&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(carryBricks([])) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="ES2015-ES6"><a href="#ES2015-ES6" class="headerlink" title="ES2015/ES6"></a>ES2015/ES6</h2><ul>
<li><p><code>Array.from</code>：用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）</p>
</li>
<li><p><code>Array.of</code>：用于将一组值，转换为数组</p>
</li>
<li><p><code>arr.fill(value[, start[, end]])</code>：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引</p>
</li>
<li><p><code>find()</code>：用于找出第一个符合条件的数组成员</p>
</li>
<li><p><code>findIndex()</code>：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回<code>-1</code></p>
</li>
<li><p><code>entries()</code>，<code>keys()</code> 和 values()：<code>keys()</code>是对键名的遍历、<code>values()</code>是对键值的遍历，<code>entries()</code>是对键值对的遍历</p>
</li>
</ul>
<h2 id="ES2016-ES7"><a href="#ES2016-ES7" class="headerlink" title="ES2016/ES7"></a>ES2016/ES7</h2><ul>
<li><code>copyWithin()</code>： 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</li>
<li><code>includes()</code>：返回一个布尔值，表示某个数组是否包含给定的值</li>
</ul>
<h2 id="ES2019-ES10"><a href="#ES2019-ES10" class="headerlink" title="ES2019/ES10"></a>ES2019/ES10</h2><ul>
<li><code>flat()</code>：会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</li>
<li><code>flatMap()</code>： 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbWFw" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">map<i class="fa fa-external-link"></i></span> 连着深度值为1的 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmxhdA==" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">flat<i class="fa fa-external-link"></i></span> 几乎相同，但 <code>flatMap</code> 通常在合并成一种方法的效率稍微高一些</li>
</ul>
<h2 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h2><h3 id="数组并集"><a href="#数组并集" class="headerlink" title="数组并集"></a>数组并集</h3><ul>
<li><code>_.union([arrays])</code>: 创建一个按顺序排列的唯一值的数组。所有给定数组的元素值使用 SameValueZero 做等值比较。（ <code>arrays</code>（数组）的并集，按顺序返回，返回数组的元素是唯一的）</li>
<li><code>_.unionBy([arrays], [iteratee=_.identity])</code>: 这个方法类似 <code>_.union</code> ，除了它接受一个 <code>iteratee</code> （迭代函数），调用每一个数组（<code>array</code>）的每个元素以产生唯一性计算的标准。<code>iteratee</code> 会传入一个参数：(<code>value</code>)。</li>
<li><code>_.unionWith([arrays], [comparator])</code>: 这个方法类似 <code>_.union</code>， 除了它接受一个 <code>comparator</code> 调用比较 <code>arrays</code> 数组的每一个元素。 <code>comparator</code> 调用时会传入 2 个参数： (<code>arrVal</code>, <code>othVal</code>)。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="comment">// union</span></span><br><span class="line">_.union([<span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// [2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unionBy</span></span><br><span class="line">_.unionBy([<span class="number">2.1</span>], [<span class="number">1.2</span>, <span class="number">2.3</span>], <span class="built_in">Math</span>.floor) <span class="comment">// [2.1, 1.2]</span></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.unionBy([&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;], [&#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;], <span class="string">&#x27;x&#x27;</span>) <span class="comment">// [&#123; &#x27;x&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 2 &#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unionWith</span></span><br><span class="line"><span class="keyword">var</span> objects = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> others = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;,</span><br><span class="line">]</span><br><span class="line">_.unionWith(objects, others, _.isEqual) <span class="comment">// [&#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 2, &#x27;y&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 1 &#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组交集"><a href="#数组交集" class="headerlink" title="数组交集"></a>数组交集</h3><ul>
<li><code>_.intersection([arrays])</code>: 创建唯一值的数组，这个数组包含所有给定数组都包含的元素，使用 SameValueZero 进行相等性比较。（可以理解为给定数组的交集）</li>
<li><code>_.intersectionBy([arrays], [iteratee=_.identity])</code>: 这个方法类似 <code>_.intersection</code>，区别是它接受一个 <code>iteratee</code> 调用每一个 arrays 的每个值以产生一个值，通过产生的值进行了比较。结果值是从第一数组中选择。iteratee 会传入一个参数：<code>(value)</code>。</li>
<li><code>_.intersectionWith([arrays], [comparator])</code>: 这个方法类似 <code>_.intersection</code>，区别是它接受一个 <code>comparator</code> 调用比较 arrays 中的元素。结果值是从第一数组中选择。<code>comparator</code> 会传入两个参数：<code>(arrVal, othVal)</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="comment">// intersection</span></span><br><span class="line">_.intersection([<span class="number">2</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>])) <span class="comment">// [2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// intersectionBy</span></span><br><span class="line">_.intersectionBy([<span class="number">2.1</span>, <span class="number">1.2</span>], [<span class="number">4.3</span>, <span class="number">2.4</span>], <span class="built_in">Math</span>.floor) <span class="comment">// [2.1]</span></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.intersectionBy([&#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span> &#125;], [&#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">2</span> &#125;, &#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span> &#125;], <span class="string">&#x27;x&#x27;</span>) <span class="comment">// =&gt; [&#123; &#x27;x&#x27;: 1 &#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// intersectionWith</span></span><br><span class="line"><span class="keyword">var</span> objects = [&#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span> &#125;, &#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">1</span> &#125;];</span><br><span class="line"><span class="keyword">var</span> others = [&#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">1</span> &#125;, &#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span> &#125;];</span><br><span class="line">_.intersectionWith(objects, others, _.isEqual) <span class="comment">// [&#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 2 &#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组差集"><a href="#数组差集" class="headerlink" title="数组差集"></a>数组差集</h3><ul>
<li><code>_.difference(array, [values])</code>: 创建一个具有唯一 array 值的数组，每个值不包含在其他给定的数组中。（即创建一个新数组，这个数组中的值，为第一个数字（array 参数）排除了给定数组中的值。）该方法使用 SameValueZero 做相等比较。结果值的顺序是由第一个数组中的顺序确定。</li>
<li><code>_.differenceBy(array, [values], [iteratee=_.identity])</code>: 这个方法类似 _.difference ，除了它接受一个 iteratee （迭代器）， 调用 array 和 values 中的每个元素以产生比较的标准。 结果值是从第一数组中选择。iteratee 会调用一个参数：(value)。（首先使用迭代器分别迭代 array 和 values 中的每个元素，返回的值作为比较值）。</li>
<li><code>_.differenceWith(array, [values], [comparator])</code>: 这个方法类似 <code>_.difference</code> ，除了它接受一个 <code>comparator</code> （比较器），它调用比较 <code>array</code>，<code>values</code> 中的元素。 结果值是从第一数组中选择。<code>comparator</code> 调用参数有两个：<code>(arrVal, othVal)</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// difference</span></span><br><span class="line">_.difference([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">2</span>]) <span class="comment">// [3, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// differenceBy</span></span><br><span class="line">_.differenceBy([<span class="number">3.1</span>, <span class="number">2.2</span>, <span class="number">1.3</span>], [<span class="number">4.4</span>, <span class="number">2.5</span>], <span class="built_in">Math</span>.floor) <span class="comment">// [3.1, 1.3]</span></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.differenceBy([&#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;], [&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;], <span class="string">&#x27;x&#x27;</span>) <span class="comment">// [&#123; &#x27;x&#x27;: 2 &#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// differenceWith</span></span><br><span class="line"><span class="keyword">var</span> objects = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;,</span><br><span class="line">]</span><br><span class="line">_.differenceWith(objects, [&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;], _.isEqual) <span class="comment">// [&#123; &#x27;x&#x27;: 2, &#x27;y&#x27;: 1 &#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组分组"><a href="#数组分组" class="headerlink" title="数组分组"></a>数组分组</h3><ul>
<li><code>_.groupBy(collection, [iteratee=_.identity])</code>: 创建一个对象，<code>key</code> 是 <code>iteratee</code> 遍历 <code>collection</code>(集合) 中的每个元素返回的结果。 分组值的顺序是由他们出现在 <code>collection</code>(集合) 中的顺序确定的。每个键对应的值负责生成 <code>key</code> 的元素组成的数组。<code>iteratee</code> 调用 1 个参数： (<code>value</code>)。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line">_.groupBy([<span class="number">6.1</span>, <span class="number">4.2</span>, <span class="number">6.3</span>], <span class="built_in">Math</span>.floor) <span class="comment">// &#123; &#x27;4&#x27;: [4.2], &#x27;6&#x27;: [6.1, 6.3] &#125;</span></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.groupBy([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>], <span class="string">&#x27;length&#x27;</span>) <span class="comment">// &#123; &#x27;3&#x27;: [&#x27;one&#x27;, &#x27;two&#x27;], &#x27;5&#x27;: [&#x27;three&#x27;] &#125;</span></span><br><span class="line"><span class="keyword">const</span> students = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;杨俊宁&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;河南&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;宋光刚&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;河南&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;谢晧曜&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;江苏&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;李珂威&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;河南&#x27;</span> &#125;,</span><br><span class="line">]</span><br><span class="line">_.groupBy(students, <span class="string">&#x27;province&#x27;</span>)</span><br><span class="line"><span class="comment">// &#123; &#x27;江苏&#x27;: [&#123; name: &#x27;谢晧曜&#x27;, province: &#x27;江苏&#x27; &#125;], &#x27;河南&#x27;: [&#123; name: &#x27;杨俊宁&#x27;, province: &#x27;河南&#x27; &#125;, &#123; name: &#x27;宋光刚&#x27;, province: &#x27;河南&#x27; &#125;,&#123; name: &#x27;李珂威&#x27;, province: &#x27;河南&#x27; &#125;] &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="删除数组项"><a href="#删除数组项" class="headerlink" title="删除数组项"></a>删除数组项</h3><h4 id="根据断言删除数组项"><a href="#根据断言删除数组项" class="headerlink" title="根据断言删除数组项"></a>根据断言删除数组项</h4><ul>
<li><code>remove</code>: 移除数组中 predicate（断言）返回为真值的所有元素，并返回移除元素组成的数组。predicate（断言） 会传入 3 个参数： (<code>value</code>, <code>index</code>, <code>array</code>)。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> evens = _.remove(array, <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(array) <span class="comment">// =&gt; [1, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(evens) <span class="comment">// =&gt; [2, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> students = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;杨俊宁&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;河南&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;宋光刚&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;河南&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;谢晧曜&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;江苏&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;李珂威&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;河南&#x27;</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> removedStudent = _.remove(students, <span class="function"><span class="params">student</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> student.province === <span class="string">&#x27;江苏&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(students)</span><br><span class="line"><span class="comment">// [&#123;name: &quot;杨俊宁&quot;, province: &quot;河南&quot;&#125;, &#123;name: &quot;宋光刚&quot;, province: &quot;河南&quot;&#125;, &#123;name: &quot;李珂威&quot;, province: &quot;河南&quot;&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(removedStudent)</span><br><span class="line"><span class="comment">// [&#123;name: &quot;谢晧曜&quot;, province: &quot;江苏&quot;&#125;]</span></span><br></pre></td></tr></table></figure>

<h4 id="根据给定值删除数组项"><a href="#根据给定值删除数组项" class="headerlink" title="根据给定值删除数组项"></a>根据给定值删除数组项</h4><ul>
<li><code>_.pull(array, [values])</code>: 移除数组 array 中所有和给定值相等的元素，使用 SameValueZero 进行全等比较。</li>
<li><code>_.pullAll(array, values)</code>: 这个方法类似 _.pull，区别是这个方法接收一个要移除值的数组。</li>
<li><code>_.pullAllBy(array, values, [iteratee=_.identity])</code>: 这个方法类似于 <code>_.pullAll</code> ，区别是这个方法接受一个 <code>iteratee</code>（迭代函数） 调用 <code>array</code> 和 <code>values</code>的每个值以产生一个值，通过产生的值进行了比较。<code>iteratee</code> 会传入一个参数： (<code>value</code>)。</li>
<li><code>_.pullAllWith(array, values, [comparator])</code>: 这个方法类似于 <code>_.pullAll</code>，区别是这个方法接受 <code>comparator</code> 调用 <code>array</code> 中的元素和 <code>values</code> 比较。<code>comparator</code> 会传入两个参数：(<code>arrVal</code>, <code>othVal</code>)。</li>
</ul>
<blockquote>
<p>pull 系列和 difference 系列不同之处在于 pull 系列方法会改变数组 array</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pull</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">_.pull(array, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(array) <span class="comment">// [1, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pullAll</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">_.pullAll(array, [<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">console</span>.log(array) <span class="comment">// [1, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pullAllBy</span></span><br><span class="line"><span class="keyword">var</span> array = [&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;]</span><br><span class="line">_.pullAllBy(array, [&#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;], <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(array) <span class="comment">// [&#123; &#x27;x&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 1 &#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pullAllWith</span></span><br><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">5</span>, <span class="attr">y</span>: <span class="number">6</span> &#125;,</span><br><span class="line">]</span><br><span class="line">_.pullAllWith(array, [&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">4</span> &#125;], _.isEqual)</span><br><span class="line"><span class="built_in">console</span>.log(array) <span class="comment">// [&#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 5, &#x27;y&#x27;: 6 &#125;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>_.pullAt(array, [indexes])</code>: 根据索引 <code>indexes</code>，移除 <code>array</code> 中对应的元素，并返回被移除元素的数组。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>]</span><br><span class="line"><span class="keyword">var</span> evens = _.pullAt(array, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array) <span class="comment">// [5, 15]</span></span><br><span class="line"><span class="built_in">console</span>.log(evens) <span class="comment">// [10, 20]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>_.without(array, [values])</code>: 创建一个剔除所有给定值的新数组，剔除值的时候，使用 SameValueZero 做相等比较。不像 <code>_.pull</code>, 这个方法会返回一个新数组。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line">_.without([<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><ul>
<li><code>_.uniq(array)</code>: 创建一个去重后的 array 数组副本。使用了 SameValueZero 做等值比较。只有第一次出现的元素才会被保留。</li>
<li><code>_.uniqBy(array, [iteratee=_.identity])</code>: 这个方法类似 <code>_.uniq</code> ，除了它接受一个 <code>iteratee</code>（迭代函数），调用每一个数组（<code>array</code>）的每个元素以产生唯一性计算的标准。<code>iteratee</code> 调用时会传入一个参数：(<code>value</code>)。</li>
<li><code>_.uniqWith(array, [comparator])</code>: 这个方法类似 <code>_.uniq</code>， 除了它接受一个 <code>comparator</code> 调用比较 <code>array</code> 数组的每一个元素。 <code>comparator</code> 调用时会传入 2 个参数：(<code>arrVal</code>, <code>othVal</code>)。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uniq</span></span><br><span class="line">_.uniq([<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// [2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uniqBy</span></span><br><span class="line">_.uniqBy([<span class="number">2.1</span>, <span class="number">1.2</span>, <span class="number">2.3</span>], <span class="built_in">Math</span>.floor) <span class="comment">// [2.1, 1.2]</span></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.uniqBy([&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;], <span class="string">&#x27;x&#x27;</span>) <span class="comment">// [&#123; &#x27;x&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 2 &#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uniqWith</span></span><br><span class="line"><span class="keyword">var</span> objects = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;,</span><br><span class="line">]</span><br><span class="line">_.uniqWith(objects, _.isEqual) <span class="comment">// [&#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 2, &#x27;y&#x27;: 1 &#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><ul>
<li><code>_.sortBy(collection, [iteratees=[_.identity]])</code>: 创建一个元素数组。 以 <code>iteratee</code> 处理的结果升序排序。 这个方法执行稳定排序，也就是说相同元素会保持原始排序。 <code>iteratees</code> 调用1个参数：(<code>value</code>)。可以使用 <code>Array.prototype.reverse</code> 方法倒序</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">  &#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;fred&#x27;</span> &#125;, <span class="attr">age</span>: <span class="number">48</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;barney&#x27;</span> &#125;, <span class="attr">age</span>: <span class="number">36</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;fred&#x27;</span> &#125;, <span class="attr">age</span>: <span class="number">40</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;barney&#x27;</span> &#125;, <span class="attr">age</span>: <span class="number">34</span> &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.sortBy(users, <span class="string">&#x27;user.name&#x27;</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *  &#123;age: 34, user: &quot;barney&quot;&#125;,</span></span><br><span class="line"><span class="comment"> *  &#123;age: 36, user: &quot;barney&quot;&#125;,</span></span><br><span class="line"><span class="comment"> *  &#123;age: 40, user: &quot;fred&quot;&#125;,</span></span><br><span class="line"><span class="comment"> *  &#123;age: 48, user: &quot;fred&quot;&#125;</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h3><ul>
<li><code>_.flatten(array)</code>: 减少一级 <code>array</code> 嵌套深度。</li>
<li><code>_.flattenDeep(array)</code>: 将 <code>array</code> 递归为一维数组。</li>
<li><code>_.flattenDepth(array, [depth=1])</code>: 根据 <code>depth</code> 递归减少 <code>array</code> 的嵌套层级</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flatten</span></span><br><span class="line">_.flatten([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]) <span class="comment">// [1, 2, [3, [4]], 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flattenDeep</span></span><br><span class="line">_.flattenDeep([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flattenDepth</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]</span><br><span class="line">_.flattenDepth(array, <span class="number">1</span>) <span class="comment">// [1, 2, [3, [4]], 5]</span></span><br><span class="line">_.flattenDepth(array, <span class="number">2</span>) <span class="comment">// [1, 2, 3, [4], 5]</span></span><br><span class="line">_.flattenDepth(array, <span class="number">3</span>) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="获取部分元素"><a href="#获取部分元素" class="headerlink" title="获取部分元素"></a>获取部分元素</h3><ul>
<li><code>_.initial(array)</code>: 获取数组 <code>array</code> 中除了最后一个元素之外的所有元素（去除数组array中的最后一个元素）。</li>
<li><code>_.tail(array)</code>: 获取除了 <code>array</code> 数组第一个元素以外的全部元素。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>指南</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《JavaScript高级程序设计》阅读笔记</title>
    <url>/2020/02/JavaScript%20%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="https://i.loli.net/2020/02/06/nKlMCA4agtzHc6R.png" height="300">

<a id="more"></a>

<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>所谓标识符，就是指变量、函数、属性的名字、或者函数的参数。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>ECMAScript 变量时松散类型的，所谓松散类型就是可以用来保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符而已。</p>
<blockquote>
<p>变量只是指向保存值的栈内存地址的指针而已</p>
</blockquote>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>ECMAScript 中有 5 中简单的数据类型（也称为基本数据类型）: <code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code> 和 <code>String</code>。还有 1 中复杂数据类型（也称为引用数据类型）—— <code>Object</code>，<code>Object</code> 本质上是由一组无序名值对组成的。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>ECMAScript 对象其实就是一组数据和功能的集合。对象可以通过执行 <code>new</code> 操作符跟要创建的对象类型的名称来创建。</p>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>ECMA-262 描述了一组用于操作数据值的操作符，包括算术操作符、位操作符、关系操作符和相等操作符。ECMAScript 操作符的与众不同之处在于，它们能够适用于很多值，例如字符串、数字值、布尔值，甚至对象。不过在应用于对象时，相应地操作符通常都会调用对象的 <code>valueOf()</code> 和(或)</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数对任何语言来说都是一个核心概念。通过函数可以封装任意多条语句，而且可以再任何地方、任何时候调用执行。ECMAScript 中的函数使用 <code>function</code> 关键字来声明，后跟一组参数以及函数体。</p>
<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>ECMAScript 中所有的函数的参数都是按值传递的。也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制给另一个变量一样。<strong>基本类型值</strong>的传递如同基本类型变量的复制一样，而<strong>引用类型值</strong>的传递则如同引用类型变量的复制一样。</p>
<p>在向参数传递基本类型的值时，被传递的值会被复制给一个局部变量（即命名参数，或者用 ECMAScript 的概念来说，就是 arguments 对象中的一个元素）。在向参数传递引用类型的值时，会把这个值在内存地址中的地址复制给一个局部变量，因此这个局部变量的变化会反应在函数的外部。</p>
<h2 id="执行环境及作用域"><a href="#执行环境及作用域" class="headerlink" title="执行环境及作用域"></a>执行环境及作用域</h2><p>执行环境（execution context，为简单起见，有时也称为”环境“）是 JavaScript 中最为重要的一个概念。执行环境定义了变量和函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之关联的<strong>变量对象</strong>（variable object）。环境中定义的所有的所有变量和函数都保存在这个对象中。虽然我们编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。</p>
<p>全局执行环境是最外围的一个执行环境。根据 ECMAScript 实现所在的宿主环境不同，表示执行环境的对象也不一样。在 Web 浏览器中,全局执行环境被认为是 <code>window</code> 对象，因此所有全局变量和函数都是作为 <code>window</code> 对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出——例如关闭网页或浏览器——时才会被销毁）。</p>
<p>每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。ECMAScript 程序中的执行流正是由这个方便的机制控制着。</p>
<p>当代码在一个执行环境中执行时，会创建变量对象的一个作用域链。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象作为变量对象。活动对象在最开始时只包含一个变量，即 <code>arguments</code> 对象（这个对象在全局环境中是不存在的）。作用域链中的下一个变量对象来自包含（外部）环境，而下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p>
<p>标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）。</p>
<h2 id="查询标识符"><a href="#查询标识符" class="headerlink" title="查询标识符"></a>查询标识符</h2><p>当在某个环境中为了读取或写入而引入一个标识符时，必须通过搜索来确定该标识符实际代表什么。搜索过程从作用域的前端开始，向上逐级查询与给定名字匹配的标识符。如果在局部环境中找到了该标识符，搜索过程停止，变量就绪。如果在局部环境中没有找到该变量名，则继续沿作用域链向上搜索。搜索过程将一直追溯到全局环境的变量对象。如果在全局环境中也没找到这个标识符，则意味着该变量尚未声明。</p>
<h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>JavaScript 具有自动垃圾收集机制，也就是说，执行环境会负责管理代码执行过程中使用的内存。而在 C 和 C++ 之类的语言中，开发人员的一项基本任务就是手工跟踪内存的使用情况，这是造成许多问题的一个根源。在编写 JavaScript 程序时。开发人员不再关心内存使用问题，所需内存的分配以及无用内存的回收完全实现了自动管理。这种垃圾收集机制的原理其实很简单：找出那些不再使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），周期性地执行这一操作。</p>
<h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>引用类型的值（对象）是引用类型的一个实例。在 ECMAScript 中，引用类型是一种数据结构，用于将数据和功能组织在一起。引用类型有时也被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。</p>
<blockquote>
<p>虽然引用类型与类看起来相似，但它们并不是相同的概念。</p>
</blockquote>
<p>对象是某个特定引用类型的实例。新对象是使用 <code>new</code> 操作符后跟一个构造函数来创建。构造函数本身就是一个函数，只不过这个函数是处于创建新对象的目的而定义的。请看下面这行代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure>

<p>这行代码创建了 <code>Object</code> 引用类型的一个新实例，然后把该实例保存在了变量 <code>person</code> 中。使用的构造函数是 <code>Object</code>，它只为新对象定义了默认的属性和方法。 ECMAScript 提供了很多原生引用类型（例如 <code>Object</code>），以便开发人员用以实现常见的计算任务。</p>
<h3 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h3><p>到目前为止，我们看到的大多数引用类型值都是 <code>Object</code> 类型的实例；而且，<code>Object</code> 也是 ECMAScript 中使用最多的一个类型。虽然 <code>Object</code> 的实例不具备多少功能，但对于在应用程序中存储和传输数据而言，它们确实是非常理想的选择。</p>
<h3 id="Array-类型"><a href="#Array-类型" class="headerlink" title="Array 类型"></a>Array 类型</h3><p>除了 <code>Object</code> 之外，<code>Array</code> 类型恐怕是 ECMAScript 中最常用的类型了。而且，ECMAScript 中的数组与其他多数语言中的数组有着相当大的区别。虽然 ECMAScript 数组与其他语言中的数组都是数据的有序集合，但与其他语言不同的是，ECMAScript 数组的每一项可以保存任何类型的数据。也就是说，可以用数组的第一个位置来保存字符串，用第二个位置保存数值，用第三个位置保存对象，以此类推。而且 ECMAScript 数组的大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。</p>
<h3 id="Date-类型"><a href="#Date-类型" class="headerlink" title="Date 类型"></a>Date 类型</h3><blockquote>
<p>推荐使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lhbWt1bi9kYXlqcw==" title="https://github.com/iamkun/dayjs">dayjs<i class="fa fa-external-link"></i></span> 处理时间相关的操作。</p>
</blockquote>
<p>ECMAScript 中的 <code>Date</code> 类型是在早期 Java 中的 <code>java.util.Date</code> 类型基础上构建的。为此，<code>Date</code> 类型使用自 UTC 1970 年 1 月 1 日午夜（零时）开始经过的毫秒数来保存日期。在使用这种数据存储格式的条件下，<code>Date</code> 类型保存的日期能够精确到 1970 年 1 月 1 日之前或之后的 2851616 年。</p>
<p>日期字符串在不同浏览器有不同的实现，例如 <code>new Date(&#39;1970-1-1&#39;)</code> 在 IE、Safari、Android 上是 Invalid Date，而在 Chrome 上是能正常解析的。请务必使用 <code>new Date(&#39;1970/1/1&#39;)</code> 或 <code>new Date(1970, 1, 1)</code> 代替 <code>new Date(&#39;1970-1-1&#39;)</code></p>
<h3 id="RegExp-类型"><a href="#RegExp-类型" class="headerlink" title="RegExp 类型"></a>RegExp 类型</h3><blockquote>
<p>推荐在线课程 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1vb2MuY29tL2xlYXJuLzcwNg==" title="https://www.imooc.com/learn/706">JavaScript 正则表达式<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>ECMAScript 通过 RegExp 类型来支持正则表达式。使用下面类似 Perl 的语法，就可以创建一个正则表达式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> expression = <span class="regexp">/ pattern /</span> flags</span><br></pre></td></tr></table></figure>

<p>其中的模式（pattern）部分可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、向前查找以及反向引用。每个正则表达式都可带有一个或多个标志（flags），用以标明正则表达式的行为。正则表达式的匹配模式支持下列 3 个标志：</p>
<ul>
<li><code>g</code>: 表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；</li>
<li><code>i</code>: 表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；</li>
<li><code>m</code>: 表示多行（multiline）模式，即在到达一行文本末尾时还会继续朝查找下一行中是否存在与模式匹配的项。</li>
</ul>
<h3 id="Function-类型"><a href="#Function-类型" class="headerlink" title="Function 类型"></a>Function 类型</h3><p>说起来 ECMAScript 中什么最有意思，我想莫过于函数了——而有意思的根源，则在于函数实际上是对象。每个函数都是 <code>Function</code> 类型的实例，而且都与其他引用类型一样具有属性和方法。由于函数是对象，因此函数名实际上也是一个指向函数对象的指针，不会与某个函数绑定。函数通常是使用函数声明语法定义的，如下面的例子所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这与下面使用函数表达式定义函数的方式几乎相差无几：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="函数的属性和方法"><a href="#函数的属性和方法" class="headerlink" title="函数的属性和方法"></a>函数的属性和方法</h2><ul>
<li><code>length</code>: 表示函数希望接收的命名参数的个数；</li>
<li><code>prototype</code>: 在 ECMAScript 中，<code>prototype</code> 属性时不可枚举的，因此使用 <code>for-in</code> 无法发现</li>
<li><code>apply</code>: <code>apply</code> 方法接收两个参数，一个是在其中运行函数的作用域，另一个是参数数组。</li>
<li><code>call</code>: <code>call</code> 方法与 <code>apply</code> 方法的作用相同，它们的区别仅在于接收参数的方式不同。对于 <code>call()</code> 方法而言，第一个参数是 <code>this</code> 值没有变化，变化的是其余参数都直接传递给函数。</li>
<li><code>bind</code>: 这个方法会创建一个函数实例，其中 <code>this</code> 值会被绑定到传给 <code>bind()</code> 函数的值。</li>
</ul>
<h2 id="toString、toLocalString、valueOf"><a href="#toString、toLocalString、valueOf" class="headerlink" title="toString、toLocalString、valueOf"></a>toString、toLocalString、valueOf</h2><table>
<thead>
<tr>
<th></th>
<th>toString</th>
<th>toLocalString</th>
<th>valueOf</th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串</td>
<td>同 toString</td>
<td>返回的还是数组</td>
</tr>
<tr>
<td>Date</td>
<td>返回带有时区信息的日期和时间</td>
<td>会按照与浏览器设置的地区相适应的格式返回日期和时间</td>
<td>返回日期的毫秒表示</td>
</tr>
<tr>
<td>RegExp</td>
<td>返回正则表达式的字面量</td>
<td>同 toString</td>
<td>返回正则表达式本身</td>
</tr>
<tr>
<td>Function</td>
<td>返回函数的代码</td>
<td>同 toString</td>
<td>同 toString</td>
</tr>
</tbody></table>
<h2 id="访问对象属性"><a href="#访问对象属性" class="headerlink" title="访问对象属性"></a>访问对象属性</h2><p>一般来说，访问对象属性时使用的都是点表示法，这也是很多面向对象语言中通用的语法。不过，在 JavaScript 中也可以使用方括号表示法来访问对象的属性。在使用方括号语法时，应该将要访问的属性以字符串的形式放在方括号中，如下面的例子所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(person[<span class="string">&quot;name&quot;</span>]); <span class="comment">// 张三</span></span><br></pre></td></tr></table></figure>

<p>从功能上看，这两种访问对象属性的方法没有任何区别。但方括号语法的主要优点是可以通过变量来访问属性，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> propertyName = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person[propertyName]); <span class="comment">// &quot;张三&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果属性名中包含会导致语法错误的字符，或者属性名使用的是关键字或保留字，也可以使用方括号表示法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person[<span class="string">&quot;first name&quot;</span>] = <span class="string">&quot;张三&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>由于 <code>&quot;first name&quot;</code> 中包含一个空格，所以不能使用点表示法来访问它。然后，属性名中是可以包含非字母非数字的，这时候就可以使用方括号表示法来访问他们。</p>
<p>通常，除非必须使用变量来访问属性，否则我们建议使用点表示法。</p>
<h2 id="引用类型与基本包装类型的区别"><a href="#引用类型与基本包装类型的区别" class="headerlink" title="引用类型与基本包装类型的区别"></a>引用类型与基本包装类型的区别</h2><p>引用类型与基本包装类型的主要区别就是对象的生存期。使用 <code>new</code> 操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。这意味着我们不能在运行时为基本类型添加属性和方法。</p>
<h2 id="单体内置对象"><a href="#单体内置对象" class="headerlink" title="单体内置对象"></a>单体内置对象</h2><p>ECMAScript-262 对内置对象的定义是：”由 ECMAScript 实现提供的、不依赖于宿主环境的对象，这些对象在 ECMAScript 程序执行之前就已经存在了。“意思就是说，开发人员不必显式地实例化内置对象，因为它们已经实例化了。ECMAScript 定义了两个单体内置对象：Global 和 Math。</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象（Object-Oriented，OO）的语言有一个标志，那就是它们都有类的概念，而通过类可以创建任意多个具有属性和方法的对象。ECMAScript 中没有类的概念，因此它的对象也与基于类的语言中的对象有所不同。</p>
<p>ECMA-262 把对象定义为：”无序属性的集合，其属性可以包含基础值、对象或者函数。“ 严格来讲，这就相当于说是对象时一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。正因为这样，我们可以把 ECMAScript 的对象想象成散列表：无非就是一组键值对，其中值可以是数据或函数。</p>
<p>每个对象都是基于一个引用类型创建的，这个引用类型可以是原生类型，也可以是开发人员定义的类型。</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数与其他函数的唯一区别，就在于调用它们的方式不同。不过，构造函数毕竟也是函数，不存在定义构造函数的特殊语法。任何函数，只要通过 <code>new</code> 操作符来调用，那他就可以作为构造函数；而任何函数，如果不通过 <code>new</code> 操作符来调用，那它跟普通的函数也不会有什么两样。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当作普通函数调用</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;杨俊宁&quot;</span>);</span><br><span class="line">person.sayName(); <span class="comment">// 杨俊宁</span></span><br><span class="line"><span class="comment">// 当作普通函数调用</span></span><br><span class="line">Person(<span class="string">&quot;杨俊宁&quot;</span>); <span class="comment">// 添加到 window</span></span><br><span class="line"><span class="built_in">window</span>.sayName(); <span class="comment">// 杨俊宁</span></span><br><span class="line"><span class="comment">// 在另一个对象的作用域中调用</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Person.call(o, <span class="string">&quot;杨小然&quot;</span>);</span><br><span class="line">o.sayName(); <span class="comment">// 杨小然</span></span><br></pre></td></tr></table></figure>

<h3 id="原型-prototype"><a href="#原型-prototype" class="headerlink" title="原型 prototype"></a>原型 prototype</h3><p>我们创建的每个函数都有一个 <code>prototype</code>(原型)属性，这个属性是一个指针,指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。如果按照字面意思来理解，那么 <code>prototype</code> 就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是将这些信息直接添加到原型对象中。</p>
<h3 id="查找对象属性"><a href="#查找对象属性" class="headerlink" title="查找对象属性"></a>查找对象属性</h3><p>每当代码读取某个对象的属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从对象实例本身开始。如果在实例中找到了具有给定名字的属性，则返回该属性的值；如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性。如果在原型对象中找到了这个属性，则返回该属性的值。这就是多个对象实例共享原型所保存的属性和方法的原理。</p>
<blockquote>
<p>原型对象最初只包含 <code>constructor</code> 属性，而该属性也是共享的，因此可以通过对象实例访问。</p>
</blockquote>
<p>虽然可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值。如果我们在实例中添加了一个属性，而该属性与实例原型中的一个属性同名，那我们就在实例中创建该属性，该属性将会屏蔽原型中的那个属性。换句话说，添加这个属性只会阻止我们访问原型中的那个属性，但不会修改那个属性。即使将这个属性设置为 <code>null</code>，也只会在实例中设置这个属性，而不会回复其指向原型的连接。不过，使用 <code>delete</code> 操作符则可以完全删除实例属性，从而让我们能够重新访问原型中的属性。</p>
<h3 id="proto-、Object-getPrototypeOf"><a href="#proto-、Object-getPrototypeOf" class="headerlink" title="__proto__、Object.getPrototypeOf"></a><code>__proto__</code>、<code>Object.getPrototypeOf</code></h3><p>创建了自定义的构造函数之后，其原型对象默认只会取得 <code>constructor</code> 属性；至于其他方法，则都是从 <code>Object</code> 集成而来的。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。ECMAScript-262 第 5 版中管这个指针叫 <code>[[Prototype]]</code>。虽然在脚本中没有标准的方式访问 <code>[[Prototype]]</code>，但 Firefox、Safari 和 Chrome 在每个对象上都支持一个属性 <code>__proto__</code>；而在其他实现中，这个属性对脚本则是完全不可见的。不过要明确的真正重要得一点就是，这个连接存在于实例与构造函数的原型对象之间，而不是实例于构造函数之间。</p>
<p>我们可以随时为原型添加属性和方法，并且修改能够立即在所有对象实例上反映出来，但如果是重写整个原型对象，那么情况就不一样了。我们知道，调用构造函数时会为实例添加一个指向最初原型的 <code>[[Prototype]]</code> 指针，而把原型修改为另外一个对象就等于切断了构造函数与最初原型之间的联系。请记住：实例中的指针仅指向原型，而不指向构造函数。</p>
<p>虽然在所有的实现中都无法访问到 <code>[[Prototype]]</code>，但可以通过 <code>Object.getPrototypeOf()</code> 方法来确定对象之间是否存在这种关系。从本质上讲，如果 <code>[[Prototype]]</code> 指向调用 <code>isPrototypeOf()</code> 方法的对象，那么这个方法就返回 true。</p>
<p>ECMAScript 5 增加了一个新方法，叫 <code>Object.getPrototypeOf()</code>，在所有支持的实现中，这个方法返回 <code>[[Prototype]]</code> 的值。</p>
<h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><p>创建自定义类型的最常见方式，就是组合使用构造函数模式与原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享属性。结果，每个实例都会有自己的一份实例属性的副本，但同时有共享着对方法的引用，最大限度地节省了内存。另外，这种混杂模式还支持向构造函数传递参数；可谓是集两种模式之长。下面的代码重写了前面的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.job = job;</span><br><span class="line">  <span class="built_in">this</span>.friends = [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  sayName: function() &#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>, <span class="string">&quot;Software Engineer&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>, <span class="string">&quot;Doctor&quot;</span>);</span><br><span class="line"></span><br><span class="line">person1.friends.push(<span class="string">&quot;Van&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1.friends); <span class="comment">// [&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.friends); <span class="comment">// [&quot;Shelby&quot;, &quot;Court&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.friends === person2.friends); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName === person2.sayName); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，实例属性都是在构造函数中定义的，而由所有实例共享的属性 <code>constructor</code> 和方法 <code>sayName()</code> 则是在原型中定义的。而修改了 <code>person1.friends</code>(向其中添加一个新字符串)，并不会影响到 <code>person2.friends</code>，因为它们分别引用了不同的数组。</p>
<p>这种构造函数与原型混成的模式，是目前在 ECMAScript 中使用最广泛、认同度最高的一种创建自定义类型的方法。可以说，这是用来定义引用类型的一种默认模式。</p>
<h3 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h3><p>有其他 OO 语言经验的开发人员在看到独立的构造函数和原型时，很可能会感到非常困惑。动态原型模式正式致力于解决这个问题的一个方案，它把所有信息都封装在了构造函数中，而通过在构造函数中初始化原型（仅在必要的情况下），又保持了同时使用构造函数和原型的优点。换句话说，可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。来看一个例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">  <span class="built_in">this</span>.job = job</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span>.sayName !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">&#x27;Nicholas&#x27;</span>, <span class="number">29</span>, <span class="string">&#x27;Software Engineer&#x27;</span>)</span><br><span class="line">friend.sayName() <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是 OO 语言中的一个最为人津津乐道的概念。许多 OO 语言都支持两种继承方式：接口与继承和实现继承。接口继承只继承方法签名，而实现继承则继承实际的方法。如前所述，由于函数没有签名，在 ECMAScript 中无法实现接口继承。ECMAScript 只支持实现继承，而且其实实现继承主要是依靠原型链来实现的</p>
<h3 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h3><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>ECMAScript 描述了原型链的概念，并将原型链作为实现继承的主要方法。其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。简单回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针 <code>[[Prototype]]</code>。那么，假如我们让原型对象等于另一个类型的实例，结果会怎么样？显然，此时的原型对象将包含指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就构成了实例于原型的链条。这就是所谓原型链的基本概念。</p>
<h4 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h4><p>在解决原型中包含引用类型值所带来的问题的过程中，开发人员开始使用一种叫做借用构造函数（constructor stealing）的技术（有时候也叫做伪造对象或经典继承）。别忘了，函数只不过是在特定环境中执行代码的对象，因此通过使用 <code>apply()</code> 和 <code>call()</code> 方法也可以在（将来）新创建的对象上执行构造函数。</p>
<h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><p>组合继承（combination inheritance），有时候也叫做伪经典继承，指的是将来原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种集成模式。其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。</p>
<p>组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点，称为 JavaScript 中最常用的继承模式。而且，<code>instanceOf</code> 和 <code>isPrototypeOf()</code> 也能够用于识别基于组合继承创建的对象。</p>
<h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><ul>
<li><code>var</code>、<code>let</code>、<code>const</code></li>
<li><code>null</code> 和 <code>undefined</code></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wN2JhMmIwYzhmY2E=" title="https://www.jianshu.com/p/07ba2b0c8fca">Object.defineProperty()<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>React Navigation 5 最佳实践</title>
    <url>/2020/02/React%20Navigation%205%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/02/23/caAngkCQdUxlp8L.png" alt=""></p>
<blockquote>
<p>文章示例源码: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL3JlYWN0LW5hdmlnYXRpb24tYmVzdC1wcmFjdGljZQ==" title="https://github.com/youngjuning/react-navigation-best-practice">https://github.com/youngjuning/react-navigation-best-practice<i class="fa fa-external-link"></i></span></p>
</blockquote>
<a id="more"></a>

<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn add @react-navigation/native @react-navigation/stack @react-navigation/bottom-tabs react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>为了完成  <code>react-native-screens</code> 的安装，添加下面两行代码到 <code>android/app/build.gradle</code> 文件的 <code>dependencies</code> 部分中：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;androidx.appcompat:appcompat:1.1.0-rc01&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02&#x27;</span></span><br></pre></td></tr></table></figure>

<p>为了完成  <code>react-native-gesture-handler</code> 的安装, 在入口文件的顶部添加下面的代码, 比如 <code>index.js</code> 或 <code>App.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;react-native-gesture-handler&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>现在，我们需要把整个 App用 <code>NavigationContainer</code>包裹：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NavigationContainer &#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;NavigationContainer&gt;</span><br><span class="line">      &#123;<span class="comment">/* Rest of your app code */</span>&#125;</span><br><span class="line">    &lt;/NavigationContainer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>

<h2 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  SafeAreaView,</span><br><span class="line">  StatusBar,</span><br><span class="line">  BackHandler,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NavigationContainer, useFocusEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createBottomTabNavigator&#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/bottom-tabs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createStackNavigator, HeaderBackButton&#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/stack&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;IconOutline&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons-react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> IconWithBadge <span class="keyword">from</span> <span class="string">&#x27;./IconWithBadge&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> HeaderButtons <span class="keyword">from</span> <span class="string">&#x27;./HeaderButtons&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> getActiveRouteName <span class="keyword">from</span> <span class="string">&#x27;./getActiveRouteName&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> getScreenOptions <span class="keyword">from</span> <span class="string">&#x27;./getScreenOptions&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;navigationRef&#125; <span class="keyword">from</span> <span class="string">&#x27;./NavigationService&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HomeScreen = <span class="function">(<span class="params">&#123;navigation, route&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  navigation.setOptions(&#123;</span><br><span class="line">    headerLeft: <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">      &lt;HeaderBackButton</span><br><span class="line">        &#123;...props&#125;</span><br><span class="line">        onPress=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;不能再返回了！&#x27;</span>);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    ),</span><br><span class="line">    headerRight: <span class="function">() =&gt;</span> (</span><br><span class="line">      &lt;HeaderButtons&gt;</span><br><span class="line">        &#123;<span class="comment">/* title、iconName、onPress、IconComponent、iconSize、color */</span>&#125;</span><br><span class="line">        &lt;HeaderButtons.Item</span><br><span class="line">          title=<span class="string">&quot;添加&quot;</span></span><br><span class="line">          iconName=<span class="string">&quot;plus&quot;</span></span><br><span class="line">          onPress=&#123;<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;点击了添加按钮&#x27;</span>)&#125;</span><br><span class="line">          iconSize=&#123;<span class="number">24</span>&#125;</span><br><span class="line">          color=<span class="string">&quot;#ffffff&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/HeaderButtons&gt;</span><br><span class="line">    ),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  useFocusEffect(</span><br><span class="line">    React.useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Do something when the screen is focused</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Do something when the screen is unfocused</span></span><br><span class="line">        <span class="comment">// Useful for cleanup functions</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;, []),</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> &#123;author&#125; = route.params || &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;StatusBar barStyle=<span class="string">&quot;dark-content&quot;</span> /&gt;</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text&gt;Home Screen&lt;/Text&gt;</span><br><span class="line">        &lt;Text&gt;&#123;author&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">          type=<span class="string">&quot;warning&quot;</span></span><br><span class="line">          <span class="comment">// 使用 setOptions 更新标题</span></span><br><span class="line">          onPress=&#123;<span class="function">() =&gt;</span> navigation.setOptions(&#123;<span class="attr">headerTitle</span>: <span class="string">&#x27;Updated!&#x27;</span>&#125;)&#125;&gt;</span><br><span class="line">          Update the title</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">          type=<span class="string">&quot;primary&quot;</span></span><br><span class="line">          onPress=&#123;<span class="function">() =&gt;</span></span><br><span class="line">            <span class="comment">// 跳转到指定页面，并传递两个参数</span></span><br><span class="line">            navigation.navigate(<span class="string">&#x27;DetailsScreen&#x27;</span>, &#123;</span><br><span class="line">              otherParam: <span class="string">&#x27;anything you want here&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;&gt;</span><br><span class="line">          Go to DetailsScreen</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">          type=<span class="string">&quot;warning&quot;</span></span><br><span class="line">          onPress=&#123;<span class="function">() =&gt;</span> navigation.navigate(<span class="string">&#x27;SafeAreaViewScreen&#x27;</span>)&#125;&gt;</span><br><span class="line">          Go SafeAreaViewScreen</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">          type=<span class="string">&quot;primary&quot;</span></span><br><span class="line">          onPress=&#123;<span class="function">() =&gt;</span></span><br><span class="line">            navigation.navigate(<span class="string">&#x27;CustomAndroidBackButtonBehaviorScreen&#x27;</span>)</span><br><span class="line">          &#125;&gt;</span><br><span class="line">          Go CustomAndroidBackButtonBehavior</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DetailsScreen = <span class="function">(<span class="params">&#123;navigation, route&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 通过 props.route.params 接收参数</span></span><br><span class="line">  <span class="keyword">const</span> &#123;itemId, otherParam&#125; = route.params;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;Text&gt;Details Screen&lt;/Text&gt;</span><br><span class="line">      &lt;Text&gt;itemId: &#123;itemId&#125;&lt;/Text&gt;</span><br><span class="line">      &lt;Text&gt;otherParam: &#123;otherParam&#125;&lt;/Text&gt;</span><br><span class="line">      &lt;Button</span><br><span class="line">        type=<span class="string">&quot;primary&quot;</span></span><br><span class="line">        <span class="comment">// 返回上一页</span></span><br><span class="line">        onPress=&#123;<span class="function">() =&gt;</span> navigation.goBack()&#125;&gt;</span><br><span class="line">        Go back</span><br><span class="line">      &lt;/Button&gt;</span><br><span class="line">      &lt;Button</span><br><span class="line">        type=<span class="string">&quot;primary&quot;</span></span><br><span class="line">        <span class="comment">// 如果返回上一个页面需要传递参数，请使用 navigate 方法</span></span><br><span class="line">        onPress=&#123;<span class="function">() =&gt;</span> navigation.navigate(<span class="string">&#x27;HomeScreen&#x27;</span>, &#123;<span class="attr">author</span>: <span class="string">&#x27;杨俊宁&#x27;</span>&#125;)&#125;&gt;</span><br><span class="line">        Go back <span class="keyword">with</span> Params</span><br><span class="line">      &lt;/Button&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SettingsScreen = <span class="function">(<span class="params">&#123;navigation, route&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;SafeAreaView</span><br><span class="line">      style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">justifyContent</span>: <span class="string">&#x27;space-between&#x27;</span>, <span class="attr">alignItems</span>: <span class="string">&#x27;center&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">      &lt;Text&gt;This is top text.&lt;/Text&gt;</span><br><span class="line">      &lt;Text&gt;This is bottom text.&lt;/Text&gt;</span><br><span class="line">    &lt;/SafeAreaView&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SafeAreaViewScreen = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;SafeAreaView</span><br><span class="line">      style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">justifyContent</span>: <span class="string">&#x27;space-between&#x27;</span>, <span class="attr">alignItems</span>: <span class="string">&#x27;center&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">      &lt;Text&gt;This is top text.&lt;/Text&gt;</span><br><span class="line">      &lt;Text&gt;This is bottom text.&lt;/Text&gt;</span><br><span class="line">    &lt;/SafeAreaView&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CustomAndroidBackButtonBehaviorScreen = <span class="function">(<span class="params">&#123;navigation, route&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  useFocusEffect(</span><br><span class="line">    React.useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> onBackPress = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;物理返回键被拦截了！&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      BackHandler.addEventListener(<span class="string">&#x27;hardwareBackPress&#x27;</span>, onBackPress);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span></span><br><span class="line">        BackHandler.removeEventListener(<span class="string">&#x27;hardwareBackPress&#x27;</span>, onBackPress);</span><br><span class="line">    &#125;, []),</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;Text&gt;AndroidBackHandlerScreen&lt;/Text&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Stack = createStackNavigator();</span><br><span class="line"><span class="keyword">const</span> BottomTab = createBottomTabNavigator();</span><br><span class="line"><span class="keyword">const</span> BottomTabScreen = <span class="function">() =&gt;</span> (</span><br><span class="line">  &lt;BottomTab.Navigator</span><br><span class="line">    screenOptions=&#123;<span class="function">(<span class="params">&#123;route&#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">      tabBarIcon: <span class="function">(<span class="params">&#123;focused, color, size&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> iconName;</span><br><span class="line">        <span class="keyword">if</span> (route.name === <span class="string">&#x27;HomeScreen&#x27;</span>) &#123;</span><br><span class="line">          iconName = focused ? <span class="string">&#x27;apple&#x27;</span> : <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;IconWithBadge badgeCount=&#123;<span class="number">90</span>&#125;&gt;</span><br><span class="line">              &lt;IconOutline name=&#123;iconName&#125; size=&#123;size&#125; color=&#123;color&#125; /&gt;</span><br><span class="line">            &lt;/IconWithBadge&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (route.name === <span class="string">&#x27;SettingsScreen&#x27;</span>) &#123;</span><br><span class="line">          iconName = focused ? <span class="string">&#x27;twitter&#x27;</span> : <span class="string">&#x27;twitter&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">IconOutline</span> <span class="attr">name</span>=<span class="string">&#123;iconName&#125;</span> <span class="attr">size</span>=<span class="string">&#123;size&#125;</span> <span class="attr">color</span>=<span class="string">&#123;color&#125;</span> /&gt;</span></span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)&#125;</span><br><span class="line">    tabBarOptions=&#123;&#123;</span><br><span class="line">      activeTintColor: <span class="string">&#x27;tomato&#x27;</span>,</span><br><span class="line">      inactiveTintColor: <span class="string">&#x27;gray&#x27;</span>,</span><br><span class="line">    &#125;&#125;&gt;</span><br><span class="line">    &lt;Stack.Screen</span><br><span class="line">      name=<span class="string">&quot;HomeScreen&quot;</span></span><br><span class="line">      component=&#123;HomeScreen&#125;</span><br><span class="line">      options=&#123;&#123;<span class="attr">tabBarLabel</span>: <span class="string">&#x27;首页&#x27;</span>&#125;&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;Stack.Screen</span><br><span class="line">      name=<span class="string">&quot;SettingsScreen&quot;</span></span><br><span class="line">      component=&#123;SettingsScreen&#125;</span><br><span class="line">      options=&#123;&#123;<span class="attr">tabBarLabel</span>: <span class="string">&#x27;设置&#x27;</span>&#125;&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/BottomTab.Navigator&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> routeNameRef = React.useRef();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;NavigationContainer</span><br><span class="line">        ref=&#123;navigationRef&#125;</span><br><span class="line">        onStateChange=&#123;<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> previousRouteName = routeNameRef.current;</span><br><span class="line">          <span class="keyword">const</span> currentRouteName = getActiveRouteName(state);</span><br><span class="line">          <span class="keyword">if</span> (previousRouteName !== currentRouteName) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;[onStateChange]&#x27;</span>, currentRouteName);</span><br><span class="line">            <span class="keyword">if</span> (currentRouteName === <span class="string">&#x27;HomeScreen&#x27;</span>) &#123;</span><br><span class="line">              StatusBar.setBarStyle(<span class="string">&#x27;dark-content&#x27;</span>); <span class="comment">// 修改 StatusBar</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              StatusBar.setBarStyle(<span class="string">&#x27;dark-content&#x27;</span>); <span class="comment">// 修改 StatusBar</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// Save the current route name for later comparision</span></span><br><span class="line">          routeNameRef.current = currentRouteName;</span><br><span class="line">        &#125;&#125;&gt;</span><br><span class="line">        &lt;Stack.Navigator</span><br><span class="line">          initialRouteName=<span class="string">&quot;HomeScreen&quot;</span></span><br><span class="line">          <span class="comment">// 页面共享的配置</span></span><br><span class="line">          screenOptions=&#123;getScreenOptions()&#125;&gt;</span><br><span class="line">          &lt;Stack.Screen</span><br><span class="line">            name=<span class="string">&quot;BottomTabScreen&quot;</span></span><br><span class="line">            component=&#123;BottomTabScreen&#125;</span><br><span class="line">            options=&#123;&#123;<span class="attr">headerShown</span>: <span class="literal">false</span>&#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;Stack.Screen</span><br><span class="line">            name=<span class="string">&quot;DetailsScreen&quot;</span></span><br><span class="line">            component=&#123;DetailsScreen&#125;</span><br><span class="line">            options=&#123;&#123;<span class="attr">headerTitle</span>: <span class="string">&#x27;详情&#x27;</span>&#125;&#125; <span class="comment">// headerTitle 用来设置标题栏</span></span><br><span class="line">            initialParams=&#123;&#123;<span class="attr">itemId</span>: <span class="number">42</span>&#125;&#125; <span class="comment">// 默认参数</span></span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;Stack.Screen</span><br><span class="line">            name=<span class="string">&quot;SafeAreaViewScreen&quot;</span></span><br><span class="line">            component=&#123;SafeAreaViewScreen&#125;</span><br><span class="line">            options=&#123;&#123;<span class="attr">headerTitle</span>: <span class="string">&#x27;SafeAreaView&#x27;</span>&#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;Stack.Screen</span><br><span class="line">            name=<span class="string">&quot;CustomAndroidBackButtonBehaviorScreen&quot;</span></span><br><span class="line">            component=&#123;CustomAndroidBackButtonBehaviorScreen&#125;</span><br><span class="line">            options=&#123;&#123;<span class="attr">headerTitle</span>: <span class="string">&#x27;拦截安卓物理返回键&#x27;</span>&#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/Stack.Navigator&gt;</span><br><span class="line">      &lt;/NavigationContainer&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>路由名称的大小写无关紧要 – 你可以使用小写字母<code>home</code>或大写字母<code>Home</code>，这取决于你的喜好。 我们更喜欢将路由名称大写。 我们更喜欢利用我们的路由名称。</p>
</blockquote>
<blockquote>
<p>跳转方法有 <code>navigate</code>、 <code>push</code> 、<code>goBack</code>、<code>popToTop</code></p>
</blockquote>
<blockquote>
<p>可以用 <code>navigation.setParams</code> 方法更新页面的参数</p>
</blockquote>
<blockquote>
<p>我们可以通过 <code>options=&#123;(&#123; route, navigation &#125;) =&gt; (&#123; headerTitle: route.params.name &#125;)&#125;</code> 的方式在标题中使用参数</p>
</blockquote>
<blockquote>
<p>我们可以用 <code>navigation.setOptions</code> 更新页面配置</p>
</blockquote>
<ul>
<li><code>Stack.Navigator</code><ul>
<li><code>initialRouteName</code> : 用来配置 <code>Stack.Navigator</code> 的初始路由</li>
<li><code>screenOptions</code>: 页面共享配置对象</li>
</ul>
</li>
<li><code>Stack.Screen</code><ul>
<li><code>name</code>: 页面名</li>
<li><code>component</code>: 页面对应组件</li>
<li><code>options</code>: 页面配置对象</li>
<li><code>initialParams</code>: 默认参数</li>
</ul>
</li>
</ul>
<h2 id="HeaderButtons-js"><a href="#HeaderButtons-js" class="headerlink" title="HeaderButtons.js"></a>HeaderButtons.js</h2><p>使用 <code>react-navigation-header-buttons</code> 组件搭配任意 Icon 组件可以自定义自己的 Header Button 组件，我这里为了演示方便，使用了 <code>@ant-design/icons-react-native</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  HeaderButtons <span class="keyword">as</span> RNHeaderButtons,</span><br><span class="line">  HeaderButton <span class="keyword">as</span> RNHeaderButton,</span><br><span class="line">  Item,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-navigation-header-buttons&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;IconOutline&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons-react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HeaderButton = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;RNHeaderButton</span><br><span class="line">      &#123;...props&#125;</span><br><span class="line">      IconComponent=&#123;IconOutline&#125;</span><br><span class="line">      iconSize=&#123;props.iconSize || <span class="number">23</span>&#125;</span><br><span class="line">      color=&#123;props.color || <span class="string">&#x27;#000000&#x27;</span>&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HeaderButtons = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">RNHeaderButtons</span> <span class="attr">HeaderButtonComponent</span>=<span class="string">&#123;HeaderButton&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">HeaderButtons.Item = Item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HeaderButtons;</span><br></pre></td></tr></table></figure>

<h2 id="IconWithBadge-js"><a href="#IconWithBadge-js" class="headerlink" title="IconWithBadge.js"></a>IconWithBadge.js</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;View&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Badge&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> IconWithBadge = <span class="function">(<span class="params">&#123;children, badgeCount, ...props&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">24</span>, <span class="attr">height</span>: <span class="number">24</span>, <span class="attr">margin</span>: <span class="number">5</span>&#125;&#125;&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">      &lt;Badge</span><br><span class="line">        &#123;...props&#125;</span><br><span class="line">        style=&#123;&#123;<span class="attr">position</span>: <span class="string">&#x27;absolute&#x27;</span>, <span class="attr">right</span>: <span class="number">-6</span>, <span class="attr">top</span>: <span class="number">-3</span>&#125;&#125;</span><br><span class="line">        text=&#123;badgeCount&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> IconWithBadge;</span><br></pre></td></tr></table></figure>

<h2 id="getActiveRouteName-js"><a href="#getActiveRouteName-js" class="headerlink" title="getActiveRouteName.js"></a>getActiveRouteName.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the current screen from navigation state</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">state</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getActiveRouteName = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> route = state.routes[state.index];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (route.state) &#123;</span><br><span class="line">    <span class="comment">// Dive into nested navigators</span></span><br><span class="line">    <span class="keyword">return</span> getActiveRouteName(route.state);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> route.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getActiveRouteName;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="getScreenOptions-js"><a href="#getScreenOptions-js" class="headerlink" title="getScreenOptions.js"></a>getScreenOptions.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;TransitionPresets&#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/stack&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getScreenOptions = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    headerStyle: &#123;</span><br><span class="line">      backgroundColor: <span class="string">&#x27;#ffffff&#x27;</span>,</span><br><span class="line">    &#125;, <span class="comment">// 一个应用于 header 的最外层 View 的 样式对象</span></span><br><span class="line">    headerTintColor: <span class="string">&#x27;#000000&#x27;</span>, <span class="comment">// 返回按钮和标题都使用这个属性作为它们的颜色</span></span><br><span class="line">    headerTitleStyle: &#123;</span><br><span class="line">      fontWeight: <span class="string">&#x27;bold&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    headerBackTitleVisible: <span class="literal">false</span>,</span><br><span class="line">    headerTitleAlign: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    cardStyle: &#123;</span><br><span class="line">      flex: <span class="number">1</span>,</span><br><span class="line">      backgroundColor: <span class="string">&#x27;#f5f5f9&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    ...TransitionPresets.SlideFromRightIOS,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getScreenOptions;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="NavigationService-js"><a href="#NavigationService-js" class="headerlink" title="NavigationService.js"></a>NavigationService.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> navigationRef = React.createRef();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> navigate = <span class="function">(<span class="params">name, params</span>) =&gt;</span> &#123;</span><br><span class="line">  navigationRef.current &amp;&amp; navigationRef.current.navigate(name, params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getNavigation = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> navigationRef.current &amp;&amp; navigationRef.current;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  navigate,</span><br><span class="line">  getNavigation,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="页面生命周期与React-Navigation"><a href="#页面生命周期与React-Navigation" class="headerlink" title="页面生命周期与React Navigation"></a>页面生命周期与React Navigation</h2><p>一个包含 页面 A 和 B 的 StackNavigator ，当跳转到 A 时，<code>componentDidMount</code> 方法会被调用； 当跳转到 B 时，<code>componentDidMount</code> 方法也会被调用，但是 A 依然在堆栈中保持 被加载状态，他的 <code>componentWillUnMount</code> 也不会被调用。</p>
<p>当从 B 跳转到 A，B的 <code>componentWillUnmount</code> 方法会被调用，但是 A 的 <code>componentDidMount</code>方法不会被调用，应为此时 A 依然是被加载状态。</p>
<h2 id="React-Navigation-生命周期事件"><a href="#React-Navigation-生命周期事件" class="headerlink" title="React Navigation 生命周期事件"></a>React Navigation 生命周期事件</h2><h3 id="addListener"><a href="#addListener" class="headerlink" title="addListener"></a>addListener</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Profile</span>(<span class="params">&#123; navigation &#125;</span>) </span>&#123;</span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> unsubscribe = navigation.addListener(<span class="string">&#x27;focus&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Screen was focused</span></span><br><span class="line">      <span class="comment">// Do something</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> unsubscribe;</span><br><span class="line">  &#125;, [navigation]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ProfileContent</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="useFocusEffect"><a href="#useFocusEffect" class="headerlink" title="useFocusEffect"></a>useFocusEffect</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useFocusEffect(</span><br><span class="line">    React.useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Do something when the screen is focused</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Do something when the screen is unfocused</span></span><br><span class="line">        <span class="comment">// Useful for cleanup functions</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;, []),</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<h2 id="隐藏-Header-TabBar"><a href="#隐藏-Header-TabBar" class="headerlink" title="隐藏 Header/TabBar"></a>隐藏 Header/TabBar</h2><ul>
<li><code>headerMode:&quot;none&quot;</code>: hide Header for <code>Stack.Navigator</code></li>
<li><code>headerShown:false</code>: hide Header for <code>Stack.Screen</code></li>
<li><code>tabBar=&#123;() =&gt; null&#125;</code>: hide TabBar for <code>BottomTab.Navigator</code></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;NavigationContainer, useFocusEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createStackNavigator, TransitionPresets, HeaderBackButton&#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/stack&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createBottomTabNavigator&#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/bottom-tabs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Stack = createStackNavigator();</span><br><span class="line"><span class="keyword">const</span> BottomTab = createBottomTabNavigator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  &lt;NavigationContainer&gt;</span><br><span class="line">      &lt;Stack.Navigator headerMode=<span class="string">&quot;none&quot;</span>&gt;</span><br><span class="line">      &lt;Stack.Screen</span><br><span class="line">        ...</span><br><span class="line">        options=&#123;&#123; <span class="attr">headerShown</span>: <span class="literal">false</span> &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;Stack.Screen ...&gt;</span><br><span class="line">        &#123;<span class="function">() =&gt;</span> (</span><br><span class="line">          &lt;BottomTab.Navigator</span><br><span class="line">            ...</span><br><span class="line">               tabBar=&#123;<span class="function">() =&gt;</span> <span class="literal">null</span>&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            ...</span><br><span class="line">          &lt;/BottomTab.Navigator&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/Stack.Screen&gt;</span><br><span class="line">    &lt;/Stack.Navigator&gt;</span><br><span class="line">  &lt;/NavigationContainer&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TabBar-的-StatusBar-不同"><a href="#TabBar-的-StatusBar-不同" class="headerlink" title="TabBar 的 StatusBar 不同"></a>TabBar 的 StatusBar 不同</h2><p>一般我们会对特殊的那个TabBar进行处理。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getActiveRouteName = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> route = state.routes[state.index];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (route.state) &#123;</span><br><span class="line">    <span class="comment">// Dive into nested navigators</span></span><br><span class="line">    <span class="keyword">return</span> getActiveRouteName(route.state);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> route.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = React.useRef(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">        &#123;<span class="comment">/* 访问 ref.current?.navigate */</span>&#125;</span><br><span class="line">      &lt;NavigationContainer</span><br><span class="line">        ref=&#123;ref&#125;</span><br><span class="line">        onStateChange=&#123;<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> previousRouteName = ref.current;</span><br><span class="line">          <span class="keyword">const</span> currentRouteName = getActiveRouteName(state);</span><br><span class="line">          <span class="keyword">if</span> (previousRouteName !== currentRouteName) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;[onStateChange]&#x27;</span>, currentRouteName);</span><br><span class="line">            <span class="keyword">if</span> (currentRouteName === <span class="string">&#x27;HomeScreen&#x27;</span>) &#123;</span><br><span class="line">              StatusBar.setBarStyle(<span class="string">&#x27;dark-content&#x27;</span>);  <span class="comment">// 修改 StatusBar</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              StatusBar.setBarStyle(<span class="string">&#x27;dark-content&#x27;</span>);  <span class="comment">// 修改 StatusBar</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">      &lt;/NavigationContainer&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="监听安卓物理返回键"><a href="#监听安卓物理返回键" class="headerlink" title="监听安卓物理返回键"></a>监听安卓物理返回键</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;View, Text, BackHandler&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> CustomAndroidBackButtonBehaviorScreen = <span class="function">(<span class="params">&#123;navigation, route&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  useFocusEffect(</span><br><span class="line">    React.useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> onBackPress = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;物理返回键被拦截了！&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">      BackHandler.addEventListener(<span class="string">&#x27;hardwareBackPress&#x27;</span>, onBackPress);</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span></span><br><span class="line">        BackHandler.removeEventListener(<span class="string">&#x27;hardwareBackPress&#x27;</span>, onBackPress);</span><br><span class="line">    &#125;, []),</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;Text&gt;AndroidBackHandlerScreen&lt;/Text&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="在子组件中访问-navigation"><a href="#在子组件中访问-navigation" class="headerlink" title="在子组件中访问 navigation"></a>在子组件中访问 <code>navigation</code></h2><p>我们可以通过 <code>useNavigation()</code> hook 来访问 navigation，再也不用传递多层 <code>navigation</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useNavigation &#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GoToButton</span>(<span class="params">&#123; screenName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> navigation = useNavigation();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Button</span><br><span class="line">      title=&#123;<span class="string">`Go to <span class="subst">$&#123;screenName&#125;</span>`</span>&#125;</span><br><span class="line">      onPress=&#123;<span class="function">() =&gt;</span> navigation.navigate(screenName)&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="给页面传递额外的属性"><a href="#给页面传递额外的属性" class="headerlink" title="给页面传递额外的属性"></a>给页面传递额外的属性</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Stack.Screen</span><br><span class="line">  name=<span class="string">&quot;HomeScreen&quot;</span></span><br><span class="line">  options=&#123;&#123;<span class="attr">headerTitle</span>: <span class="string">&#x27;首页&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">  &#123;<span class="function"><span class="params">props</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">HomeScreen</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">extraData</span>=<span class="string">&#123;&#123;author:</span> &#x27;杨俊宁&#x27;&#125;&#125; /&gt;</span></span>&#125;</span><br><span class="line">&lt;/Stack.Screen&gt;</span><br></pre></td></tr></table></figure>

<h2 id="获取-Header-Height"><a href="#获取-Header-Height" class="headerlink" title="获取 Header Height"></a>获取 Header Height</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useHeaderHeight &#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/stack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> HeaderHeight = useHeaderHeight() <span class="comment">// 获取Header Height</span></span><br><span class="line">    <span class="keyword">return</span>(...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure>

<h2 id="继续使用类组件"><a href="#继续使用类组件" class="headerlink" title="继续使用类组件"></a>继续使用类组件</h2><p>考虑到对于不适应 Hooks 的但是业务又很紧急的场景，我们可以再类组件之上封装一层来支持 React Navigation 的 Hooks 组件，之所以这么做，起因是因为 React Navigation 5 中我们只能通过 <code>useHeaderHeight()</code> 方法获取标题栏高度。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Albums</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">ref</span>=<span class="string">&#123;this.props.scrollRef&#125;</span>&gt;</span>&#123;/* content */&#125;<span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装并导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ref = React.useRef(<span class="literal">null</span>);</span><br><span class="line">  useScrollToTop(ref);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Albums</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">scrollRef</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>掘金专栏</tag>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native 架构面面观</title>
    <url>/2020/02/React-Native-%E6%9E%B6%E6%9E%84%E9%9D%A2%E9%9D%A2%E8%A7%82/</url>
    <content><![CDATA[<p><a href="https://github.com/sigmayun/react-native-template-typescript"><img src="https://i.loli.net/2020/02/24/hPsv4Q87zlIrX6x.png" style="zoom:36%;" /></a></p>
<a id="more"></a>

<h2 id="sigmayun-react-native-template-typescript"><a href="#sigmayun-react-native-template-typescript" class="headerlink" title="@sigmayun/react-native-template-typescript"></a>@sigmayun/react-native-template-typescript</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpZ21heXVuL3JlYWN0LW5hdGl2ZS10ZW1wbGF0ZS10eXBlc2NyaXB0" title="https://github.com/sigmayun/react-native-template-typescript">@sigmayun/react-native-template-typescript<i class="fa fa-external-link"></i></span>是基于 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLXRlbXBsYXRlLXR5cGVzY3JpcHQ=" title="https://github.com/react-native-community/react-native-template-typescript">react-native-community/react-native-template-typescript<i class="fa fa-external-link"></i></span> 二次开发的模板脚手架。本文的架构方案融进了该模板。你甚至不需要阅读本文的内容即可使用本文中的最佳实践！！！</p>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>既然都引入 TypeScript 了，就不用再担心给全局对象添加属性不小心污染它了，但是需要我们进行一些配置。</p>
<p>1、在项目根目录新建 <code>types</code>,并新建 <code>global.d.ts</code> 文件名，添加一下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare const global: &#123;</span><br><span class="line">  HermesInternal: null | &#123;&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、为了防止和 <code>@types/node</code> 的 <code>Global</code> 声明冲突，需要把 <code>tsconfig.json</code> 中的 <code>skipLibCheck</code> 的值设置为 <code>true</code></p>
<blockquote>
<p>该部分示例代码涉及 <code>global.ts</code>、<code>types/global.d.ts</code>、<code>tsconfig.json</code>，请到 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpZ21heXVuL3JlYWN0LW5hdGl2ZS10ZW1wbGF0ZS10eXBlc2NyaXB0" title="https://github.com/sigmayun/react-native-template-typescript">https://github.com/sigmayun/react-native-template-typescript<i class="fa fa-external-link"></i></span> 查看。</p>
</blockquote>
<h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Npc2h1Z3Vvaml4dWVmdS9lc2xpbnQtY29uZmln" title="https://github.com/sishuguojixuefu/eslint-config">@sishuguojixuefu/eslint-config<i class="fa fa-external-link"></i></span>：大而全的 ESlint 配置，支持 vue、jsx、js、ts、tsx、html 的 ESLint 配置插件，基于 airbnb，支持Prettier</li>
<li>husky + lint-staged: 禁止 <code>commit</code> 不符合规范的代码</li>
</ul>
<blockquote>
<p>该部分示例代码：<span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvM0dEN2NIS24=" title="https://bre.is/3GD7cHKn">https://bre.is/3GD7cHKn<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="Npm-Scripts"><a href="#Npm-Scripts" class="headerlink" title="Npm Scripts"></a>Npm Scripts</h2><p>善用 NPM Scripts 能帮助改善工作流程！！！</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;postinstall&quot;</span>: <span class="string">&quot;npx jetifier&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;android&quot;</span>: <span class="string">&quot;react-native run-android&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ios&quot;</span>: <span class="string">&quot;react-native run-ios&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;react-native start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;jest&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint . --ext .js,.jsx,.ts,.tsx&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;pod&quot;</span>: <span class="string">&quot;cd ios &amp;&amp; pod install&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gradle:clean&quot;</span>: <span class="string">&quot;cd android &amp;&amp; ./gradlew clean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;an:release&quot;</span>: <span class="string">&quot;yarn gradle:clean &amp;&amp; cd android &amp;&amp; ./gradlew app:assembleRelease&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;an:installRelease&quot;</span>: <span class="string">&quot;yarn gradle:clean &amp;&amp; cd android &amp;&amp; ./gradlew app:installRelease&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;an:releaseStaging&quot;</span>: <span class="string">&quot;yarn gradle:clean &amp;&amp; cd android &amp;&amp; ./gradlew app:assembleReleaseStaging&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;an:installReleaseStaging&quot;</span>: <span class="string">&quot;yarn gradle:clean &amp;&amp; cd android &amp;&amp; ./gradlew app:installReleaseStaging&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;an:genkeypair&quot;</span>: <span class="string">&quot;keytool -genkeypair -v -keystore release.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;an:key-debug&quot;</span>: <span class="string">&quot;keytool -list -v -keystore ./android/app/debug.keystore&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;an:key-release&quot;</span>: <span class="string">&quot;keytool -v -list -keystore ./android/app/release.keystore&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;npx iconfont-rn&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该部分示例代码：<span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvTEM2dXU4a2M=" title="https://bre.is/LC6uu8kc">https://bre.is/LC6uu8kc<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cua2FuY2xvdWQuY24veXVueWUvYXhpb3MvMjM0ODQ1" title="https://www.kancloud.cn/yunye/axios/234845">axios<i class="fa fa-external-link"></i></span>: Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcXM=" title="https://www.npmjs.com/package/qs">qs<i class="fa fa-external-link"></i></span>: A querystring parsing and stringifying library with some added security.</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2xlYW4tZGVlcA==" title="https://www.npmjs.com/package/clean-deep">clean-deep<i class="fa fa-external-link"></i></span>: 从对象中递归删除空对象、空数组、空字符串、<code>null</code>和 <code>value</code>值。不改变原始数据。</li>
</ul>
<blockquote>
<p>该部分示例代码：<span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvMzlraGhKdG4=" title="https://bre.is/39khhJtn">https://bre.is/39khhJtn<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="路由管理"><a href="#路由管理" class="headerlink" title="路由管理"></a>路由管理</h2><ul>
<li>React Navigation: 这个模块是官方推荐的导航组件，升级到5之后不仅支持了 <code>hooks</code>，更是支持了动态路由。</li>
</ul>
<blockquote>
<p>该部分示例代码：<span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvcHpBN0pBclk=" title="https://bre.is/pzA7JArY">https://bre.is/pzA7JArY<i class="fa fa-external-link"></i></span></p>
<p>相关博客：<span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvcHpBN0pBclk=" title="https://bre.is/pzA7JArY">https://bre.is/pzA7JArY<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><ul>
<li><code>mobx</code> + <code>mobx-react</code>: 相对于 redux 来说更简单易用，还在犹豫的同学，可以读一下有赞的一篇文章 <span class="exturl" data-url="aHR0cHM6Ly90ZWNoLnlvdXphbi5jb20vbW9ieF92c19yZWR1eC8=" title="https://tech.youzan.com/mobx_vs_redux/">我为什么从Redux迁移到了Mobx<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtbmF0aXZlLXNpbXBsZS1zdG9yZQ==" title="https://www.npmjs.com/package/react-native-simple-store">react-native-simple-storage<i class="fa fa-external-link"></i></span>:  AsyncStorage 的一个简单包装器</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B1YmtleS9yeGRi" title="https://github.com/pubkey/rxdb">rxdb<i class="fa fa-external-link"></i></span>:  JavaScript 即时数据库，如果有复杂的缓存业务可以考虑使用</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05vemJlL1dhdGVybWVsb25EQg==" title="https://github.com/Nozbe/WatermelonDB">watermelonDB<i class="fa fa-external-link"></i></span>: 一个专为 React、React Native 服务的响应式数据库框架</li>
</ul>
<h2 id="启动屏"><a href="#启动屏" class="headerlink" title="启动屏"></a>启动屏</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NyYXp5Y29kZWJveS9yZWFjdC1uYXRpdmUtc3BsYXNoLXNjcmVlbg==" title="https://github.com/crazycodeboy/react-native-splash-screen">react-native-splash-screen<i class="fa fa-external-link"></i></span></li>
</ul>
<blockquote>
<p>启动屏的配置涉及到不少原生知识，请阅读 <span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvQ1JDMlNrcVA=" title="https://bre.is/CRC2SkqP">https://bre.is/CRC2SkqP<i class="fa fa-external-link"></i></span> 进行配置。</p>
</blockquote>
<h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly91cGRhdGUucmVhY3RuYXRpdmUuY24vaG9tZQ==" title="https://update.reactnative.cn/home">react-native-pushy<i class="fa fa-external-link"></i></span>: ReactNative中文网推出的代码热更新服务，免费，但是限制多，不推荐使用</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9yZWFjdC1uYXRpdmUtY29kZS1wdXNo" title="https://github.com/microsoft/react-native-code-push">react-native-code-push<i class="fa fa-external-link"></i></span> + <span class="exturl" data-url="aHR0cHM6Ly9hcHBjZW50ZXIubXMv" title="https://appcenter.ms/">AppCenter<i class="fa fa-external-link"></i></span>：完全免费，国内速度可能慢，适合个人开发者【推荐】</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9yZWFjdC1uYXRpdmUtY29kZS1wdXNo" title="https://github.com/microsoft/react-native-code-push">react-native-code-push<i class="fa fa-external-link"></i></span> + <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpc29uZy9jb2RlLXB1c2gtc2VydmVy" title="https://github.com/lisong/code-push-server">code-push-server<i class="fa fa-external-link"></i></span>：适合公司自建热更新服务器</li>
</ul>
<blockquote>
<p>新版热更新部分我还没写好博客，可以先参考我之前写的： <span class="exturl" data-url="aHR0cDovL3RlY2hibG9nLnNpc2h1eHVlZnUuY29tL2F0cmljbGUuaHRtbD81YmVhYTdlNTlmNTQ1NDAwNzAzOWUwMWPvvIzmiJHkvJrlnKjnnIvlrozmlrDmlofmoaPkuYvlkI7miorov5npg6jliIbphY3nva7kuZ/lhoXnva7liLDohJrmiYvmnrbkuK3vvIzmr5Xnq5/ov5nkuKrmnI3liqHkuZ/mmK8=" title="http://techblog.sishuxuefu.com/atricle.html?5beaa7e59f5454007039e01c，我会在看完新文档之后把这部分配置也内置到脚手架中，毕竟这个服务也是">http://techblog.sishuxuefu.com/atricle.html?5beaa7e59f5454007039e01c，我会在看完新文档之后把这部分配置也内置到脚手架中，毕竟这个服务也是<i class="fa fa-external-link"></i></span> React Native 的标配。</p>
</blockquote>
<h2 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ybi5tb2JpbGUuYW50LmRlc2lnbi9pbmRleC1jbg==" title="https://rn.mobile.ant.design/index-cn">@ant-design/react-native<i class="fa fa-external-link"></i></span>:  Ant Design 出品的一个基于 React Native 的 UI 组件库</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01laXR1YW4tRGlhbnBpbmcvYmVlc2hlbGw=" title="https://github.com/Meituan-Dianping/beeshell">beeshell<i class="fa fa-external-link"></i></span>: 美团 React Native 组件库</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdC1uYXRpdmUtZWxlbWVudHMuZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS1lbGVtZW50cy8=" title="https://react-native-elements.github.io/react-native-elements/">react-native-elements<i class="fa fa-external-link"></i></span>: HybridReact Native UI工具包</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dpeC9yZWFjdC1uYXRpdmUtdWktbGli" title="https://github.com/wix/react-native-ui-lib">react-native-ui-lib<i class="fa fa-external-link"></i></span>: 没有体验过，看起来很强大</li>
</ul>
<blockquote>
<p>其他组件收藏请查看：<span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvaldVR3ZQcks=" title="https://bre.is/jWUGvPrK">https://bre.is/jWUGvPrK<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMveXFKMkVFZEw=" title="https://bre.is/yqJ2EEdL">mobx+react-native-largelist 实现分页功能<i class="fa fa-external-link"></i></span>: 推荐使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvbGFuOTk5OS9yZWFjdC1uYXRpdmUtbGFyZ2VsaXN0" title="https://github.com/bolan9999/react-native-largelist">react-native-largelist-v3<i class="fa fa-external-link"></i></span>，支持下拉刷新、上拉加载更多、分组列表、表格和瀑布流</li>
<li>自行封装 <code>FlatList</code>、<code>SectionList</code>: 并不复杂，建议还是要回手写的，react-native-largelist-v3 不一定能满足所有场景</li>
</ul>
<h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtbmF0aXZlLWljb25mb250LWNsaQ==" title="https://www.npmjs.com/package/react-native-iconfont-cli">react-native-iconfont-cli<i class="fa fa-external-link"></i></span>: 【推荐】用纯JS把图标转换成RN组件，不依赖字体，支持多色彩，支持热更新</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvZGZDRE0yS3c=" title="https://bre.is/dfCDM2Kw">@ant-design/icons-react-native<i class="fa fa-external-link"></i></span>: Ant Design Icons for React Native</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29ibGFkb3IvcmVhY3QtbmF0aXZlLXZlY3Rvci1pY29ucw==" title="https://github.com/oblador/react-native-vector-icons">react-native-vector-icons<i class="fa fa-external-link"></i></span>: Perfect for buttons, logos and nav/tab bars. Easy to extend, style and integrate into your project.</li>
</ul>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS10cmFpbmluZy9yZWFjdC1uYXRpdmUtZm9udHM=" title="https://github.com/react-native-training/react-native-fonts">react-native-fonts<i class="fa fa-external-link"></i></span>: 在React Native项目中开箱即用的可用字体，这个库只是统计了一下 React Native 中可用的字体而已</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNTljNzRjOTFmMjY1ZGEwNjVjNWU5Mjgy" title="https://juejin.im/entry/59c74c91f265da065c5e9282">React Native 配置自定义字体<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvTjJOcWtYNE4=" title="https://bre.is/N2NqkX4N">React Native Custom Fonts<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleW1hbjMzMy9yZWFjdC1uYXRpdmUtcmVzcG9uc2l2ZS1mb250U2l6ZQ==" title="https://github.com/heyman333/react-native-responsive-fontSize">react-native-responsive-fontSize<i class="fa fa-external-link"></i></span>: 响应式fontSize基于React Native中设备的屏幕尺寸</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvV1R4bnJmUFY=" title="https://bre.is/WTxnrfPV">React Native 配置字体大小不随字体设置变化<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2U2NmMyNmU1MWQ0NTU1ZmQyMGEyYTA=" title="https://juejin.im/post/5ce66c26e51d4555fd20a2a0">React Native字体问题解决方案指北<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtbmF0aXZlLXJlc3BvbnNpdmUtZm9udHNpemU=" title="https://www.npmjs.com/package/react-native-responsive-fontsize">react-native-responsive-fontsize<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ldGhlcmNyZWF0aXZlLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUtc2hhZG93LWdlbmVyYXRvci8=" title="https://ethercreative.github.io/react-native-shadow-generator/">react-native-shadow-generator<i class="fa fa-external-link"></i></span>: 在线生成 React Native 阴影代码</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pvbm55QnVyZ2VyL25weC12aXN1YWxpemUtYnVuZGxl" title="https://github.com/JonnyBurger/npx-visualize-bundle">visualize-bundle<i class="fa fa-external-link"></i></span>: <code>npx visualize-bundle</code> 允许你一键检查你的 React Native bundle 包 并且找到大的依赖</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pY29uLnd1cnVpaG9uZy5jb20v" title="https://icon.wuruihong.com/">图标工厂<i class="fa fa-external-link"></i></span>: 一键生成所有尺寸的应用图标/启动图</li>
</ul>
<h2 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h2><p>这个新语法是2019年的明星，React Navigation、Mobx这些常用库都内置支持了，还没有学习的同学快去补课吧！！！</p>
<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><blockquote>
<p>建议先读官方文档！！！</p>
</blockquote>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvaG9va3MtaW50cm8uaHRtbA==" title="https://zh-hans.reactjs.org/docs/hooks-intro.html">官方文档<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmUzZWExMzZmYjlhMDQ5ZjkxMjEwMTQ=" title="https://juejin.im/post/5be3ea136fb9a049f9121014">30分钟精通React Hooks<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZGJiZGJkNWYyNjVkYTRkNGI1ZmU1N2Q=" title="https://juejin.im/post/5dbbdbd5f265da4d4b5fe57d">React Hooks 详解 【近 1W 字】+ 项目实战<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZDk4NWRlYWU1MWQ0NTc3ZjkyODVjMmY=" title="https://juejin.im/post/5d985deae51d4577f9285c2f">呕心沥血，一文看懂 react hooks<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC84NjIxMTY3NQ==" title="https://zhuanlan.zhihu.com/p/86211675">React Hooks 带来的困扰与思考<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="如何兼容类组件"><a href="#如何兼容类组件" class="headerlink" title="如何兼容类组件"></a>如何兼容类组件</h3><p>考虑到对于不适应 Hooks 的但是业务又很紧急的场景，我们可以在类组件之上封装一层来支持 React Navigation 的 Hooks 组件，之所以这么做，起因是因为 React Navigation 5 中我们只能通过 <code>useHeaderHeight()</code> 方法获取标题栏高度。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Albums</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">ref</span>=<span class="string">&#123;this.props.scrollRef&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;this.props.headerHeight&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装并导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ref = React.useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> headerHeight = useHeaderHeight();</span><br><span class="line">  useScrollToTop(ref);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Albums</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">scrollRef</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">headerHeight</span>=<span class="string">&#123;headerHeight&#125;/</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Metro"><a href="#Metro" class="headerlink" title="Metro"></a>Metro</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTU0ZDkxMGYyNjVkYTU3MTY3MTA5MGQ=" title="https://juejin.im/post/5e54d910f265da571671090d">利用Metro配置React Native端口<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="第三放服务"><a href="#第三放服务" class="headerlink" title="第三放服务"></a>第三放服务</h2><blockquote>
<p>这里尽量为大家推荐了免费的服务，当然选择自行搭建服务也是一个很棒的选择！！</p>
</blockquote>
<h3 id="Sentry"><a href="#Sentry" class="headerlink" title="Sentry"></a><span class="exturl" data-url="aHR0cHM6Ly9zZW50cnkuaW8vd2VsY29tZS8=" title="https://sentry.io/welcome/">Sentry<i class="fa fa-external-link"></i></span></h3><blockquote>
<p>Sentry 胜在可以把服务搭建到自己的服务器上，并且官方提供了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktcmVhY3QtbmF0aXZl" title="https://github.com/getsentry/sentry-react-native">sentry-react-native<i class="fa fa-external-link"></i></span>插件来帮助 React Native 工程师快速集成。如果有条件，选择 Sentry 恐怕是目前行业的最佳选择。</p>
</blockquote>
<p>Sentry提供自托管和基于云的错误监控，可帮助所有软件团队实时发现分类和确定错误的优先级。已经有超过五万家公司的100万名开发人员使用，Sentry可以更快地提供更好的软件。你不加入他们吗？</p>
<h3 id="腾讯-Bugly"><a href="#腾讯-Bugly" class="headerlink" title="腾讯 Bugly"></a><span class="exturl" data-url="aHR0cHM6Ly9idWdseS5xcS5jb20vdjIv" title="https://bugly.qq.com/v2/">腾讯 Bugly<i class="fa fa-external-link"></i></span></h3><p>腾讯Bugly，为移动开发者提供专业的异常上报和运营统计，帮助开发者快速发现并解决异常，同时掌握产品运营动态，及时跟进用户反馈。免费提供异常上报、运营统计、应用升级</p>
<h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><h4 id="信鸽-腾讯移动推送"><a href="#信鸽-腾讯移动推送" class="headerlink" title="信鸽 | 腾讯移动推送"></a><span class="exturl" data-url="aHR0cHM6Ly94Zy5xcS5jb20v" title="https://xg.qq.com/">信鸽 | 腾讯移动推送<i class="fa fa-external-link"></i></span></h4><p>为开发者提供免费、快速、简单的推送服务。QQ登录即可快速注册，为APP接入SDK后马上获得无限量应用推送能力，<br>有效提升用户留存率、活跃度，开发者的不二选择！</p>
<h4 id="小米消息推送服务"><a href="#小米消息推送服务" class="headerlink" title="小米消息推送服务"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXYubWkuY29tL2NvbnNvbGUvYXBwc2VydmljZS9wdXNoLmh0bWw=" title="https://dev.mi.com/console/appservice/push.html">小米消息推送服务<i class="fa fa-external-link"></i></span></h4><ul>
<li>MIUI上系统级通道</li>
<li>iOS/Android全平台支持</li>
<li>免费 稳定 安全 高效</li>
</ul>
<h4 id="极光推送"><a href="#极光推送" class="headerlink" title="极光推送"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlndWFuZy5jbi9wdXNo" title="https://www.jiguang.cn/push">极光推送<i class="fa fa-external-link"></i></span></h4><p>极光推送服务，可以免费使用，但限制较多。官方SDK, React Native 集成容易</p>
<h4 id="U-Push"><a href="#U-Push" class="headerlink" title="U-Push"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cudW1lbmcuY29tL3B1c2g=" title="https://www.umeng.com/push">U-Push<i class="fa fa-external-link"></i></span></h4><p>和极光属于一类，限制级免费，友盟的产品胜在生态，公司产品考虑，后期用户上来之后方便扩展。</p>
<h3 id="社会化分享"><a href="#社会化分享" class="headerlink" title="社会化分享"></a>社会化分享</h3><h4 id="ShareSDK"><a href="#ShareSDK" class="headerlink" title="ShareSDK"></a><span class="exturl" data-url="aHR0cDovL3d3dy5tb2IuY29tL21vYlNlcnZpY2Uvc2hhcmVzZGs=" title="http://www.mob.com/mobService/sharesdk">ShareSDK<i class="fa fa-external-link"></i></span></h4><p>为开发者提供40+主流平台的分享与授权等社会化功能，效果稳定，完整清晰统计分享数据</p>
<ul>
<li>一键分享</li>
<li>第三方登录</li>
<li>闭环分享</li>
<li>短链转换</li>
<li>数据统计</li>
<li>新浪微博独家LinkCard</li>
</ul>
<h4 id="jshare"><a href="#jshare" class="headerlink" title="jshare"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pwdXNoL2pzaGFyZS1yZWFjdC1uYXRpdmU=" title="https://github.com/jpush/jshare-react-native">jshare<i class="fa fa-external-link"></i></span></h4><ul>
<li>一键分享</li>
<li>第三放登录</li>
<li>社会化统计</li>
<li>官方 React Native SDK 集成方便</li>
</ul>
<h3 id="U-Share"><a href="#U-Share" class="headerlink" title="U-Share"></a><span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvTE0zZWFDc0w=" title="https://bre.is/LM3eaCsL">U-Share<i class="fa fa-external-link"></i></span></h3><ul>
<li>全面覆盖国内外社交平台</li>
<li>集成成本低、速度快</li>
<li>自由定制分享界面</li>
<li>权威、实时的大数据分析</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvcmtpZS9yZWFjdC1uYXRpdmUtd2VjaGF0" title="https://github.com/yorkie/react-native-wechat">react-native-wechat<i class="fa fa-external-link"></i></span>: 🚀 <strong>WeChat login</strong>, <strong>share</strong>, <strong>favorite</strong> and <strong>payment</strong> for React-Native on iOS and Android platforms</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzB4NWUvcmVhY3QtbmF0aXZlLWFsaXBheQ==" title="https://github.com/0x5e/react-native-alipay">@0x5e/react-native-alipay<i class="fa fa-external-link"></i></span>: Alipay SDK for React Native. Support mobile webpage url payment. Support RN &gt;= 0.47.</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote>
<p>这部分作者的理解仅限于 Jest，有大佬可以联系我补充！！！</p>
</blockquote>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qZXN0anMuaW8vemgtSGFucy8=" title="https://jestjs.io/zh-Hans/">Jest<i class="fa fa-external-link"></i></span>: Jest是一个令人愉快的 JavaScript 测试框架，专注于简洁明快。React Native 已经集成好了，直接使用即可。</li>
</ul>
<h2 id="自动化运维"><a href="#自动化运维" class="headerlink" title="自动化运维"></a>自动化运维</h2><blockquote>
<p>这部分作者接触不深，只知道 Jekens + GitLab 的方案</p>
</blockquote>
<h3 id="shell-文件的坑"><a href="#shell-文件的坑" class="headerlink" title="shell 文件的坑"></a>shell 文件的坑</h3><p>为了安全性 shell 文件默认都是不可执行的，当然也包括 <code>android/gradlew</code> 这个用来打包的脚本文件，这会给持续集成带来麻烦：运维同学默认是执行不了我们的打包命令的。解决办法很简单：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git update-index --add --chmod=+x android/gradlew</span></span><br></pre></td></tr></table></figure>

<h3 id="动态设置-package-json-的版本"><a href="#动态设置-package-json-的版本" class="headerlink" title="动态设置 package.json 的版本"></a>动态设置 package.json 的版本</h3><p>set-version.sh:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># current_git_branch_latest_id=`git rev-parse HEAD`</span></span><br><span class="line">current_git_branch_latest_short_id=`git rev-parse --short HEAD`</span><br><span class="line">current_os=`uname -s`</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo current git branch latest commit id=$current_git_branch_latest_id</span></span><br><span class="line"><span class="built_in">echo</span> current git branch latest commit short id=<span class="variable">$current_git_branch_latest_short_id</span></span><br><span class="line"><span class="built_in">echo</span> current os=<span class="variable">$current_os</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$current_os</span>&quot;</span> == <span class="string">&quot;Darwin&quot;</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">  sed -i <span class="string">&#x27;&#x27;</span> <span class="string">&#x27;s/&quot;version&quot;.*/&quot;version&quot;: &quot;1.0.0-&#x27;</span><span class="variable">$current_git_branch_latest_short_id</span><span class="string">&#x27;&quot;,/g&#x27;</span> package.json</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> windows</span><br><span class="line">  sed -i <span class="string">&#x27;s/&quot;version&quot;.*/&quot;version&quot;: &quot;&#x27;</span><span class="variable">$current_git_branch_latest_short_id</span><span class="string">&#x27;&quot;,/g&#x27;</span> package.json</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>package.json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 依赖 husky</span></span><br><span class="line">  <span class="attr">&quot;husky&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;post-commit&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./scripts/set-version.sh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;git add .&quot;</span>,</span><br><span class="line">        <span class="string">&quot;git commit -m bump version&quot;</span>,</span><br><span class="line">        <span class="string">&quot;git push&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="官方组件缺陷处理"><a href="#官方组件缺陷处理" class="headerlink" title="官方组件缺陷处理"></a>官方组件缺陷处理</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2Jsb2cvaXNzdWVzLzc=" title="https://github.com/youngjuning/blog/issues/7">React Native 解决Image 圆角在安卓上面没效果<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2Jsb2cvaXNzdWVzLzY=" title="https://github.com/youngjuning/blog/issues/6">React Native 处理Android系统上文字偏下的问题<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2Jsb2cvaXNzdWVzLzU=" title="https://github.com/youngjuning/blog/issues/5">React Native 自定义 TextInput 高度的问题<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2Jsb2cvaXNzdWVzLzMy" title="https://github.com/youngjuning/blog/issues/32">[Android] Using TextInput inside ViewPagerAndroid causes context menu (copy/paste) in some cases to not display<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="VsCode-插件推荐"><a href="#VsCode-插件推荐" class="headerlink" title="VsCode 插件推荐"></a>VsCode 插件推荐</h2><ul>
<li>React Native TypeScript Snippets: 本人开发，主要服务于本文的架构，帮助开发者快速搭建页面和组件，凡是重复的工作都可以靠工具来解决，一个不够，就来俩！！！</li>
<li>ES7 React/Redux/GraphQL/React-Native Snippets</li>
</ul>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="自动-remove-console-语句"><a href="#自动-remove-console-语句" class="headerlink" title="自动 remove console 语句"></a>自动 remove console 语句</h3><p>准确地说，是在正式环境下删除 <code>console</code> 语句，配置方式请参考 <span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvMkNUVVp5VWo=" title="https://bre.is/2CTUZyUj">自动 remove console 语句<i class="fa fa-external-link"></i></span></p>
<h3 id="推荐阅读-1"><a href="#推荐阅读-1" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTE2NzZlMTZmYjlhMDQ4NDcwOTViMTI=" title="https://juejin.im/post/5e1676e16fb9a04847095b12">React Native 性能优化指南【全网最全，值得收藏】<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="应用内测"><a href="#应用内测" class="headerlink" title="应用内测"></a>应用内测</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9maXIuaW0v" title="https://fir.im/">fir<i class="fa fa-external-link"></i></span>: 免费应用内测托管平台</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucGd5ZXIuY29tLw==" title="https://www.pgyer.com/">蒲公英<i class="fa fa-external-link"></i></span>: 免费的苹果ios应用app内测分发托管、android安卓app内测分发托管、ios企业签名、ios专属签名、ios超级签名、ios企业账号</li>
</ul>
<h2 id="安卓必知必会"><a href="#安卓必知必会" class="headerlink" title="安卓必知必会"></a>安卓必知必会</h2><h3 id="配置应用名"><a href="#配置应用名" class="headerlink" title="配置应用名"></a>配置应用名</h3><p>很简单,我们直接打开 <code>android/app/src/main/res/values/strings.xml</code>，即可看到配置中的 <code>app_name</code>，修改为你想要的即可。</p>
<blockquote>
<p>你可以在初始化项目的时候指定应用的名字，像这样：<code>npx react-native init MyApp --title 掘金</code></p>
</blockquote>
<h3 id="配置图标"><a href="#配置图标" class="headerlink" title="配置图标"></a>配置图标</h3><p>1、使用<span class="exturl" data-url="aHR0cHM6Ly9pY29uLnd1cnVpaG9uZy5jb20v" title="https://icon.wuruihong.com/">图标工厂<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtbmF0aXZlLXN2Zy1hcHAtaWNvbg==" title="https://www.npmjs.com/package/react-native-svg-app-icon">react-native-svg-app-icon<i class="fa fa-external-link"></i></span> 或者让设计师给图片</p>
<p>2、在 <code>android\app\src\main\res\mipmap-xxxxxx</code> 中直接覆盖图标就可以，注意图标的大小。</p>
<h3 id="打包-APK"><a href="#打包-APK" class="headerlink" title="打包 APK"></a>打包 APK</h3><p>1、在项目根目录执行 <code>keytool -genkeypair -v -keystore release.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000</code> 生成密钥文件 <code>release.keystore</code></p>
<p>2、把 <code>release.keystore</code> 文件放到你工程中的 <code>android/app</code> 文件夹下。</p>
<p>3、配置 <code>android/app/build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    ...</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile file(<span class="string">&quot;release.keystore&quot;</span>)</span><br><span class="line">            storePassword <span class="string">&quot;****&quot;</span></span><br><span class="line">            keyAlias <span class="string">&quot;my-key-alias&quot;</span></span><br><span class="line">            keyPassword <span class="string">&quot;****&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            ...</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打包优化"><a href="#打包优化" class="headerlink" title="打包优化"></a>打包优化</h3><h4 id="去除无用的语言资源"><a href="#去除无用的语言资源" class="headerlink" title="去除无用的语言资源"></a>去除无用的语言资源</h4><p>通过配置 <code>android/defaultConfig/resConfigs</code> 可以选择只打包哪几种语言，进而去掉各种 <code>aar</code> 包中全世界的语言，尤其是 <code>support</code> 包中的。</p>
<p>选择保留什么语言要根据产品的用户和市场来定，如果只选择默认英语和中文语言，配置如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">    resConfigs <span class="string">&quot;en&quot;</span>,<span class="string">&quot;zh&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置-PackagingOptions"><a href="#配置-PackagingOptions" class="headerlink" title="配置 PackagingOptions"></a>配置 PackagingOptions</h4><p>打开 <code>android/app/build.gradle</code> 文件，添加如下配置：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">packagingOptions &#123;</span><br><span class="line">    exclude <span class="string">&#x27;META-INF/android_release.kotlin_module&#x27;</span></span><br><span class="line">    exclude <span class="string">&#x27;META-INF/DEPENDENCIES&#x27;</span></span><br><span class="line">    exclude <span class="string">&#x27;META-INF/LICENSE&#x27;</span></span><br><span class="line">    exclude <span class="string">&#x27;META-INF/LICENSE.txt&#x27;</span></span><br><span class="line">    exclude <span class="string">&#x27;META-INF/license.txt&#x27;</span></span><br><span class="line">    exclude <span class="string">&#x27;META-INF/NOTICE&#x27;</span></span><br><span class="line">    exclude <span class="string">&#x27;META-INF/NOTICE.txt&#x27;</span></span><br><span class="line">    exclude <span class="string">&#x27;META-INF/notice.txt&#x27;</span></span><br><span class="line">    exclude <span class="string">&#x27;META-INF/ASL2.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pickFirsts</code>: 当出现重复文件，会使用第一个匹配的文件打包进入 apk</li>
<li><code>merges</code>: 当出现重复文件，合并重复的文件打入 apk</li>
<li><code>excludes</code>: 打包的时候排除匹配的文件</li>
</ul>
<h4 id="配置-splits"><a href="#配置-splits" class="headerlink" title="配置 splits"></a>配置 splits</h4><blockquote>
<p>查看手机 CPU 信息：<code>adb shell</code> -&gt; <code>cd /proc</code> -&gt; <code>cat cpuinfo</code></p>
</blockquote>
<p>默认情况下，生成的 <code>APK</code> 会同时包含针对于 <code>x86</code> 和 <code>ARMv7a</code> 两种 <code>CPU</code> 架构的原生代码。这样可以让我们更方便的向其他人分享这个 <code>APK</code>，因为它几乎可以运行在所有的 Android 设备上。但是，这会导致所有设备上都有一些根本不会运行的代码，白白占据了空间。目前安卓设备绝大多数是 <code>ARM</code> 架构，因此对于大部分应用来说可以考虑去掉 <code>x86</code> 架构的支持。</p>
<p>你可以在 <code>android/app/build.gradle</code> 中修改如下代码：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- include &quot;armeabi-v7a&quot;, &quot;x86&quot;, &quot;arm64-v8a&quot;, &quot;x86_64&quot;</span></span><br><span class="line"><span class="addition">+ include &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot;</span></span><br><span class="line"><span class="deletion">- def versionCodes = [&quot;armeabi-v7a&quot;:1, &quot;x86&quot;:2, &quot;arm64-v8a&quot;: 3, &quot;x86_64&quot;: 4]</span></span><br><span class="line"><span class="addition">+ def versionCodes = [&quot;armeabi-v7a&quot;:1, &quot;arm64-v8a&quot;: 2]</span></span><br></pre></td></tr></table></figure>

<h3 id="gradle-编译速度优化配置"><a href="#gradle-编译速度优化配置" class="headerlink" title="gradle 编译速度优化配置"></a>gradle 编译速度优化配置</h3><p>在 <code>android\gradle.properties</code> 中加入以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 让gradle使用单独的守护进程</span><br><span class="line">org.gradle.daemon&#x3D;true</span><br><span class="line"># 让gradle并行编译</span><br><span class="line">org.gradle.parallel&#x3D;true</span><br><span class="line"># 让gradle在需要的时候才配置</span><br><span class="line">org.gradle.configureondemand&#x3D;true</span><br><span class="line"># 增加gradle运行的java虚拟机的大小</span><br><span class="line">org.gradle.jvmargs&#x3D;-Xmx4096m -XX:MaxPermSize&#x3D;4096m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure>

<h3 id="BuildConfig"><a href="#BuildConfig" class="headerlink" title="BuildConfig"></a>BuildConfig</h3><blockquote>
<p>在 react-native 中，我们可以借助 react-native-config-reader 来方便地读取这些属性</p>
</blockquote>
<p><code>BuildConfig</code> 是程序编译后，根据 <code>buildType</code> 生成在 <code>app\build\generated\source\buildConfig\debug(release)\</code> 包名下的一个 java 文件。默认有一下属性：</p>
<ul>
<li><code>DEBUG</code>：是否是调试版本</li>
<li><code>APPLICATION_ID</code>：当前应用的包名</li>
<li><code>FLAVOR</code>：产品（渠道包的名称）</li>
<li><code>BUILD_TYPE</code>：当前的编译类型(<code>release</code>/<code>debug</code>)</li>
<li><code>VERSION_CODE</code>：版本号(数字)</li>
<li><code>VERSION_NAME</code>：版本号</li>
</ul>
<h4 id="自定义-BuildConfig"><a href="#自定义-BuildConfig" class="headerlink" title="自定义 BuildConfig"></a>自定义 BuildConfig</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">  <span class="comment">// 三个参数: 1.要定义的常量的类型 2.该常量的命名 3.该常量的值</span></span><br><span class="line">  <span class="comment">// APP_NAME，对应 ios 的 CFBundleDisplayName</span></span><br><span class="line">  buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;APP_NAME&quot;</span>, <span class="string">&#x27;&quot;我是谁&quot;&#x27;</span></span><br><span class="line">  <span class="comment">// BUILD_TIME</span></span><br><span class="line">  buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;BUILD_TIME&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span> + <span class="keyword">new</span> Date().format(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>, TimeZone.getTimeZone(<span class="string">&quot;Asia/Shanghai&quot;</span>)) + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在子模块中取主项目的-BuildConfig"><a href="#在子模块中取主项目的-BuildConfig" class="headerlink" title="在子模块中取主项目的 BuildConfig"></a>在子模块中取主项目的 BuildConfig</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBuildConfigValue</span><span class="params">(Context context, String fieldName)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Class&lt;?&gt; clazz = Class.forName(context.getPackageName() + <span class="string">&quot;.BuildConfig&quot;</span>);</span><br><span class="line">    Field field = clazz.getField(fieldName);</span><br><span class="line">    <span class="keyword">return</span> field.get(<span class="keyword">null</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">String versionName = (String)getBuildConfigValue(activity, <span class="string">&quot;VERSION_NAME&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="解决在-Android-P-上的提醒弹窗-（Detected-problems-with-API-compatibility-visit-g-co-dev-appcompat-for-more-info"><a href="#解决在-Android-P-上的提醒弹窗-（Detected-problems-with-API-compatibility-visit-g-co-dev-appcompat-for-more-info" class="headerlink" title="解决在 Android P 上的提醒弹窗 （Detected problems with API compatibility(visit g.co/dev/appcompat for more info)"></a>解决在 Android P 上的提醒弹窗 （Detected problems with API compatibility(visit g.co/dev/appcompat for more info)</h3><p>在 <code>MainActivity.java</code> 中添加 closeAndroidPDialog 方法并在 <code>onCreate</code> 方法中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line">...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  closeAndroidPDialog(); <span class="comment">// here</span></span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeAndroidPDialog</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Class aClass = Class.forName(<span class="string">&quot;android.content.pm.PackageParser$Package&quot;</span>);</span><br><span class="line">    Constructor declaredConstructor = aClass.getDeclaredConstructor(String.class);</span><br><span class="line">    declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Class cls = Class.forName(<span class="string">&quot;android.app.ActivityThread&quot;</span>);</span><br><span class="line">    Method declaredMethod = cls.getDeclaredMethod(<span class="string">&quot;currentActivityThread&quot;</span>);</span><br><span class="line">    declaredMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object activityThread = declaredMethod.invoke(<span class="keyword">null</span>);</span><br><span class="line">    Field mHiddenApiWarningShown = cls.getDeclaredField(<span class="string">&quot;mHiddenApiWarningShown&quot;</span>);</span><br><span class="line">    mHiddenApiWarningShown.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    mHiddenApiWarningShown.setBoolean(activityThread, <span class="keyword">true</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义安卓打包的后缀"><a href="#自定义安卓打包的后缀" class="headerlink" title="自定义安卓打包的后缀"></a>自定义安卓打包的后缀</h3><p>配置 <code>android/app/build.gradle</code>:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">def</span> releaseTime() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">&quot;yyyyMMdd-HHmmss&quot;</span>, TimeZone.getTimeZone(<span class="string">&quot;GMT+08:00&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="attr">android:</span> &#123;</span><br><span class="line">    applicationVariants.all &#123; variant -&gt;</span><br><span class="line">        ...</span><br><span class="line">            variant.outputs.all &#123;</span><br><span class="line">            <span class="comment">// the apk name is e.g. galaxy_v1.0.1_2018-11-1_debug.apk</span></span><br><span class="line">           outputFileName = <span class="string">&quot;galaxy_v$&#123;defaultConfig.versionName&#125;_$&#123;releaseTime()&#125;_$&#123;variant.buildType.name&#125;.apk&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常见报错及解决办法"><a href="#常见报错及解决办法" class="headerlink" title="常见报错及解决办法"></a>常见报错及解决办法</h3><h4 id="Failed-to-read-PNG-signature-file-does-not-start-with-PNG-signature"><a href="#Failed-to-read-PNG-signature-file-does-not-start-with-PNG-signature" class="headerlink" title="Failed to read PNG signature: file does not start with PNG signature"></a>Failed to read PNG signature: file does not start with PNG signature</h4><p>有时从网上下载的 Demo 资源文件不规范，会出现直接将 jpg 文件改为 png 后缀名的情况，gradle 打包检查时报错编译通不过的。我们通过 <code>aaptOptions.cruncherEnabled=false</code> 来禁止 Gradle 检查 png 的合法性：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  aaptOptions &#123;</span><br><span class="line">    cruncherEnabled=<span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="com-android-build-api-transform-TransformException"><a href="#com-android-build-api-transform-TransformException" class="headerlink" title="com.android.build.api.transform.TransformException"></a><span class="exturl" data-url="aHR0cDovL3QuY24vRVpjVER0Vg==" title="http://t.cn/EZcTDtV">com.android.build.api.transform.TransformException<i class="fa fa-external-link"></i></span></h4><p>在 <code>android\gradle.properties</code> 中加入以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dexOptions.javaMaxHeapSize &#x3D; 2g</span><br></pre></td></tr></table></figure>

<h4 id="The-number-of-method-references-in-a-dex-file-cannot-exceed-64K"><a href="#The-number-of-method-references-in-a-dex-file-cannot-exceed-64K" class="headerlink" title="The number of method references in a .dex file cannot exceed 64K."></a>The number of method references in a .dex file cannot exceed 64K.</h4><p>随着 Android 平台的持续成长，Android 应用的大小也在增加。当您的应用及其引用的库达到特定大小时，您会遇到构建错误，指明您的应用已达到 Android 应用构建架构的极限。</p>
<p>解决办法是配置您的应用进行 <code>Dalvik</code> 可执行文件分包，在 <code>android/app/build.gradle</code> 中做下面的配置：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line"><span class="addition">+    multiDexEnabled true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ios必知必会"><a href="#ios必知必会" class="headerlink" title="ios必知必会"></a>ios必知必会</h2><blockquote>
<p>这部分目前作者接触不深，有大佬可以联系我补充！！！</p>
</blockquote>
<h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><blockquote>
<p><code>pod install</code> 会从 GitHub 拉代码，所以在国内会很慢。年轻人要爱国，自觉不翻墙！！！</p>
</blockquote>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2Jsb2cvaXNzdWVzLzEw" title="https://github.com/youngjuning/blog/issues/10">Homebrew 镜像使用帮助<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3IudHVuYS50c2luZ2h1YS5lZHUuY24vaGVscC9Db2NvYVBvZHMv" title="https://mirror.tuna.tsinghua.edu.cn/help/CocoaPods/">CocoaPods 镜像使用帮助<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="配置应用名-1"><a href="#配置应用名-1" class="headerlink" title="配置应用名"></a>配置应用名</h3><ol>
<li>选中工程名称</li>
<li>找到右侧菜单 <code>Info</code> 选项</li>
<li>添加 <code>Bundle display name</code> 并把 <code>value</code> 设置成 “应用名称”</li>
<li>最后重新再 <code>Run</code>一次，即可看到最新的效果</li>
</ol>
<blockquote>
<p>你可以在初始化项目的时候指定应用的名字，像这样：<code>npx react-native init MyApp --title 掘金</code></p>
</blockquote>
<h3 id="配置图标-1"><a href="#配置图标-1" class="headerlink" title="配置图标"></a>配置图标</h3><p>1、使用<span class="exturl" data-url="aHR0cHM6Ly9pY29uLnd1cnVpaG9uZy5jb20v" title="https://icon.wuruihong.com/">图标工厂<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtbmF0aXZlLXN2Zy1hcHAtaWNvbg==" title="https://www.npmjs.com/package/react-native-svg-app-icon">react-native-svg-app-icon<i class="fa fa-external-link"></i></span> 或者让设计师给图片<br>2、把准备好的图标拖到图中箭头指向的位置：</p>
<img src="https://i.loli.net/2020/02/21/Sy3OjWBKbMdYgoH.png" style="zoom:36%;" />

<h3 id="获取BUILD-TYPE"><a href="#获取BUILD-TYPE" class="headerlink" title="获取BUILD_TYPE"></a>获取BUILD_TYPE</h3><p>在 <code>Info.plist</code> 中添加 <code>BUILD_TYPE</code>，取值为 <code>$(CONFIGURATION)</code></p>
<h3 id="获取构建时间"><a href="#获取构建时间" class="headerlink" title="获取构建时间"></a>获取构建时间</h3><p>在 <code>Info.plist</code> 中添加 <code>BUILD_TIME</code>,取值为空，并通过脚本在每次编译的时候对其更新，脚本添加步骤 <code>Target</code>-&gt; <code>Build Phases</code> -&gt; <code>+</code> -&gt; <code>New Run Script Phase</code>, Shell 代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">infoplist=&quot;$BUILT_PRODUCTS_DIR/$INFOPLIST_PATH&quot;</span><br><span class="line">builddate=`date +%Y-%m-%d_%H:%M`</span><br><span class="line">if [[ -n &quot;$builddate&quot; ]]; then</span><br><span class="line">/usr/libexec/PlistBuddy -c &quot;Set :BUILD_TIME $builddate&quot; $&#123;infoplist&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="权限申请"><a href="#权限申请" class="headerlink" title="权限申请"></a>权限申请</h3><ul>
<li><code>Privacy - Camera Usage Description</code></li>
<li><code>Privacy - Photo Library Usage Description</code></li>
<li><code>Privacy - Microphone Usage Description</code></li>
</ul>
<h2 id="Lean-Core"><a href="#Lean-Core" class="headerlink" title="Lean Core"></a>Lean Core</h2><table>
<thead>
<tr>
<th align="left">COMPONENT</th>
<th align="left">DEPRECATED?</th>
<th align="left">NEW HOME</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>AsyncStorage</strong></td>
<td align="left">0.59</td>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2U=" title="https://github.com/react-native-community/react-native-async-storage">@react-native-community/react-native-async-storage<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td align="left"><strong>ImageStore</strong></td>
<td align="left">0.59</td>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2V4cG8vZXhwby90cmVlL21hc3Rlci9wYWNrYWdlcy9leHBvLWZpbGUtc3lzdGVt" title="https://github.com/expo/expo/tree/master/packages/expo-file-system">expo-file-system<i class="fa fa-external-link"></i></span> or <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2l0aW5hbmNlL3JlYWN0LW5hdGl2ZS1mcw==" title="https://github.com/itinance/react-native-fs">react-native-fs<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td align="left"><strong>MaskedViewIOS</strong></td>
<td align="left">0.59</td>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLW1hc2tlZC12aWV3" title="https://github.com/react-native-community/react-native-masked-view">@react-native-community/react-native-masked-view<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td align="left"><strong>NetInfo</strong></td>
<td align="left">0.59</td>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLW5ldGluZm8=" title="https://github.com/react-native-community/react-native-netinfo">@react-native-community/react-native-netinfo<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td align="left"><strong>Slider</strong></td>
<td align="left">0.59</td>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLXNsaWRlcg==" title="https://github.com/react-native-community/react-native-slider">@react-native-community/react-native-slider<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td align="left"><strong>ViewPagerAndroid</strong></td>
<td align="left">0.59</td>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLXZpZXdwYWdlcg==" title="https://github.com/react-native-community/react-native-viewpager">@react-native-community/react-native-viewpager<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td align="left"><strong>WebView</strong></td>
<td align="left">0.60</td>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLXdlYnZpZXc=" title="https://github.com/react-native-community/react-native-webview">react-native-webview<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td align="left"><strong>NetInfo</strong></td>
<td align="left">0.60</td>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLW5ldGluZm8=" title="https://github.com/react-native-community/react-native-netinfo">@react-native-community/netinfo<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td align="left"><strong>Geolocation</strong></td>
<td align="left">0.60</td>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLWdlb2xvY2F0aW9u" title="https://github.com/react-native-community/react-native-geolocation">@react-native-community/geolocation<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td align="left"><strong>Apple TV Support</strong></td>
<td align="left">0.62</td>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLXR2b3M=" title="https://github.com/react-native-community/react-native-tvos">react-native-community/react-native-tvos<i class="fa fa-external-link"></i></span></td>
</tr>
</tbody></table>
<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><table>
<thead>
<tr>
<th align="center">作者微信</th>
<th align="center">知识星球</th>
<th align="center">赞赏作者</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>一个前端工程师的Docker学习笔记</title>
    <url>/2020/03/%E4%B8%80%E4%B8%AA%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/31/UI9JSTCENRvqDwY.png" alt=""></p>
<a id="more"></a>

<p>Docker 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！</p>
<p>无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，节约有限的生命。</p>
<p>本文是笔者以一个前端工程师的视角学习 Docker 过程中的笔记，如果对您有所帮助，荣幸之至。</p>
<h2 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h2><p><strong>Docker</strong> 使用 <code>Google</code> 公司推出的 <span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnLw==" title="https://golang.org/">Go 语言<i class="fa fa-external-link"></i></span> 进行开发实现，基于 <code>Linux</code> 内核的 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQ2dyb3Vwcw==" title="https://zh.wikipedia.org/wiki/Cgroups">cgroup<i class="fa fa-external-link"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGludXhfbmFtZXNwYWNlcw==" title="https://en.wikipedia.org/wiki/Linux_namespaces">namespace<i class="fa fa-external-link"></i></span>，以及 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vc3RvcmFnZS9zdG9yYWdlZHJpdmVyL292ZXJsYXlmcy1kcml2ZXIv" title="https://docs.docker.com/storage/storagedriver/overlayfs-driver/">OverlayFS<i class="fa fa-external-link"></i></span> 类的 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVW5pb25fbW91bnQ=" title="https://en.wikipedia.org/wiki/Union_mount">Union FS<i class="fa fa-external-link"></i></span> 等技术，对进程进行封装隔离，属于 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT3BlcmF0aW5nLXN5c3RlbS1sZXZlbF92aXJ0dWFsaXphdGlvbg==" title="https://en.wikipedia.org/wiki/Operating-system-level_virtualization">操作系统层面的虚拟化技术<i class="fa fa-external-link"></i></span>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 <span class="exturl" data-url="aHR0cHM6Ly9saW51eGNvbnRhaW5lcnMub3JnL2x4Yy9pbnRyb2R1Y3Rpb24v" title="https://linuxcontainers.org/lxc/introduction/">LXC<i class="fa fa-external-link"></i></span>，从 0.7 版本以后开始去除 <code>LXC</code>，转而使用自行开发的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9saWJjb250YWluZXI=" title="https://github.com/docker/libcontainer">libcontainer<i class="fa fa-external-link"></i></span>，从 1.11 开始，则进一步演进为使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL3J1bmM=" title="https://github.com/opencontainers/runc">runC<i class="fa fa-external-link"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvbnRhaW5lcmQvY29udGFpbmVyZA==" title="https://github.com/containerd/containerd">containerd<i class="fa fa-external-link"></i></span>。</p>
<h2 id="Docker-核心概念"><a href="#Docker-核心概念" class="headerlink" title="Docker 核心概念"></a>Docker 核心概念</h2><h3 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h3><p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 <code>root</code> 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 <code>root</code> 文件系统。比如官方镜像 <code>ubuntu:18.04</code> 就包含了完整的一套 Ubuntu 18.04 最小系统的 <code>root</code> 文件系统。</p>
<p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<h3 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h3><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>
<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGludXhfbmFtZXNwYWNlcw==" title="https://en.wikipedia.org/wiki/Linux_namespaces">命名空间<i class="fa fa-external-link"></i></span>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p>
<p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 <strong>容器存储层</strong>。</p>
<p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>
<p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 <span class="exturl" data-url="aHR0cHM6Ly92dWVwcmVzcy5taXJyb3IuZG9ja2VyLXByYWN0aWNlLmNvbS9kYXRhX21hbmFnZW1lbnQvdm9sdW1lLmh0bWw=" title="https://vuepress.mirror.docker-practice.com/data_management/volume.html">数据卷（Volume）<i class="fa fa-external-link"></i></span>、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p>
<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p>
<h3 id="仓库注册服务器（Registry）"><a href="#仓库注册服务器（Registry）" class="headerlink" title="仓库注册服务器（Registry）"></a>仓库注册服务器（Registry）</h3><p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个 <strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p>
<p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p>
<p>以 <span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL3VidW50dQ==" title="https://hub.docker.com/_/ubuntu">Ubuntu 镜像<i class="fa fa-external-link"></i></span> 为例，<code>ubuntu</code> 是仓库的名字，其内包含有不同的版本标签，如，<code>16.04</code>, <code>18.04</code>。我们可以通过 <code>ubuntu:16.04</code>，或者 <code>ubuntu:18.04</code> 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 <code>ubuntu</code>，那将视为 <code>ubuntu:latest</code>。</p>
<p>仓库名经常以 <em>两段式路径</em> 形式出现，比如 <code>jwilder/nginx-proxy</code>，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p>
<p><strong>公有 Docker Registry：</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=" title="https://hub.docker.com/">Docker Hub<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jLjE2My5jb20vaHViIy9tL2xpYnJhcnkv" title="https://c.163.com/hub#/m/library/">网易云镜像服务<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9odWIuZGFvY2xvdWQuaW8v" title="https://hub.daocloud.io/">DaoCloud 镜像市场<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jci5jb25zb2xlLmFsaXl1bi5jb20v" title="https://cr.console.aliyun.com/">aliyun镜像库<i class="fa fa-external-link"></i></span></li>
</ul>
<p><strong>私有 Docker Registry：</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly92dWVwcmVzcy5taXJyb3IuZG9ja2VyLXByYWN0aWNlLmNvbS9yZXBvc2l0b3J5L25leHVzM19yZWdpc3RyeS5odG1s" title="https://vuepress.mirror.docker-practice.com/repository/nexus3_registry.html">Sonatype Nexus<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvaGFyYm9yL2hhcmJvcg==" title="https://github.com/goharbor/harbor">Harbor<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><ul>
<li>操作系统：Linux ubuntu18 4.15.0-91-generic，通过 <code>uname -a</code> 查看</li>
<li>docker-ce镜像：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3IvZG9ja2VyLWNlP3NwbT1hMmM2aC4xMzY1MTEwMi4wLjAuNTI0NzFiMTFjSXAycEg=" title="https://developer.aliyun.com/mirror/docker-ce?spm=a2c6h.13651102.0.0.52471b11cIp2pH">https://developer.aliyun.com/mirror/docker-ce?spm=a2c6h.13651102.0.0.52471b11cIp2pH<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt remove docker docker-engine docker.io containerd runc</span></span><br></pre></td></tr></table></figure>

<h3 id="通过软件包安装"><a href="#通过软件包安装" class="headerlink" title="通过软件包安装"></a>通过软件包安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl gnupg-agent pass software-properties-common</span><br><span class="line"><span class="meta">#</span><span class="bash"> step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 4: 更新并安装Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>

<h3 id="通过脚本安装"><a href="#通过脚本安装" class="headerlink" title="通过脚本安装"></a>通过脚本安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL https://get.docker.com -o get-docker.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sh get-docker.sh --mirror Aliyun</span></span><br></pre></td></tr></table></figure>

<p>安装成功后，会自动启动 Docker 服务。用户可以使用 <code>systemctl is-enabled docker</code> 来确认 Docker 服务是否是开机自启动。</p>
<h3 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h3><p><strong>解决 <code>WARNING: Your kernel does not support cgroup swap limit capabilities</code>：</strong></p>
<p>1、编辑 <code>/etc/default/grub</code> 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nano /etc/default/grub</span></span><br></pre></td></tr></table></figure>

<p>2、找到 <code>GRUB_CMDLINE_LINUX=</code> 配置项，并追加 <code>cgroup_enable=memory swapaccount=1</code>。</p>
<p>3、保存文件后执行一下命令：<code>sudo update-grub</code></p>
<p>4、重启服务器：<code>reboot</code></p>
<h3 id="测试-Docker-是否安装正确"><a href="#测试-Docker-是否安装正确" class="headerlink" title="测试 Docker 是否安装正确"></a>测试 Docker 是否安装正确</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run hello-world</span></span><br></pre></td></tr></table></figure>

<details>
<summary>执行以上命令，若能正常输出信息，则说明安装成功。</summary>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">1b930d010525: Pull complete</span><br><span class="line">Digest: sha256:f9dfddf63636d84ef479d645ab5885156ae030f611a56f3a7ac7f2fdd86d7e4e</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>
</details>

<h3 id="Docker-Deamon-配置"><a href="#Docker-Deamon-配置" class="headerlink" title="Docker Deamon 配置"></a>Docker Deamon 配置</h3><p>执行 <code>nano /etc/docker/daemon.json</code> 中写入如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;ip&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://mirror.ccs.tencentyun.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新启动服务:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart docker.service</span></span><br></pre></td></tr></table></figure>

<h2 id="使用-Docker-镜像"><a href="#使用-Docker-镜像" class="headerlink" title="使用 Docker 镜像"></a>使用 Docker 镜像</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><blockquote>
<p><code>docker pull [选项] [Docker Registry 地址[:端口号]/][用户名]&lt;仓库名&gt;[:TAG]</code></p>
</blockquote>
<ul>
<li>默认选项<ul>
<li><code>-a</code>，<code>--all-tags=true|false</code>：是否获取仓库中的所有镜像，默认为否</li>
<li><code>--disable-content-trust</code>：取消镜像的内容校验，默认为真</li>
</ul>
</li>
<li>默认 Docker Registry：<code>registry.hub.docker.com</code></li>
<li>默认用户名：<code>library</code>，也就是官方镜像</li>
<li>默认TAG：<code>latest</code></li>
</ul>
<h3 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h3><h4 id="列出本地主机上已有镜像"><a href="#列出本地主机上已有镜像" class="headerlink" title="列出本地主机上已有镜像"></a>列出本地主机上已有镜像</h4><blockquote>
<p><code>docker image ls</code> | <code>docker images</code></p>
</blockquote>
<p>镜像的大小信息只是表示了该镜像的逻辑体积大小，实际上由于相同的镜像层本地只会存储一份，物理上占用的存储空间会小于各镜像逻辑体积之和。</p>
<h4 id="使用-tag-命令添加镜像标签"><a href="#使用-tag-命令添加镜像标签" class="headerlink" title="使用 tag 命令添加镜像标签"></a>使用 tag 命令添加镜像标签</h4><blockquote>
<p><code>docker tag ubuntu:latest myubuntu:latest</code></p>
</blockquote>
<p>为了方便在后续工作中使用特定镜像，还可以使用 <code>docker tag</code> 命令来为本地镜像任意添加新的标签。</p>
<h4 id="使用-inspect-命令查看详细信息"><a href="#使用-inspect-命令查看详细信息" class="headerlink" title="使用 inspect 命令查看详细信息"></a>使用 inspect 命令查看详细信息</h4><blockquote>
<p><code>docker inspect &lt;仓库&gt;</code></p>
</blockquote>
<p>使用 <code>docker inspect</code> 命令可以获取该镜像的详细信息，包括制作者、适应架构、各层的数字摘要等。</p>
<h4 id="使用-history-命令查看镜像历史"><a href="#使用-history-命令查看镜像历史" class="headerlink" title="使用 history 命令查看镜像历史"></a>使用 history 命令查看镜像历史</h4><blockquote>
<p><code>docker history &lt;REPOSITORY&gt;[:TAG]</code> 或 <code>docker history &lt;IMAGE ID&gt;</code></p>
</blockquote>
<p>注意，过长的命令会被自动截断了，可以使用 <code>--no-trunc</code> 选项来输出完整命令。</p>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>1、使用标签删除镜像</p>
<blockquote>
<p><code>docker rmi &lt;IMAGE&gt; [IMAGE...]</code> 或 <code>docker image rm &lt;IMAGE&gt; [IMAGE...]</code></p>
</blockquote>
<p>2、使用镜像 ID 来删除镜像</p>
<blockquote>
<p><code>docker rmi &lt;IMAGE ID&gt;</code></p>
</blockquote>
<p>当使用 <code>docker rmi</code> 命令，并且后面跟上镜像的 ID（也可以是能进行区分的部分 ID 串前缀）时，会先尝试删除所有指向该镜像的标签，然后删除该镜像文件本身。</p>
<blockquote>
<p>注意，当有基于该镜像创建的容器时，镜像文件默认是无法被删除的。我们可以使用 <code>docker ps -a</code> 命令可以查看本机上存在的所有容器。</p>
<p>最佳实践：先用 <code>docker rm &lt;Container ID&gt;</code> 删除依赖该镜像的所有容器，然后执行 <code>docker rmi &lt;IMAGE ID&gt;</code> 再来删除镜像。</p>
</blockquote>
<h3 id="清理镜像"><a href="#清理镜像" class="headerlink" title="清理镜像"></a>清理镜像</h3><blockquote>
<p><code>docker image prune [options]</code></p>
<ul>
<li><code>-a</code>，<code>--all</code>：删除所有无用镜像，不光是临时镜像</li>
<li><code>-f</code>,<code>--force</code>：强制删除镜像，而不进行提示确认</li>
</ul>
</blockquote>
<p>使用 Docker 一段时间后，系统中可能会遗留一些临时的镜像文件，以及没有使用的镜像，可以通过 <code>docker image prune</code> 命令来进行清理。</p>
<p>我们可以结合 crontab 来定时清理，执行 <code>crontab -e</code>，写入一下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一定要记得在后面按 Enter 输入换行符，否则不会生效的</span></span><br><span class="line">59 23 * * * docker image prune -f</span><br></pre></td></tr></table></figure>

<h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><h4 id="1、基于已有容器创建"><a href="#1、基于已有容器创建" class="headerlink" title="1、基于已有容器创建"></a>1、基于已有容器创建</h4><blockquote>
<p><code>docker commit [OPTIONS] &lt;CONTAINER&gt; &lt;REPOSITORY&gt;[:TAG]</code></p>
<ul>
<li><code>-a</code>，<code>--author=</code>：作者信息</li>
<li><code>-m</code>，<code>--message=&quot;&quot;</code>：提交信息</li>
<li><code>-p</code>，<code>--pause=true</code>：提交时暂停容器执行</li>
</ul>
</blockquote>
<p>首先，启动一个 alpine 镜像，并在其中进行安装 nano 的操作，然后发布一个新的镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it alpine bash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker commit -m <span class="string">&quot;install nano&quot;</span> -a <span class="string">&quot;杨俊宁&quot;</span> ff3034d2ffa7 my-alpine:0.1</span></span><br></pre></td></tr></table></figure>

<h4 id="2、基于-Dockerfile-创建"><a href="#2、基于-Dockerfile-创建" class="headerlink" title="2、基于 Dockerfile 创建"></a>2、基于 Dockerfile 创建</h4><blockquote>
<p><code>docker build -t &lt;IMAGE NAME&gt; &lt;上下文路径/URL/-&gt;</code></p>
</blockquote>
<p>通过 Dockerfile 创建是最常见的方式。Dockerfile 是一个文本文件，利用指定的指令描述基于某个父镜像创建新镜像的过程。</p>
<p>下面给出 Dockerfile 的一个简单示例，基于 alpine 镜像安装 node 环境，构成一个新的 <code>youngjuning/alpine</code> 镜像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line"></span><br><span class="line">LABEL version&#x3D;&quot;1.0&quot; maintainer&#x3D;&quot;youngjuning&lt;youngjuning@aliyun.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">RUN sed -i &#39;s&#x2F;dl-cdn.alpinelinux.org&#x2F;mirrors.aliyun.com&#x2F;g&#39; &#x2F;etc&#x2F;apk&#x2F;repositories</span><br></pre></td></tr></table></figure>

<p>构建：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t youngjuning/alpine:latest .</span></span><br></pre></td></tr></table></figure>

<h3 id="存储镜像"><a href="#存储镜像" class="headerlink" title="存储镜像"></a>存储镜像</h3><p>如果要导出镜像到本地文件，可以使用 <code>docker save</code> 命令。该命令支持 <code>-o &lt;string&gt;</code> 或 <code>--output &lt;string&gt;</code> 参数，导出镜像到指定的文件中。</p>
<p>例如，导出本地 alpine 镜像为文件 alpine.tar，如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker save -o alpine.tar alpine</span></span><br></pre></td></tr></table></figure>

<p>之后，用户就可以通过复制 alpine.tar 文件将该镜像分享给他人。</p>
<h3 id="载入镜像"><a href="#载入镜像" class="headerlink" title="载入镜像"></a>载入镜像</h3><p>可以使用 <code>docker load</code> 将导出的 tar 文件再导入到本地镜像库。支持 <code>-i &lt;string&gt;</code> 或 <code>-input &lt;string&gt;</code> 选项，从指定文件中读入镜像内容。</p>
<p>例如，从文件 alpine.tar 导入镜像到本地镜像列表，如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker load -i alpine.tar</span></span><br></pre></td></tr></table></figure>

<h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><blockquote>
<p><code>docker push [选项] [Docker Registry 地址[:端口号]/][用户名]&lt;仓库名&gt;[:TAG]</code></p>
</blockquote>
<p><strong>发布新版本流程：</strong></p>
<ul>
<li>发布 latest 版本：<code>docker push youngjuning/alpine:latest</code></li>
<li>添加新标签：<code>docker tag youngjuning/alpine:latest youngjuning/alpine:1.0.0</code></li>
<li>发布 1.0.0 版本：<code>docker push youngjuning/alpine:1.0.0</code></li>
</ul>
<blockquote>
<p>可以查看<span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL3lvdW5nanVuaW5nL2FscGluZQ==" title="https://hub.docker.com/r/youngjuning/alpine">youngjuning/alpine<i class="fa fa-external-link"></i></span>项目查看我发布的基于aliyun镜像的 Aplpine Docker Image</p>
</blockquote>
<h2 id="操作-Docker-容器"><a href="#操作-Docker-容器" class="headerlink" title="操作 Docker 容器"></a>操作 Docker 容器</h2><ul>
<li>Docker 容器是镜像的一个运行实例。</li>
<li>Docker 容器是独立运行的一个（或一组）应用，以及它们必需的运行环境</li>
</ul>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><h4 id="1、新建并启动"><a href="#1、新建并启动" class="headerlink" title="1、新建并启动"></a>1、新建并启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it ubuntu:18.04 /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>其中, <code>-t</code> 选项让 Docker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上，<code>-i</code> 则让容器的标准输入保持打开。</p>
<p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p>
<ol>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂在一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个ip地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ol>
<p><strong>一些常用选项：</strong></p>
<ul>
<li><code>-d</code>，<code>--detach=true|false</code>：是否在后台运行容器，默认为<code>false</code></li>
<li><code>-i</code>，<code>--interactive=true|false</code>：保持标准输入打开，默认为 <code>false</code></li>
<li><code>-p</code>，<code>--publish=[]</code>：指定如何映射到本地主机端口，例如 <code>-p 9000:9000</code></li>
<li><code>--restart=&quot;no&quot;</code>：容器的重启策略，包括 <code>no</code>、<code>on-failure[:max-retry]</code>、<code>always</code>、<code>unless-stopped</code> 等</li>
<li><code>--rm=true|false</code>：容器退出后是否自动删除，不能跟 <code>-d</code> 同时使用</li>
<li><code>-t</code>，<code>--tty=true|false</code>：是否分配一个伪终端，默认为 <code>false</code></li>
<li><code>-v [HOST-DIR:]&lt;CONTAINER-DIR&gt;[:OPTIONS]</code>，<code>--volume=[HOST-DIR:]&lt;CONTAINER-DIR&gt;[:OPTIONS]</code>：挂在主机上的文件卷到容器内</li>
<li><code>--name=&quot;&quot;</code>：指定容器的别名</li>
</ul>
<h4 id="2、启动已终止容器"><a href="#2、启动已终止容器" class="headerlink" title="2、启动已终止容器"></a>2、启动已终止容器</h4><p>可以利用 <code>docker start &lt;CONTAINER ID&gt;</code> 命令，直接将一个已经终止的容器启动运行。</p>
<h4 id="3、查看容器输出"><a href="#3、查看容器输出" class="headerlink" title="3、查看容器输出"></a>3、查看容器输出</h4><p>要获取容器的输出信息，可以通过 <code>docker &lt;CONTAINER ID&gt; logs</code> 命令。</p>
<h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><p>可以使用 <code>docker stop &lt;CONTAINER ID&gt;</code> 来终止一个运行中的容器。</p>
<p>处于终止状态的容器，可以通过 <code>docker container start</code> 命令来重新启动。</p>
<p>此外，<code>docker container restart</code> 命令会将一个运行态的容器终止，然后再重新启动它。</p>
<h3 id="exec进入容器"><a href="#exec进入容器" class="headerlink" title="exec进入容器"></a><code>exec</code>进入容器</h3><p>在使用 <code>-d</code> 参数时，容器启动后会进入后台。</p>
<p>某些时候需要进入容器进行操作，推荐大家使用 <code>docker exec</code> 命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -dit alpine</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND             CREATED             STATUS              PORTS                      NAMES</span><br><span class="line">3d95dabef801        alpine                &quot;/bin/sh&quot;           21 seconds ago      Up 19 seconds                                  recursing_aryabhata</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it &lt;CONTAINER ID&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果从这个 stdin 中 exit，不会导致容器的停止。</p>
<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>可以使用 <code>docker container rm</code> 来删除一个处于终止状态的容器。例如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm  &lt;CONTAINER ID&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除运行中的容器，并删除容器挂载的数据卷</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rm -vf</span></span><br></pre></td></tr></table></figure>

<p>如果要删除一个运行中的容器，可以添加 <code>-f</code> 参数。Docker 会发送 <code>SIGKILL</code> 信号给容器。</p>
<h3 id="清理所有处于终止状态的容器"><a href="#清理所有处于终止状态的容器" class="headerlink" title="清理所有处于终止状态的容器"></a>清理所有处于终止状态的容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker container prune</span></span><br></pre></td></tr></table></figure>

<h3 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">export</span> 7691a814370e &gt; ubuntu.tar</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ubuntu.tar | docker import - <span class="built_in">test</span>/ubuntu:v1.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker import http://example.com/exampleimage.tgz example/imagerepo</span></span><br></pre></td></tr></table></figure>

<h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><h4 id="查看容器详情"><a href="#查看容器详情" class="headerlink" title="查看容器详情"></a>查看容器详情</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect [OPTIONS] &lt;CONTAINER ID&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="查看容器内进程"><a href="#查看容器内进程" class="headerlink" title="查看容器内进程"></a>查看容器内进程</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top [OPTIONS] &lt;CONTAINER ID&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="查看统计信息"><a href="#查看统计信息" class="headerlink" title="查看统计信息"></a>查看统计信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stats [OPTIONS] &lt;CONTAINER ID&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="更新配置"><a href="#更新配置" class="headerlink" title="更新配置"></a>更新配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker update --restart=always &lt;CONTAINER ID&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="重命名容器"><a href="#重命名容器" class="headerlink" title="重命名容器"></a>重命名容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rename &lt;old name&gt; &lt;new name&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs -f &lt;CONTAINER ID&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Portainer-容器管理工具"><a href="#Portainer-容器管理工具" class="headerlink" title="Portainer 容器管理工具"></a>Portainer 容器管理工具</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker volume create portainer_data</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 9000:9000 \</span></span><br><span class="line">        -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">        -v portainer_data:/data \</span><br><span class="line">        --name portainer \</span><br><span class="line">        --restart always \</span><br><span class="line">        portainer/portainer</span><br></pre></td></tr></table></figure>

<p>配置 <code>/etc/nginx/sites-enabled/dafulat</code> 文件：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> portainer &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> /portainer/ &#123;</span><br><span class="line">      <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://portainer/;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> /portainer/ws/ &#123;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">      <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://portainer/ws/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Docker-数据持久化"><a href="#Docker-数据持久化" class="headerlink" title="Docker 数据持久化"></a>Docker 数据持久化</h2><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>
<ul>
<li><code>数据卷</code> 可以在容器之间共享和重用</li>
<li>对 <code>数据卷</code> 的修改会立马生效</li>
<li>对 <code>数据卷</code> 的更新，不会影响镜像</li>
<li><code>数据卷</code> 默认会一直存在，即使容器被删除</li>
</ul>
<h3 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker volume create my-vol</span></span><br></pre></td></tr></table></figure>

<p>除了 <code>create</code> 子命令外，docker volume 还支持 <code>inspect</code>(查看详细信息)、<code>ls</code>（列出已有数据卷）、<code>prune</code>（清理无用数据卷）、<code>rm</code>（删除数据卷）</p>
<h3 id="绑定数据卷"><a href="#绑定数据卷" class="headerlink" title="绑定数据卷"></a>绑定数据卷</h3><h4 id="mount"><a href="#mount" class="headerlink" title="--mount"></a><code>--mount</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -P \</span><br><span class="line">    --name web \</span><br><span class="line">    --mount <span class="built_in">source</span>=my-vol,target=/webapp \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure>

<h4 id="v，-volume"><a href="#v，-volume" class="headerlink" title="-v，--volume"></a><code>-v</code>，<code>--volume</code></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P \</span></span><br><span class="line">    --name web \</span><br><span class="line">    -v my-vol:/wepapp \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure>

<blockquote>
<p>source 也可以是绝对路径的任意系统位置。</p>
</blockquote>
<blockquote>
<p>如果直接挂载一个文件到容器，使用文件编辑工具，包括 vi 或者 <code>sed --in-place</code> 的时候，可能会造成文件 inode 的改变，从 Docker 1.1 起，这会导致报错误信息。所以推荐的方式是直接挂载文件所在的目录到容器内。</p>
</blockquote>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><blockquote>
<p>详细指令详解请查看：<span class="exturl" data-url="aHR0cHM6Ly92dWVwcmVzcy5taXJyb3IuZG9ja2VyLXByYWN0aWNlLmNvbS9pbWFnZS9kb2NrZXJmaWxlLw==" title="https://vuepress.mirror.docker-practice.com/image/dockerfile/">Dockerfile 指令详解<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p><img src="https://i.loli.net/2020/04/11/hmlMV4QA2opON9j.png" alt=""></p>
<h2 id="应用安装"><a href="#应用安装" class="headerlink" title="应用安装"></a>应用安装</h2><h3 id="GitLab-及其官方镜像"><a href="#GitLab-及其官方镜像" class="headerlink" title="GitLab 及其官方镜像"></a>GitLab 及其官方镜像</h3><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">&#x27;gitlab/gitlab-ce:latest&#x27;</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">hostname:</span> <span class="string">&#x27;gitlab.yangjunning.pro&#x27;</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">external_url</span> <span class="string">&#x27;http://gitlab.yangjunning.pro:8929&#x27;</span></span><br><span class="line">      <span class="string">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;]</span> <span class="string">=</span> <span class="number">2224</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;8929:8929&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;2224:22&#x27;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;gitlab_config:/etc/gitlab&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;gitlab_logs:/var/log/gitlab&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;gitlab_data:/var/opt/gitlab&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>

<h4 id="更新-gitlab"><a href="#更新-gitlab" class="headerlink" title="更新 gitlab"></a>更新 gitlab</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose pull</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up -d</span></span><br></pre></td></tr></table></figure>

<h2 id="Docker-相关的定时任务"><a href="#Docker-相关的定时任务" class="headerlink" title="Docker 相关的定时任务"></a>Docker 相关的定时任务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># crontab -e</span><br><span class="line"># 每天凌晨强制删除无用镜像，不光是临时镜像；每天凌晨清理无用的数据卷</span><br><span class="line">00 00 * * * docker image prune -af &amp;&amp; docker volume prune -f &amp;&amp; rsync -arv &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes &#x2F;backups&#x2F;docker</span><br></pre></td></tr></table></figure>

<blockquote>
<p>qshell 同步文件到七牛云的配置请参考<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTgxZTJkYjUxODgyNTczN2I0YWQ5MTEjaGVhZGluZy01OQ==" title="https://juejin.im/post/5e81e2db518825737b4ad911#heading-59">备份到七牛云<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><p>DevOps（<strong>Dev</strong>elopment和<strong>Op</strong>erations的组合词）是一种重视软件开发人员（Dev）和IT运维技术人员（Ops）之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。</p>
<p>DevOps 的引入能对产品交付、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kv5rWL6K+V" title="https://zh.wikipedia.org/wiki/测试">测试<i class="fa fa-external-link"></i></span>、功能开发和<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kv6Luf6auU57at6K23" title="https://zh.wikipedia.org/wiki/軟體維護">维护<i class="fa fa-external-link"></i></span>（包括曾经罕见但如今已屡见不鲜的“<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSG90X2ZpeA==" title="https://zh.wikipedia.org/wiki/Hot_fix">热补丁<i class="fa fa-external-link"></i></span>”）起到意义深远的影响。在缺乏 DevOps 能力的组织中，开发与运营之间存在着信息“鸿沟”。例如运营人员要求更好的可靠性和安全性，开发人员则希望<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kv5Z+656GA6K6+5pa9" title="https://zh.wikipedia.org/wiki/基础设施">基础设施<i class="fa fa-external-link"></i></span>响应更快，而业务用户的需求则是更快地将更多的特性发布给最终用户使用。这种信息鸿沟就是最常出问题的地方。</p>
<h3 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h3><p>在计算机技术中，虚拟化是一种资源管理技术，是将计算机中的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以用比原来的组态更好的方式来应用这些资源。</p>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。与虚拟化相比，这样既不需要指令级模拟，也不需要即时编译。容器可以在核心 CPU 本地运行指令，而不需要任何专门的解释机制。此外，也避免了准虚拟化（para-virtualization）和系统调用替换中的复杂性。</p>
<h3 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h3><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVW5pb25fbW91bnQ=" title="https://en.wikipedia.org/wiki/Union_mount">Union FS<i class="fa fa-external-link"></i></span> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p>
<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>
<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>
<h3 id="守护进程-daemon"><a href="#守护进程-daemon" class="headerlink" title="守护进程 daemon"></a>守护进程 daemon</h3><p>在一个多任务的电脑操作系统中，守护进程（daemon）是一种在后台执行的电脑程序。此类程序会被以进程的形式初始化。守护进程程序的名称通常以字母”d“结尾：例如，<code>syslogd</code> 就是指管理系统日志的守护进程。</p>
<p>通常，守护进程没有任何存在的父进程（即PPID=1），且在 UNIX 系统进程层级中直接位于 init 之下。守护进程程序通常通过如下方法是自己成为守护进程：对一个子进程进行 fork，然后使其父进程立即终止，使得这个子进程能在 init 下运行。这种方法通常被称为”脱壳“。</p>
<p>系统通常在启动时一同引导守护进程。守护进程为对网络请求，硬件活动等进行响应，或其他通过某些任务对其他应用程序的请求进行回应提供支持。守护进程也能够对硬件进行配置（如某些Linux系统上的devfsd），运行计划任务（例如cron），以及运行其他任务。</p>
<p>在 DOS 环境中，此类应用程序被称为驻留程序（TSR）。在 Windows 系统中，由称为 Windows服务的应用程序来履行守护进程的职责。</p>
<p>在原本的 Mac OS 系统中，此类应用程序被称为”extensions“。而作为 Unux-like 的 Mac OS X 有守护进程。</p>
<h3 id="Docker-与虚拟机比较"><a href="#Docker-与虚拟机比较" class="headerlink" title="Docker 与虚拟机比较"></a>Docker 与虚拟机比较</h3><table>
<thead>
<tr>
<th>特性</th>
<th>容器</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody><tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
<tr>
<td>硬盘使用</td>
<td>一般为 <code>MB</code></td>
<td>一般为 <code>GB</code></td>
</tr>
<tr>
<td>性能</td>
<td>接近原生</td>
<td>弱于</td>
</tr>
<tr>
<td>系统支持量</td>
<td>单机支持上千个容器</td>
<td>一般几十个</td>
</tr>
</tbody></table>
<p>如下图，虚拟机是在硬件层面实现虚拟化，需要额外的虚拟机管理应用和虚拟机操作系统层。Docker容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，因此更加轻量级。</p>
<p><img src="https://i.loli.net/2020/03/31/mZiyHL2kGAgrMFx.png" alt=""></p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZvcHMucGhvZGFsLmNvbS8=" title="https://devops.phodal.com/">DevOps 知识平台 Ledge<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjZhZjc1OWU1MWQ0NTE5NTExMzhlYjQjaGVhZGluZy03" title="https://juejin.im/post/5b6af759e51d451951138eb4#heading-7">jenkins+docker 持续集成<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="待实践"><a href="#待实践" class="headerlink" title="待实践"></a>待实践</h2><ul>
<li>SonarQube</li>
<li>Nexus Repository Manager</li>
<li>ShowDoc</li>
<li>Verdaccio</li>
<li>EasyMock</li>
<li>Sentry</li>
<li>Ansible</li>
<li>code-push-server</li>
<li>BugOut</li>
</ul>
<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
<th align="center">公众号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员的Mac开发环境</title>
    <url>/2020/03/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84Mac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/07/dPCm6qwpsZn8k1o.png" alt=""></p>
<a id="more"></a>

<h2 id="ohmyzsh"><a href="#ohmyzsh" class="headerlink" title="ohmyzsh"></a>ohmyzsh</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换 shell 为 zsh</span></span><br><span class="line">$ chsh -s /bin/zsh</span><br><span class="line"><span class="comment"># 通过 curl 安装 ohmyzsh</span></span><br><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><blockquote>
<p>建议使用：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtaXgvdmltcmM=" title="https://github.com/amix/vimrc">https://github.com/amix/vimrc<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh ~/.vim_runtime/install_awesome_vimrc.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;set number&quot;</span> &gt;&gt; ~/.vimrc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;set showcmd&quot;</span> &gt;&gt; ~/.vimrc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.vimrc</span></span><br></pre></td></tr></table></figure>

<h3 id="Agnoster-主题配置"><a href="#Agnoster-主题配置" class="headerlink" title="Agnoster 主题配置"></a>Agnoster 主题配置</h3><ul>
<li>终端执行 <code>open ~/.zshrc</code></li>
<li>找到 ZSH_THEME 修改为: <code>ZSH_THEME=&quot;agnoster&quot;</code></li>
<li><code>source ~/.zshrc</code></li>
<li>安装 Powerline 对应的字体库<ul>
<li><code>git clone https://github.com/powerline/fonts.git</code></li>
<li><code>cd fonts</code></li>
<li><code>install.sh</code></li>
<li><code>cd ..</code></li>
<li><code>rm -rf fonts</code></li>
<li>进入：终端 &gt; 偏好设置 &gt; 字体修改为 ：<code>Meslo LG S DZ Regular for Powerline</code>。<br> <img src="https://i.loli.net/2020/03/25/wHBrfAs2kScPjYR.png" alt=""></li>
</ul>
</li>
</ul>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h4><ul>
<li>安装: <code>brew install zsh-syntax-highlighting</code></li>
<li>Oh-my-zsh<ul>
<li><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</code></li>
<li><code>plugins=( [plugins...] zsh-syntax-highlighting)</code></li>
<li><code>source ~/.zshrc</code></li>
</ul>
</li>
</ul>
<h4 id="WakaTime-for-Terminal"><a href="#WakaTime-for-Terminal" class="headerlink" title="WakaTime for Terminal"></a>WakaTime for Terminal</h4><ul>
<li><code>sudo easy_install pip</code></li>
<li><code>sudo pip install wakatime</code></li>
<li><code>cd ~/.oh-my-zsh/custom/plugins</code></li>
<li><code>git clone https://github.com/sobolevn/wakatime-zsh-plugin.git wakatime</code></li>
<li>在你的 <code>~/.zshrc</code> 文件的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2gvd2lraS9FeHRlcm5hbC1wbHVnaW5z" title="https://github.com/robbyrussell/oh-my-zsh/wiki/External-plugins">list of plugins<i class="fa fa-external-link"></i></span> 添加 <code>wakatime</code></li>
<li><code>source ~/.zshrc</code></li>
<li>确保你的  <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dha2F0aW1lL3dha2F0aW1lI2NvbmZpZ3VyaW5n" title="https://github.com/wakatime/wakatime#configuring">~/.wakatime.cfg<i class="fa fa-external-link"></i></span> 文件中配置了 <span class="exturl" data-url="aHR0cHM6Ly93YWthdGltZS5jb20vc2V0dGluZ3MvYXBpLWtleQ==" title="https://wakatime.com/settings/api-key">API key<i class="fa fa-external-link"></i></span> 。</li>
</ul>
<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>访问 <span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNoL2luZGV4X3poLWNu" title="https://brew.sh/index_zh-cn">brew.sh<i class="fa fa-external-link"></i></span> 安装。使用 Homebrew 安装 Apple（或您的 Linux 系统）没有预装但 <span class="exturl" data-url="aHR0cHM6Ly9mb3JtdWxhZS5icmV3LnNoL2Zvcm11bGEv" title="https://formulae.brew.sh/formula/">你需要的东西<i class="fa fa-external-link"></i></span>。Homebrew</p>
<p>将大大降低维护环境的时间。本文后面将尽可能使用HomeBrew。</p>
<ul>
<li><code>brew install</code> : 安装</li>
<li><code>brew uninstall</code>:  卸载</li>
<li><code>brew update</code>: 更新 homebrew</li>
<li><code>brew upgrade</code> : 更新已安装软件</li>
<li><code>brew cleanup</code>: 清理</li>
<li>一键清理: <code>brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup</code></li>
</ul>
<h2 id="d8"><a href="#d8" class="headerlink" title="d8"></a>d8</h2><blockquote>
<p>不要使用 <code>brew install v8</code>，可用命令是不完整的</p>
</blockquote>
<h3 id="预备条件"><a href="#预备条件" class="headerlink" title="预备条件"></a>预备条件</h3><ul>
<li>Install Xcode (Avaliable on the Mac App Store)</li>
<li>Install Xcode Command Line Tools (Preferences &gt; Downloads)</li>
<li>Install <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hyb21pdW0ub3JnL2RldmVsb3BlcnMvaG93LXRvcy9pbnN0YWxsLWRlcG90LXRvb2xz" title="https://www.chromium.org/developers/how-tos/install-depot-tools">depot_tools<i class="fa fa-external-link"></i></span><ul>
<li><code>cd ~ &amp;&amp; git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</code></li>
<li><code>sudo nano ~/.zshrc</code>(zsh) or <code>sudo nano ~/.bash_profile</code>(bash)</li>
<li>Add <code>export PATH=~/depot_tools:&quot;$PATH&quot;</code> (it’s important that depot_tools comes first here)</li>
<li><code>source ~/.zshrc</code></li>
<li>From the directory you want to install V8 into, run <code>gclient</code></li>
</ul>
</li>
</ul>
<h3 id="Build-V8"><a href="#Build-V8" class="headerlink" title="Build V8"></a>Build V8</h3><ul>
<li><p><code>fetch v8</code></p>
</li>
<li><p><code>cd ~/v8</code></p>
</li>
<li><p><code>gclient sync</code></p>
</li>
<li><p><code>tools/dev/v8gen.py x64.optdebug</code></p>
</li>
<li><p><code>ninja -C out.gn/x64.optdebug</code> (prepare for lots of fan noise)</p>
<p>I’d also recommend adding these to your <code>.zshrc</code>:</p>
</li>
<li><p><code>sudo nano ~/.zshrc</code></p>
</li>
<li><p>Add <code>alias d8=~/v8/out.gn/x64.optdebug/d8</code></p>
</li>
<li><p>Add <code>alias tick-processor=~/v8/tools/mac-tick-processor</code></p>
</li>
<li><p>Add <code>export D8_PATH=&quot;~/v8/out.gn/x64.optdebug&quot;</code></p>
</li>
<li><p><code>source ~/.zshrc</code></p>
</li>
</ul>
<blockquote>
<p>使用 Demo 请参考 <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20va2V2aW5jZW5uaXMvMGNkMjEzOGM3OGEwNzQxMmVmMjEjZDgtc2hlbGwtZXhhbXBsZXM=" title="https://gist.github.com/kevincennis/0cd2138c78a07412ef21#d8-shell-examples">d8-shell-examples<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// Re-installing Git on Mac OSX with Brew</span><br><span class="line">$ <span class="built_in">alias</span> git=<span class="string">&#x27;/usr/local/bin/git&#x27;</span></span><br><span class="line">$ brew install git</span><br></pre></td></tr></table></figure>

<h3 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXNrdG9wLmdpdGh1Yi5jb20v" title="https://desktop.github.com/">GitHub Desktop<i class="fa fa-external-link"></i></span>: GitHub Desktop简化了您的开发工作流程</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc291cmNldHJlZWFwcC5jb20v" title="https://www.sourcetreeapp.com/">Sourcetree<i class="fa fa-external-link"></i></span>: Simplicity and power in a beautiful Git GUI</li>
</ul>
<h3 id="命令行配置"><a href="#命令行配置" class="headerlink" title="命令行配置"></a>命令行配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、初始化设置</span></span><br><span class="line">$ git config --global user.name <span class="string">&#x27;youngjuning&#x27;</span></span><br><span class="line">$ git config --global user.email <span class="string">&#x27;youngjuning@aliyun.com&#x27;</span></span><br><span class="line"><span class="comment"># 2、将 `color.ui` 设置为 `auto` 可以让命令的输出拥有更高的可读性。</span></span><br><span class="line">$ git config --global color.ui auto</span><br><span class="line"><span class="comment"># 3、git 记住用户名和密码</span></span><br><span class="line">$ git config --global credential.helper store</span><br><span class="line"><span class="comment"># 4、core.autocrlf</span></span><br><span class="line">$ git config --global core.autocrlf input</span><br><span class="line"><span class="comment"># 5、输出到terminal而不是vim</span></span><br><span class="line">$ git config --global pager.branch <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Linux或Mac系统使用LF作为行结束符，因此你不想 Git 在签出文件时进行自动的转换；当一个以 <code>CRLF</code> 为行结束符的文件不小心被引入时你肯定想进行修正，把 <code>core.autocrlf</code> 设置成 <code>input</code> 来告诉 Git 在提交时把 <code>CRLF</code> 转换成 <code>LF</code>，签出时不转换：<br>这样会在 Windows 系统上的签出文件中保留 <code>CRLF</code>，会在 Mac 和 Linux 系统上，包括仓库中保留 <code>LF</code>。</p>
</blockquote>
<h2 id="GitHub-加速"><a href="#GitHub-加速" class="headerlink" title="GitHub 加速"></a>GitHub 加速</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ALL_PROXY=<span class="string">&quot;socks5://127.0.0.1:7891&quot;</span></span><br></pre></td></tr></table></figure>

<p>7981 是你的代理端口，每个人的不一定一样！！！</p>
<p><img src="https://user-images.githubusercontent.com/13204332/80474227-ce18c780-8979-11ea-8024-31bc0503f964.jpg" alt="12851588067873_ pic_hd"></p>
<h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3Yy" title="https://git-scm.com/book/zh/v2">官方Book<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3JvZ2VyZHVkbGVyLmdpdGh1Yi5pby9naXQtZ3VpZGUvaW5kZXguemguaHRtbA==" title="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南<i class="fa fa-external-link"></i></span>：助你入门 git 的简明指南，木有高深内容</li>
<li><span class="exturl" data-url="aHR0cDovL3QuY24vUkswdExYQg==" title="http://t.cn/RK0tLXB">廖雪峰的git教程<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9iYWNrbG9nLmNvbS9naXQtdHV0b3JpYWwvY24v" title="https://backlog.com/git-tutorial/cn/">猴子都能懂的GIT入门<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。我们使用 <code>n</code> 模块来维护 Node 的版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install n</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装最新版</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo n latest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 其他命令##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo n 10.16.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装最新的稳定版</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo n lts</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除指定版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> n rm 12.10.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 除去当前版本以外的所有缓存版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> n prune</span></span><br></pre></td></tr></table></figure>

<h3 id="更新npm"><a href="#更新npm" class="headerlink" title="更新npm"></a>更新npm</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install -g npm</span></span><br></pre></td></tr></table></figure>

<h3 id="nrm-管理-registry"><a href="#nrm-管理-registry" class="headerlink" title="nrm 管理 registry"></a>nrm 管理 registry</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo i -g nrm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出可用的代理</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nrm ls</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加私有代理</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nrm add sigma http://192.168.2.116:4873 http://192.168.2.116:4873</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换代理到 sigma 源</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nrm use sigma</span></span><br></pre></td></tr></table></figure>

<h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><p>强烈建议一步一步按照官方的 <span class="exturl" data-url="aHR0cHM6Ly9yZWFjdG5hdGl2ZS5jbi9kb2NzL2dldHRpbmctc3RhcnRlZC5odG1s" title="https://reactnative.cn/docs/getting-started.html">搭建开发环境<i class="fa fa-external-link"></i></span> 进行配置。</p>
<h2 id="Navicat-Premium"><a href="#Navicat-Premium" class="headerlink" title="Navicat Premium"></a>Navicat Premium</h2><p>Navicat Premium 是一套数据库开发工具，让你从单一应用程序中同时连接 MySQL、MariaDB、MongoDB、SQL Server、Oracle、PostgreSQL 和 SQLite 数据库。它与 Amazon RDS、Amazon Aurora、Amazon Redshift、Microsoft Azure、Oracle Cloud、MongoDB Atlas、腾讯云和华为云等云数据库兼容。你可以快速轻松地创建、管理和维护数据库。</p>
<blockquote>
<p>Mac版: 链接:<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVNsTDFfYmQ0cWlyTW5GMHNMd1JMaEE=" title="https://pan.baidu.com/s/1SlL1_bd4qirMnF0sLwRLhA">https://pan.baidu.com/s/1SlL1_bd4qirMnF0sLwRLhA<i class="fa fa-external-link"></i></span>  密码:4jq6</p>
</blockquote>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9oay9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamF2YXNlLWpkazgtZG93bmxvYWRzLmh0bWw=" title="https://www.oracle.com/hk/java/technologies/javase/javase-jdk8-downloads.html">javase-jdk8-downloads<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9jbi9qYXZhL3RlY2hub2xvZ2llcy9vcmFjbGUtamF2YS1hcmNoaXZlLWRvd25sb2Fkcy5odG1s" title="https://www.oracle.com/cn/java/technologies/oracle-java-archive-downloads.html">Oracle Java 存档<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h3><ul>
<li>Mac下查看已安装的jdk版本及其安装目录: <code>/usr/libexec/java_home -V</code> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Matching Java Virtual Machines (2):</span><br><span class="line"> 1.8.0_221, x86_64:    <span class="string">&quot;Java SE 8&quot;</span>    /Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home</span><br><span class="line"> 1.7.0_80, x86_64:    <span class="string">&quot;Java SE 7&quot;</span>    /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home</span><br></pre></td></tr></table></figure></li>
<li>查看jre版本: <code>java -version</code></li>
<li>查看jdk版本: <code>javac -version</code></li>
</ul>
<h3 id="管理-jdk-版本"><a href="#管理-jdk-版本" class="headerlink" title="管理 jdk 版本"></a>管理 jdk 版本</h3><blockquote>
<p>参考 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbWFnZXhpL3AvMTIwNTM0MDEuaHRtbA==" title="https://www.cnblogs.com/magexi/p/12053401.html">Mac 多版本 JDK 管理<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>1、下载 jenv:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ brew install jenv</span><br></pre></td></tr></table></figure>

<p>2、安装成功后进行配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Shell: bash</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(jenv init -)&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="comment"># Shell: zsh</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(jenv init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">$ <span class="built_in">exec</span> <span class="variable">$SHELL</span> -l</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：一定要使用命令 <code>source ~/.zshrc</code> 来编译 <code>~/.zshrc</code> 文件</p>
</blockquote>
<p>3、执行 <code>jenv doctor</code> 验证 jenv 是否安装成功，出现以下信息，说明成功了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[OK]    No JAVA_HOME <span class="built_in">set</span></span><br><span class="line">[ERROR]    Java binary <span class="keyword">in</span> path is not <span class="keyword">in</span> the jenv shims.</span><br><span class="line">[ERROR]    Please check your path, or try using /path/to/java/home is not a valid path to java installation.</span><br><span class="line">    PATH : /Users/user/.jenv/libexec:/Users/user/.jenv/shims:/Users/user/.jenv/bin:/usr/<span class="built_in">local</span>/bin:/usr/bin:/bin:/usr/sbin:/sbin</span><br><span class="line">[OK]    Jenv is correctly loaded</span><br></pre></td></tr></table></figure>

<p>4、输入以下命令查看找到的java版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ jenv versions</span><br><span class="line">   * system (set by &#x2F;Users&#x2F;yangjunning&#x2F;.jenv&#x2F;version)</span><br></pre></td></tr></table></figure>

<p>只找到了系统默认的 Java，想要切换版本，请先下载安装不同的版本。</p>
<p>5、使用 <code>jenv add</code> 命令将 JDK 1.7 加入 jenv 中</p>
<blockquote>
<p>版本及路径请通过 <code>/usr/libexec/java_home -V</code> 查看。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/</span><br><span class="line">oracle64-1.7.0.80 added</span><br><span class="line">1.7.0.80 added</span><br><span class="line">1.7 added</span><br></pre></td></tr></table></figure>

<p>6、添加最新的 JDK</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ jenv add $(/usr/libexec/java_home)</span><br></pre></td></tr></table></figure>

<p>7、使用 <code>jenv add</code> 命令将 JDK 1.8 加入 jenv 中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ jenv add &#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_221.jdk&#x2F;Contents&#x2F;Home&#x2F;</span><br><span class="line">oracle64-1.8.0_221 added</span><br><span class="line">1.8.0_221 added</span><br><span class="line">1.8 added</span><br></pre></td></tr></table></figure>

<p>8、选择一个JDK版本，运行 jenv local 命令</p>
<ul>
<li><code>jenv global</code>: 用来设置全局 JDK</li>
<li><code>jenv local</code>: 用来设置当前目录 JDK</li>
<li><code>jenv shell</code>: 用来设置 <code>shell session</code> 中的 JDK</li>
</ul>
<blockquote>
<p>每次切换 JDK 之后，执行 <code>exec $SHELL -l</code> 或者重启终端</p>
</blockquote>
<p>9、Maven 修改</p>
<p>Maven 仍然会使用 <code>/usr/libexec/java_home -v</code> 输出的 JDK，可能与当前使用的 JDK 版本不同。用 <code>jenv enable-plugin maven</code> s命令启用 Maven 插件即可</p>
<h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ brew install maven</span><br></pre></td></tr></table></figure>

<h3 id="配置-Maven-本地仓库"><a href="#配置-Maven-本地仓库" class="headerlink" title="配置 Maven 本地仓库"></a>配置 Maven 本地仓库</h3><p><code>setting.xml</code> 路径为 <code>$&#123;Maven Home&#125;/conf/settings.xml</code> ，Maven Home 可以通过 <code>mvn --version 获取</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>~/maven_repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可将 <code>settings.xml</code> 直接拷贝到 <code>.m2</code> 文件夹下，进行配置。</p>
<p>如果没有 <code>.m2</code> 文件夹时,运行命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mvn <span class="built_in">help</span>:system</span><br></pre></td></tr></table></figure>

<p>然后打开当前用户的目录，可以在其中找到 <code>.m2</code> 文件夹</p>
<h3 id="配置阿里镜像"><a href="#配置阿里镜像" class="headerlink" title="配置阿里镜像"></a>配置阿里镜像</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="升级-maven"><a href="#升级-maven" class="headerlink" title="升级 maven"></a>升级 maven</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ brew unlink</span><br><span class="line">$ brew update</span><br><span class="line">$ brew install maven</span><br></pre></td></tr></table></figure>

<h2 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install mysql</span></span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nano /usr/<span class="built_in">local</span>/etc/my.cnf</span></span><br></pre></td></tr></table></figure>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew services start mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">brew services restart mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">brew services stop mysql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Or, if you don’t want/need a background service you can just run: <code>mysql.server start</code></p>
</blockquote>
<h3 id="安全设置"><a href="#安全设置" class="headerlink" title="安全设置"></a>安全设置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql_secure_installation</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>建立密码验证插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD PLUGIN can be used to test passwords and improve security. It checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD plugin?</span><br><span class="line"></span><br><span class="line">Press y|Y for Yes, any other key for No: y</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择密码规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line"><span class="meta">#</span><span class="bash">长度大于等于8</span></span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed case, and special characters</span><br><span class="line"><span class="meta">#</span><span class="bash">长度大于等于8，数字、大小写字母、特殊符号</span></span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary                  file</span><br><span class="line"><span class="meta">#</span><span class="bash">长度大于等于8，数字、大小写字母、特殊符号和字典文件（慎选！）</span></span><br><span class="line"></span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 1</span><br><span class="line">Please set the password for root here.</span><br><span class="line"></span><br><span class="line">New password: （输入你的密码）</span><br><span class="line">Re-enter new password: （再次输入你的密码）</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建符合规则的新密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Estimated strength of the password: 50         #密码强度</span><br><span class="line">Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除匿名用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br></pre></td></tr></table></figure>
</li>
<li><p>禁止远程登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Normally, root should only be allowed to connect from &#x27;localhost&#x27;. This ensures that someone cannot guess at the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除测试数据表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">By default, MySQL comes with a database named &#x27;test&#x27; that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line"> - Dropping test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line">Success.</span><br></pre></td></tr></table></figure>
</li>
<li><p>Done</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Reloading the privilege tables will ensure that all changes made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line"><span class="meta">#</span><span class="bash">是否重新加载权限表</span></span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done!</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="Your-password-does-not-satisfy-the-current-policy-requirements"><a href="#Your-password-does-not-satisfy-the-current-policy-requirements" class="headerlink" title="Your password does not satisfy the current policy requirements."></a>Your password does not satisfy the current policy requirements.</h4><p>如果你在选择密码规则的时候不小心选择了2，也就是数字、大小写字母、特殊符号和字典文件的组合。这时你会发现 <code>mysql_secure_installation</code>不会再给你机会重新设置了。手动微笑，mmp。方法还是有的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;validate_password%&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/09/m2GRbrPeHDkC7pQ.png" alt=""></p>
<p>使用命令 <code>mysql -u root</code> 登陆，执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set global validate_password.policy=0;</span><br><span class="line">set global validate_password.length=4;</span><br><span class="line"><span class="meta">#</span><span class="bash">将密码规则设置为LOW，就可以使用纯数字纯字母密码</span></span><br></pre></td></tr></table></figure>

<h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root -p</span></span><br></pre></td></tr></table></figure>

<h2 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h2><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9tb25nb2RiL21vbmdvZGItb3N4LWluc3RhbGwuaHRtbA==" title="https://www.runoob.com/mongodb/mongodb-osx-install.html">Mac OSX 平台安装 MongoDB<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuMzJlLnRvcC9zeXN0ZW0vbWFjL2FydGljbGUtODcuaHRtbA==" title="https://www.32e.top/system/mac/article-87.html">Mac下安装MongoDB数据库-启动-停止-开启验证-登陆<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly91aXpwaC5jb20vYXJ0aWNsZS81ZGIxNzdlNGE5ZjEzZDdmNTM1ODEwYzU=" title="https://uizph.com/article/5db177e4a9f13d7f535810c5">【环境搭建：二】Mac安装、配置MongoDB<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mNWFmYzY0ODhmOWU=" title="https://www.jianshu.com/p/f5afc6488f9e">MongoDB的用户创建更新及删除<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNDQ2NTUx" title="https://cloud.tencent.com/developer/article/1446551">MongoDB 用户名密码登录 认证登陆<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h3 id="下载安装-1"><a href="#下载安装-1" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ brew install mongodb/brew/mongodb-community</span><br><span class="line">$ mongod -version</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="启动-mongo"><a href="#启动-mongo" class="headerlink" title="启动 mongo"></a>启动 mongo</h4><p>1、新建 dbpath</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir ~/data/db</span><br><span class="line">$ sudo mkdir ~/data/<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>2、启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo mongod --dbpath ~/data/db --fork --logpath ~/data/<span class="built_in">log</span>/mongo.log</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：Mac OS 10.15.1版本之后， <code>/data/db</code> 文件夹消失了，重新创建文件夹提示 <code>mkdir: /data/db: Read-only file system</code>，解决办法也可以是 <code>sudo mkdir ~/data/db &amp;&amp; sudo mongodb --dbpath ~/data/db</code></p>
</blockquote>
<h4 id="设置验证和用户名密码"><a href="#设置验证和用户名密码" class="headerlink" title="设置验证和用户名密码"></a>设置验证和用户名密码</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mongo</span><br><span class="line"><span class="comment"># 创建超级管理员</span></span><br><span class="line">&gt; db.createUser(&#123; user: <span class="string">&quot;root&quot;</span> , <span class="built_in">pwd</span>: <span class="string">&quot;123456&quot;</span>, roles: [<span class="string">&quot;root&quot;</span>]&#125;);</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">   <span class="string">&quot;user&quot;</span> : <span class="string">&quot;root&quot;</span>,</span><br><span class="line">   <span class="string">&quot;roles&quot;</span> : [<span class="string">&quot;root&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 尝试使用上面创建的用户信息进行连接。</span></span><br><span class="line">&gt; db.auth(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">1</span><br><span class="line"><span class="comment"># 创建一个名为 admin，密码为 123456 的用户。</span></span><br><span class="line">&gt; db.createUser(&#123; user: <span class="string">&quot;admin&quot;</span>, <span class="built_in">pwd</span>: <span class="string">&quot;123456&quot;</span>, roles:[<span class="string">&quot;userAdminAnyDatabase&quot;</span>, <span class="string">&quot;dbAdminAnyDatabase&quot;</span>, <span class="string">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">   <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">   <span class="string">&quot;roles&quot;</span>: [</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="string">&quot;role&quot;</span>: <span class="string">&quot;userAdminAnyDatabase&quot;</span>,</span><br><span class="line">      <span class="string">&quot;db&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 尝试使用上面创建的用户信息进行连接。</span></span><br><span class="line">&gt; db.auth(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="开启验证模式登录"><a href="#开启验证模式登录" class="headerlink" title="开启验证模式登录"></a>开启验证模式登录</h3><p>开启 mongod 时，指定 <code>--auth</code> 参数即可以验证模式打开：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo mongod --dbpath ~/data/db --fork --logpath ~/data/<span class="built_in">log</span>/mongo.log --auth</span><br></pre></td></tr></table></figure>

<h4 id="登录时验证"><a href="#登录时验证" class="headerlink" title="登录时验证"></a>登录时验证</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mongo 127.0.0.1:27017/admin -u admin -p 123456</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 等价于</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mongo --port 27017 -u <span class="string">&quot;adminUser&quot;</span> -p <span class="string">&quot;adminPass&quot;</span> --authenticationDatabase <span class="string">&quot;admin&quot;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="登录后验证"><a href="#登录后验证" class="headerlink" title="登录后验证"></a>登录后验证</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mongo</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> use admin</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ab.auth(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>)</span></span><br></pre></td></tr></table></figure>

<h3 id="退出mongo"><a href="#退出mongo" class="headerlink" title="退出mongo"></a>退出mongo</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先停止mongod服务</span></span><br><span class="line">$ use admin;</span><br><span class="line">$ db.shutdownServer();</span><br><span class="line"></span><br><span class="line">然后退出mongo</span><br><span class="line"><span class="variable">$exit</span>；</span><br></pre></td></tr></table></figure>

<h2 id="natapp"><a href="#natapp" class="headerlink" title="natapp"></a>natapp</h2><p>开启您的内网穿透之旅,调试微信的利器，请至<span class="exturl" data-url="aHR0cHM6Ly9uYXRhcHAuY24v" title="https://natapp.cn/">官网<i class="fa fa-external-link"></i></span>下载</p>
<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v" title="https://code.visualstudio.com/">VSCode<i class="fa fa-external-link"></i></span>: Visual Studio Code是一个由微软开发，同时支持Windows 、 Linux和macOS等操作系统且开放源代码的代码编辑器，它支持测试，并内置了Git 版本控制功能，同时也具有开发环境功能，例如代码补全、代码片段和代码重构等。</p>
<blockquote>
<p>为了备份和分享IDE的配置，无论是 Atom 还是 VSCode 都有相应的插件，在 VSCode 中这个插件是 <span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvQXI3UVZXRjg=" title="https://bre.is/Ar7QVWF8">Settings Sync<i class="fa fa-external-link"></i></span>。该插件是通过 GitHub Gist 来托管配置文件。我的 Gist Id: <code>248fa0aed5c2c89fc342599a1cceb423</code></p>
</blockquote>
</li>
</ul>
<h2 id="设置-SSH-Key"><a href="#设置-SSH-Key" class="headerlink" title="设置 SSH Key"></a>设置 SSH Key</h2><p>在用户主目录下，看看有没有 <code>.ssh</code> 目录，如果有，再看看这个目录下有没有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开 Shell（Windows下打开Git Bash），创建 SSH Key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;young_email@aliyun.com&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Pock"><a href="#Pock" class="headerlink" title="Pock"></a>Pock</h2><p>让 Touch Bar 「变废为宝」的免费小工具，点击图片进入官网了解详情：</p>
<p><a href="https://pock.dev/"><img src="https://i.loli.net/2020/03/26/vGRUVX5ACxfasTi.png" alt=""></a></p>
<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
<th align="center">公众号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>掘金专栏</tag>
        <tag>Mac</tag>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>UmiJS开发技巧</title>
    <url>/2020/06/UmiJS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/06/23/LYNpFyiax7mT1ZB.png" alt=""></p>
<a id="more"></a>

<p>鉴于 UmiJS 是重度的封装了很多工具和功能，对于刚接触的人形成了一层技术壁垒（大佬请忽略这句话）。所以我总结了使用UmiJS 开发中遇到的坑和技巧。</p>
<h2 id="本地开发-umi-dev-时关闭-mock"><a href="#本地开发-umi-dev-时关闭-mock" class="headerlink" title="本地开发 umi dev 时关闭 mock"></a>本地开发 umi dev 时关闭 mock</h2><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtaWpzL3VtaS9pc3N1ZXMvNDg2" title="https://github.com/umijs/umi/issues/486">希望本地开发 umi dev 时可以关闭 mock<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>方案一（推荐）：在 npm scripts 中加入以下指令：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;MOCK=none umi dev&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方案二：在 <code>.env</code> 文件里 设置 <code>MOCK=none</code> 也可以关闭</p>
<h2 id="jsx无法转到定义处"><a href="#jsx无法转到定义处" class="headerlink" title="jsx无法转到定义处"></a>jsx无法转到定义处</h2><p>在 <code>jsconfig.json</code> 文件中进行如下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在umi中如何访问静态资源"><a href="#在umi中如何访问静态资源" class="headerlink" title="在umi中如何访问静态资源"></a>在umi中如何访问静态资源</h2><p>在umi框架中，图片等静态资源主要放到三个地方：</p>
<ol>
<li>在 <code>/public</code> 目录下，一般放共享资源。</li>
<li>在 <code>/src/assets/</code> 目录下，一般放全局静态资源。</li>
<li>在 <code>/src/pages/</code> 里的各个页面目录下，放在这里的好处是更符合组件化开发的思想，便于拷贝复用。</li>
</ol>
<p>由于静态资源会受 <code>context.config.publicPath</code> 的影响，所以在 <code>document.ejs</code> 中应该这样引入比较安全：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= context.config.publicPath %&gt;ol.js&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="如何访问静态图片"><a href="#如何访问静态图片" class="headerlink" title="如何访问静态图片"></a>如何访问静态图片</h2><p>1、如果在/public目录下的静态图片，可以直接输入绝对路径，假设/public/yay.jpg,访问方式如下：</p>
<p><code>&lt;img src=&quot;/yay.jpg&quot; /&gt;</code></p>
<p>注意：以上必须构建后在dist中才能看到。</p>
<p>2、在 <code>/src/assets</code> 和 <code>/src/pages/</code> 目录下的图片，不能通过输入绝对路径访问，必须先 <code>import</code> 导入，才能访问。或者 <code>require</code> 导入。比如 <code>/src/assets/yay.jpg</code> 需：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yayImg <span class="keyword">from</span> <span class="string">&#x27;/src/assets/yay.jpg&#x27;</span>;</span><br><span class="line">&lt;img src=&#123;yayImg&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&#123;<span class="built_in">require</span>(<span class="string">&#x27;/src/assets/yay.jpg&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure>

<p>为什么会这样呢？主要是因为构建时，<code>/public</code> 目录下的文件会原样复制到 <code>/dist/</code> 目录下，而 <code>/src/assets/</code> 和 <code>/src/pages/</code> 目录下的文件会被改名并复制到 <code>/dist/</code> 下。</p>
<h2 id="react-router三种传参方式"><a href="#react-router三种传参方式" class="headerlink" title="react-router三种传参方式"></a>react-router三种传参方式</h2><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly93d3cua2VsZWRlLndpbi9wb3N0cy9yZWFjdC1yb3V0ZXIlRTQlQjglODklRTclQTclOEQlRTQlQkMlQTAlRTUlOEYlODIlRTYlOTYlQjklRTUlQkMlOEYv" title="https://www.kelede.win/posts/react-router%E4%B8%89%E7%A7%8D%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/">react-router三种传参方式<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;umi/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RouterDemo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> onOk = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    router.push(&#123;</span><br><span class="line">      pathname: <span class="string">&#x27;test/router&#x27;</span>,</span><br><span class="line">      <span class="comment">// 点击之后，页面会跳转且地址上会跟上query的参数，?id=1&amp;code=123</span></span><br><span class="line">      <span class="comment">// 获取方式传值内容的方式: this.props.location.query</span></span><br><span class="line">      query: &#123;</span><br><span class="line">        id: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        code: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 点击之后，页面会跳转</span></span><br><span class="line">      <span class="comment">// 通过this.props.location.params可以获得params的值</span></span><br><span class="line">      <span class="comment">// params可以为其他名字，如text、nihao等，不一定是params</span></span><br><span class="line">      <span class="comment">// 刷新页面后，params的值会丢失。</span></span><br><span class="line">      params: &#123;</span><br><span class="line">        d: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        code: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 使用state传值和params传值一样，都不会再url中显示出来</span></span><br><span class="line">      <span class="comment">// state传值与params传值的区别是state传值刷新页面值还在，而使用params传值刷新后值不没有了。</span></span><br><span class="line">      state: &#123;</span><br><span class="line">        d: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        code: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onOk&#125;</span>&gt;</span>点击测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改浏览器上方图标"><a href="#修改浏览器上方图标" class="headerlink" title="修改浏览器上方图标"></a>修改浏览器上方图标</h2><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly92Mi51bWlqcy5vcmcvemgvZ3VpZGUvaHRtbC10ZW1wbGF0ZS5odG1sI+mFjee9ruaooeadvw==" title="https://v2.umijs.org/zh/guide/html-template.html#配置模板">HTML 配置模板<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 图片在 /public 下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= context.publicPath %&gt;favicon.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 图片在 /src/assets/ 下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= context.publicPath %&gt;static/favicon.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="支持-ie11"><a href="#支持-ie11" class="headerlink" title="支持 ie11"></a>支持 ie11</h2><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtaWpzL3VtaS9pc3N1ZXMvMTM5NA==" title="https://github.com/umijs/umi/issues/1394">ie11兼容问题<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>配置浏览器最低版本，会自动引入 polyfill 和做语法转换，配置的 targets 会和合并到默认值，所以不需要重复配置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// umi默认兼容最低浏览器版本</span></span><br><span class="line"><span class="comment">// Default: &#123; chrome: 49, firefox: 45, safari: 10, edge: 13, ios: 10 &#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  targets: &#123;</span><br><span class="line">    ie: <span class="number">11</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="编译-node-modules-下的包"><a href="#编译-node-modules-下的包" class="headerlink" title="编译 node_modules 下的包"></a>编译 node_modules 下的包</h2><h3 id="UmiJS-2-x"><a href="#UmiJS-2-x" class="headerlink" title="UmiJS 2.x"></a>UmiJS 2.x</h3><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtaWpzL3VtaS9pc3N1ZXMvMjExNyNpc3N1ZWNvbW1lbnQtNTM5OTgyNDM0" title="https://github.com/umijs/umi/issues/2117#issuecomment-539982434">How to configure extraBabelIncludes<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">&#123;</span><br><span class="line">  extraBabelIncludes: [path.resolve(__dirname, <span class="string">&#x27;node_modules/&lt;package_name&gt;&#x27;</span>)],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UmiJS-3-1"><a href="#UmiJS-3-1" class="headerlink" title="UmiJS 3.1+"></a>UmiJS 3.1+</h3><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly91bWlqcy5vcmcvemgtQ04vY29uZmlnI25vZGVtb2R1bGVzdHJhbnNmb3JtLTMx" title="https://umijs.org/zh-CN/config#nodemodulestransform-31">nodeModulesTransform<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly91bWlqcy5vcmcvemgtQ04vZ3VpZGUvYm9vc3QtY29tcGlsZS1zcGVlZA==" title="https://umijs.org/zh-CN/guide/boost-compile-speed">如何做编译提速<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>UmiJS 3 删除了 <code>extraBabelIncludes</code> 和 <code>es5ImcompatibleVersions</code>，<code>node_modules</code> 也走 babel 编译后就没有意义了，无需配置</p>
<p>UmiJS 3 默认编译 <code>node_modules</code> 下的文件，带来一些收益的同时，也增加了额外的编译时间。如果不希望 <code>node_modules</code> 下的文件走 babel 编译，可通过以下配置减少 40% 到 60% 的编译时间。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  nodeModulesTransform: &#123;</span><br><span class="line">    type: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">    exclude: [], <span class="comment">// 忽略的依赖库，包名，暂不支持绝对路径；可通过 exclude 配置添加额外需要编译的</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="并行运行任务"><a href="#并行运行任务" class="headerlink" title="并行运行任务"></a>并行运行任务</h2><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2R2YWpzL2R2YS9pc3N1ZXMvNzU2I2lzc3VlY29tbWVudC0zMTc3NzA2MDg=" title="https://github.com/dvajs/dva/issues/756#issuecomment-317770608">求教多个异步的请求问题？<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9yZWR1eC1zYWdhLWluLWNoaW5lc2UuanMub3JnL2RvY3MvYWR2YW5jZWQvUnVubmluZ1Rhc2tzSW5QYXJhbGxlbC5odG1s" title="https://redux-saga-in-chinese.js.org/docs/advanced/RunningTasksInParallel.html">同时执行多个任务<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p><code>yield</code> 指令可以很简单的将异步控制流以同步的写法表现出来，但与此同时我们将也会需要同时执行多个任务，我们不能直接这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误写法，effects 将按照顺序执行</span></span><br><span class="line"><span class="keyword">const</span> users = <span class="keyword">yield</span> call(fetch, <span class="string">&#x27;/users&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> repos = <span class="keyword">yield</span> call(fetch, <span class="string">&#x27;/repos&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>由于第二个 effect 将会在第一个 call 执行完毕才开始。所以我们需要这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确写法, effects 将会同步执行</span></span><br><span class="line">*effects(&#123;&#125;, &#123; all, call &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, repos] = <span class="keyword">yield</span> all([</span><br><span class="line">    call(fetch, <span class="string">&#x27;/users&#x27;</span>),</span><br><span class="line">    call(fetch, <span class="string">&#x27;/repos&#x27;</span>)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们需要 <code>yield</code> 一个包含 effects 的数组， generator 会被阻塞直到所有的 effects 都执行完毕，或者当一个 effect 被拒绝 （就像 <code>Promise.all</code> 的行为）。</p>
<h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2R2YWpzL2R2YS9pc3N1ZXMvMjA5NA==" title="https://github.com/dvajs/dva/issues/2094">yield all中放put而出现的问题<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">*effects(&#123;&#125;, &#123; all, call &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, repos] = <span class="keyword">yield</span> all([</span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">&#x27;getUsers&#x27;</span> &#125;),</span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">&#x27;getRepos&#x27;</span> &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者使用 <code>put.resolve</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">*effects(&#123;&#125;, &#123; all, call &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, repos] = <span class="keyword">yield</span> all([</span><br><span class="line">    put.resolve(&#123; <span class="attr">type</span>: <span class="string">&#x27;getUsers&#x27;</span> &#125;),</span><br><span class="line">    put.resolve(&#123; <span class="attr">type</span>: <span class="string">&#x27;getRepos&#x27;</span> &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="局部覆盖antd-样式"><a href="#局部覆盖antd-样式" class="headerlink" title="局部覆盖antd 样式"></a>局部覆盖antd 样式</h2><p>由于业务的个性化需求，我们经常会遇到需要覆盖组件样式的情况，这里举个简单的例子。</p>
<p>antd Select 在多选状态下，默认会展示所有选中项，这里我们给它加一个限制高度，超过此高度就出滚动条。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Select</span><br><span class="line">  mode&#x3D;&quot;multiple&quot;</span><br><span class="line">  style&#x3D;&#123;&#123; width: 300 &#125;&#125;</span><br><span class="line">  placeholder&#x3D;&quot;Please select&quot;</span><br><span class="line">  className&#x3D;&#123;styles.customSelect&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;children&#125;</span><br><span class="line">&lt;&#x2F;Select&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.customSelect</span> &#123;</span><br><span class="line">  :global &#123;</span><br><span class="line">    <span class="selector-class">.ant-select-selection</span> &#123;</span><br><span class="line">      <span class="attribute">max-height</span>: <span class="number">51px</span>;</span><br><span class="line">      <span class="attribute">overflow</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法很简单，有两点需要注意：</p>
<ul>
<li>引入的 antd 组件类名没有被 CSS Modules 转化，所以被覆盖的类名 <code>.ant-select-selection</code> 必须放到 <code>:global</code> 中。</li>
<li>因为覆盖是全局性的。为了防止对其他 Select 组件造成影响，所以需要包裹额外的 className 限制样式的生效范围。</li>
</ul>
<h2 id="优化包大小"><a href="#优化包大小" class="headerlink" title="优化包大小"></a>优化包大小</h2><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZWY4NTgxY2U1MWQ0NTM0YzE0ZDlhNWY=" title="https://juejin.im/post/5ef8581ce51d4534c14d9a5f">H5 分包实现首屏加载时间优化<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzA4ZmU3ZDZmYjlhMDRhMGQ1NmE3MDI=" title="https://juejin.im/post/5c08fe7d6fb9a04a0d56a702">webapck4 玄妙的 SplitChunks Plugin<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtaWpzL3VtaS9pc3N1ZXMvMzUzNSNpc3N1ZWNvbW1lbnQtNjE3NTkwNTc5" title="https://github.com/umijs/umi/issues/3535#issuecomment-617590579">请问如何单独打包组件<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h3 id="UmiJS-2-x-1"><a href="#UmiJS-2-x-1" class="headerlink" title="UmiJS 2.x"></a>UmiJS 2.x</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 忽略 moment 的 locale 文件，用于减少尺寸。</span></span><br><span class="line">  <span class="comment">// https://v2.umijs.org/zh/config/#ignoremomentlocale</span></span><br><span class="line">  ignoreMomentLocale: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 配置是否开启 treeShaking，默认关闭。</span></span><br><span class="line">  <span class="comment">// https://v2.umijs.org/zh/config/#treeshaking</span></span><br><span class="line">  treeShaking: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 通过 [webpack-chain](https://github.com/mozilla-neutrino/webpack-chain) 的 API 扩展或修改 webpack 配置。</span></span><br><span class="line">  <span class="comment">// https://v2.umijs.org/zh/config/#chainwebpack</span></span><br><span class="line">  chainWebpack(config) &#123;</span><br><span class="line">    config.optimization.splitChunks(&#123;</span><br><span class="line">      chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">      automaticNameDelimiter: <span class="string">&#x27;～&#x27;</span>,</span><br><span class="line">      name: <span class="literal">true</span>,</span><br><span class="line">      minSize: <span class="number">30000</span>,</span><br><span class="line">      minChunks: <span class="number">1</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        echarts: &#123;</span><br><span class="line">          name: <span class="string">&#x27;echarts&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/](echarts)[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-9</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        antd: &#123;</span><br><span class="line">          name: <span class="string">&#x27;antd&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/](@ant-design|antd|antd-mobile)[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-10</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          name: <span class="string">&#x27;vendors&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-11</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="comment">// 这是官方封装的一个插件集，包含 18 个常用的进阶功能。</span></span><br><span class="line">      <span class="comment">// https://v2.umijs.org/zh/plugin/umi-plugin-react.html#%E5%AE%89%E8%A3%85</span></span><br><span class="line">      <span class="string">&#x27;umi-plugin-react&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 默认是 [&#x27;umi&#x27;]，可修改，比如做了 vendors 依赖提取之后，会需要在 umi.js 之前加载 vendors.js</span></span><br><span class="line">        <span class="comment">// https://v2.umijs.org/zh/plugin/umi-plugin-react.html#chunks</span></span><br><span class="line">        chunks: [<span class="string">&#x27;vendors&#x27;</span>, <span class="string">&#x27;antd&#x27;</span>, <span class="string">&#x27;echarts&#x27;</span>, <span class="string">&#x27;umi&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UmiJS-3-x"><a href="#UmiJS-3-x" class="headerlink" title="UmiJS 3.x"></a>UmiJS 3.x</h3><blockquote>
<p>参考 <span class="exturl" data-url="aHR0cHM6Ly91bWlqcy5vcmcvemgtQ04vZG9jcy91cGdyYWRlLXRvLXVtaS0zIyVFNSU4RCU4NyVFNyVCQSVBNy11bWktcGx1Z2luLXJlYWN0LSVFNCVCOCVCQS11bWlqc3ByZXNldC1yZWFjdA==" title="https://umijs.org/zh-CN/docs/upgrade-to-umi-3#%E5%8D%87%E7%BA%A7-umi-plugin-react-%E4%B8%BA-umijspreset-react">升级 umi-plugin-react 为 @umijs/preset-react<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>由于 Umi 3 的配置方式是拍平的方式，还需要修改配置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 忽略 moment 的 locale 文件，用于减少尺寸。</span></span><br><span class="line">  <span class="comment">// https://v2.umijs.org/zh/config/#ignoremomentlocale</span></span><br><span class="line">  ignoreMomentLocale: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 配置是否开启 treeShaking，默认关闭。</span></span><br><span class="line">  <span class="comment">// https://v2.umijs.org/zh/config/#treeshaking</span></span><br><span class="line">  treeShaking: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 通过 [webpack-chain](https://github.com/mozilla-neutrino/webpack-chain) 的 API 扩展或修改 webpack 配置。</span></span><br><span class="line">  <span class="comment">// https://v2.umijs.org/zh/config/#chainwebpack</span></span><br><span class="line">  chainWebpack(config) &#123;</span><br><span class="line">    config.optimization.splitChunks(&#123;</span><br><span class="line">      chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">      automaticNameDelimiter: <span class="string">&#x27;～&#x27;</span>,</span><br><span class="line">      name: <span class="literal">true</span>,</span><br><span class="line">      minSize: <span class="number">30000</span>,</span><br><span class="line">      minChunks: <span class="number">1</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        echarts: &#123;</span><br><span class="line">          name: <span class="string">&#x27;echarts&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/](echarts)[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-9</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        antd: &#123;</span><br><span class="line">          name: <span class="string">&#x27;antd&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/](@ant-design|antd|antd-mobile)[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-10</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          name: <span class="string">&#x27;vendors&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-11</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// https://umijs.org/zh-CN/config#chunks</span></span><br><span class="line">  chunks: [<span class="string">&#x27;vendors&#x27;</span>, <span class="string">&#x27;antd&#x27;</span>, <span class="string">&#x27;echarts&#x27;</span>, <span class="string">&#x27;umi&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="momentjs"><a href="#momentjs" class="headerlink" title="momentjs"></a>momentjs</h2><h3 id="使用中文配置"><a href="#使用中文配置" class="headerlink" title="使用中文配置"></a>使用中文配置</h3><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1X2xhbmxhbi9hcnRpY2xlL2RldGFpbHMvOTEwNDM2OTY=" title="https://blog.csdn.net/hu_lanlan/article/details/91043696">antd design国际化配置为中文时，日期组件中月与星期显示为英文，其他显示为中文<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LocaleProvider &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> zh_CN <span class="keyword">from</span> <span class="string">&#x27;antd/lib/locale-provider/zh_CN&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;moment/locale/zh-cn&#x27;</span>;</span><br><span class="line"></span><br><span class="line">moment.locale(<span class="string">&#x27;zh-cn&#x27;</span>);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">LocaleProvider</span> <span class="attr">locale</span>=<span class="string">&#123;zh_CN&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">App</span> /&gt;</span><span class="tag">&lt;/<span class="name">LocaleProvider</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="替换-momentjs"><a href="#替换-momentjs" class="headerlink" title="替换 momentjs"></a>替换 momentjs</h3><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50ZC1kYXlqcy13ZWJwYWNrLXBsdWdpbg==" title="https://github.com/ant-design/antd-dayjs-webpack-plugin">antd-dayjs-webpack-plugin<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2RvY3MvcmVhY3QvcmVwbGFjZS1tb21lbnQtY24=" title="https://ant.design/docs/react/replace-moment-cn">替换 Moment.js<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMzY1MTA2MjA=" title="https://zhuanlan.zhihu.com/p/136510620">基于umi、antd的前端工程优化实践<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>请先删除 <code>ignoreMomentLocale: true</code> 配置再进行以下操作：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add antd-dayjs-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  chainWebpack(config) &#123;</span><br><span class="line">    <span class="comment">// antd moment -&gt; dayjs</span></span><br><span class="line">    <span class="comment">// 如果在 Ant Design 3.x 的项目中使用本插件，需要传入以下配置，指定 preset。</span></span><br><span class="line">    config.plugin(<span class="string">&#x27;moment2dayjs&#x27;</span>).use(<span class="string">&#x27;antd-dayjs-webpack-plugin&#x27;</span>, [</span><br><span class="line">      &#123;</span><br><span class="line">        preset: <span class="string">&#x27;antdv3&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果项目中需要使用中文语言，还要引入dayjs的中文语言包并与antd的ConfigProvider配合服用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置dayjs中文</span></span><br><span class="line"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">&#x27;dayjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dayjs/locale/zh-cn&#x27;</span></span><br><span class="line">dayjs.locale(<span class="string">&#x27;zh-cn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ConfigProvider &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhCN <span class="keyword">from</span> <span class="string">&#x27;antd/lib/locale-provider/zh_CN&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123;children&#125;) =&gt; <span class="xml"><span class="tag">&lt;<span class="name">ConfigProvider</span> <span class="attr">locale</span>=<span class="string">&#123;zhCN&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">ConfigProvider</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>通过上述配置后，使用DatePicker组件拿到的日期与之前一致，但可以直接使用dayjs的API操作日期，moment不复存在。最终dayjs打包体积为14.64KB，减小了330KB之多。</p>
<p>注：目前<span class="exturl" data-url="bWFpbHRvOmRheWpzQDEuOC4yMA==" title="mailto:dayjs@1.8.20">dayjs@1.8.20<i class="fa fa-external-link"></i></span>后有个bug会导致替换后WeekPicker显示不正常，1.8.21版本之后已修复。</p>
<h2 id="dva-loading-使用"><a href="#dva-loading-使用" class="headerlink" title="dva-loading 使用"></a>dva-loading 使用</h2><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82MWZlN2E1N2ZhZDQ=" title="https://www.jianshu.com/p/61fe7a57fad4">dva-loading 实践用法<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>loading 分为四种使用情况，下面依次用代码展示：</p>
<p><strong>1、全局</strong></p>
<p>监听的是应用中所有 effect 是否执行完毕，若执行完毕。loading 的值就变为 <code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;useSelector,useDispatch&#125; = <span class="string">&#x27;dva&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Spin&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">const</span> DemoPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;loading&#125; = useSelector(<span class="function"><span class="params">stores</span> =&gt;</span> (&#123;</span><br><span class="line">    loading: stores.loading</span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Spin spinning=&#123;loading.global&#125;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、model</strong></p>
<p>监听某个模块的所有 effect 是否执行完毕，若执行完毕。loading 的值就变为 <code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;useSelector,useDispatch&#125; = <span class="string">&#x27;dva&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Spin&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">const</span> DemoPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;loading,demoModel&#125; = useSelector(<span class="function"><span class="params">stores</span> =&gt;</span> (&#123;</span><br><span class="line">    loading: stores.loading,</span><br><span class="line">    demoModel: stores.loading,</span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Spin spinning=&#123;loading.models.demoModel&#125;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、effect:</strong></p>
<p>监听某个 effect 是否执行完毕，若执行完毕。loading 的值就变为 <code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;useSelector,useDispatch&#125; = <span class="string">&#x27;dva&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Spin&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">const</span> DemoPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;loading,demoModel&#125; = useSelector(<span class="function"><span class="params">stores</span> =&gt;</span> (&#123;</span><br><span class="line">    loading: stores.loading,</span><br><span class="line">    demoModel: stores.loading,</span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Spin spinning=&#123;loading.effects[<span class="string">&#x27;demoModel/effect1&#x27;</span>]/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、effects</strong></p>
<p>如果想监听某个 model 中的某几个 effect，可以使用 <code>||</code> 连接，当全部执行完毕时，返回的是 <code>undefined</code>，所以必须在末尾拼接 <code>|| false</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;useSelector,useDispatch&#125; = <span class="string">&#x27;dva&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Spin&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">const</span> DemoPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;loading,demoModel&#125; = useSelector(<span class="function"><span class="params">stores</span> =&gt;</span> (&#123;</span><br><span class="line">    loading: stores.loading,</span><br><span class="line">    demoModel: stores.loading,</span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Spin spinning=&#123;</span><br><span class="line">      loading.effects[<span class="string">&#x27;demoModel/effect1&#x27;</span>] ||</span><br><span class="line">      loading.effects[<span class="string">&#x27;demoModel/effect3&#x27;</span>] ||</span><br><span class="line">      loading.effects[<span class="string">&#x27;demoModel/effect4&#x27;</span>] || <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关闭-Umi-UI"><a href="#关闭-Umi-UI" class="headerlink" title="关闭 Umi UI"></a>关闭 Umi UI</h2><p>umi 项目默认启动 <code>umi ui</code>，会出现一个mini图标气泡浮在右下角，关闭有两种方式，一种是直接用样式 <code>display none</code>。另一种是在启动时加上 <code>UMI_UI=none</code> 环境变量。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;UMI_UI=none umi dev&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;MOCK=none UMI_UI=none umi dev&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置多环境"><a href="#配置多环境" class="headerlink" title="配置多环境"></a>配置多环境</h2><blockquote>
<p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtaWpzL3VtaS9pc3N1ZXMvMTE0MiNpc3N1ZWNvbW1lbnQtNDM1ODAzNzQ2" title="https://github.com/umijs/umi/issues/1142#issuecomment-435803746">umi如何配置多环境<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly91bWlqcy5vcmcvemgtQ04vY29uZmlnI2RlZmluZQ==" title="https://umijs.org/zh-CN/config#define">umi define config<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>1、安装 cross-env 插件: <code>yarn add cross-env -D</code></p>
<p>2、在 <code>.umirc.js</code> 文件中添加 <code>define</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  define: &#123;</span><br><span class="line">    <span class="comment">// 添加这个自定义的环境变量</span></span><br><span class="line">    <span class="comment">// 本地开发环境：dev，test环境：test，生产环境：prod</span></span><br><span class="line">    <span class="string">&quot;process.env.PRO_ENV&quot;</span>: process.env.PRO_ENV</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、package.json 添加 npm scripts</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;cross-env PRO_ENV=dev umi dev&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;cross-env PRO_ENV=test umi dev&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;cross-env PRO_ENV=prod umi build&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>UmiJS</tag>
      </tags>
  </entry>
  <entry>
    <title>Deno从入门到跑路 | 掘金征文</title>
    <url>/2020/07/Deno%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%B7%91%E8%B7%AF-%E6%8E%98%E9%87%91%E5%BE%81%E6%96%87/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/07/27/4ltXAYazmVvgWfZ.png" alt=""></p>
<a id="more"></a>

<h2 id="印象Deno"><a href="#印象Deno" class="headerlink" title="印象Deno"></a>印象Deno</h2><p>2018 年时，一篇 <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI3OTM0ODI2Ni9hbnN3ZXIvNDA2MTMxNjA1" title="https://www.zhihu.com/question/279348266/answer/406131605">如何看待ry的项目deno的issue被中文刷屏的事件？<i class="fa fa-external-link"></i></span> 的文章成功引起了我对 Deno 的注意，cnode有一篇文章严厉斥责这是中国开发者的耻辱，对此我不敢完全认同，毕竟996的大环境下，是很难孵化出国外这种创新精神的。但我并不否认学不学的动，全看个人。本人近期最敬佩的 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vdXNlci81OTUzMjE3NmYyNjVkYTZjMzE3ZDhlMTQ=" title="https://juejin.im/user/59532176f265da6c317d8e14">蜗牛老湿_大圣<i class="fa fa-external-link"></i></span>坚持每日5点多起床，做到如此勤奋与持久，何愁学不动？</p>
<h3 id="为什么学Deno？"><a href="#为什么学Deno？" class="headerlink" title="为什么学Deno？"></a>为什么学Deno？</h3><p>1、热度，虽说关于学不动的问题造成了负面影响，但是deno成功地因此赚足了噱头和流量。</p>
<p><img src="https://i.loli.net/2020/07/27/xnK6EqFH1hGoJSR.png" alt=""></p>
<p>2、趋势，下图中我们可以清楚地看到，Deno从2018年创建至今已斩获近70K的star，尤其是 2020-05-13 发布 1.0 之后，更是迎来一波高峰。</p>
<img src="https://i.loli.net/2020/08/03/DszAScVQmYNflg8.png" style="zoom:70%;" />

<p>3、掘金征文活动，上次沸点活动有幸获赠豪华升降桌，但是我最想要的其实是掘金周边大礼包。</p>
<h3 id="Deno-是什么？"><a href="#Deno-是什么？" class="headerlink" title="Deno 是什么？"></a>Deno 是什么？</h3><ul>
<li>Deno 是一个简单、现代且安全的 JavaScript 和 TypeScript 运行时环境，其基于 V8 引擎并采用 Rust 编程语言构建。</li>
<li>Deno 由 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J5" title="https://github.com/ry">Ryan Dahl 瑞安·达尔<i class="fa fa-external-link"></i></span> 创建，他同样是 Node.js 的作者。</li>
</ul>
<h3 id="功能亮点"><a href="#功能亮点" class="headerlink" title="功能亮点"></a>功能亮点</h3><ul>
<li>默认安全设置。除非显式开启，否则没有文件、网络，也不能访问运行环境。</li>
<li>天生支持 TypeScript。</li>
<li>只有一个单一的可执行文件。</li>
<li>自带实用工具，例如依赖检查器（deno info）和 代码格式化工具（deno fmt）。</li>
<li>有一套经过审核（审计）的标准模块，确保与 Deno 兼容： <span class="exturl" data-url="aHR0cHM6Ly9kZW5vLmJvb3Rjc3MuY29tL3N0ZA==" title="https://deno.bootcss.com/std">deno.land/std<i class="fa fa-external-link"></i></span></li>
<li>脚本代码能被打包为一个单独的 JavaScript 文件。</li>
<li>去中心化Package：没有 node_modules 和 package.json；Package 通过 URL 来加载–<span class="exturl" data-url="aHR0cDovL2Rlbm8ubGFuZC94L++8m+WKoOi9veaXtue8k+WtmOWIsOehrOebmA==" title="http://deno.land/x/；加载时缓存到硬盘">http://deno.land/x/；加载时缓存到硬盘<i class="fa fa-external-link"></i></span></li>
<li>Top Level Await：在 Deno 中编写代码，不需要将 await 包裹在异步函数里。真香！</li>
<li>其他：内置测试、浏览器兼容的API、执行Wasm二进制文件、Modern JS、ES Modules</li>
</ul>
<h3 id="为什么开发-Deno？"><a href="#为什么开发-Deno？" class="headerlink" title="为什么开发 Deno？"></a>为什么开发 Deno？</h3><p>从 Deno 的名字就可以看出和 Node 的关系：De（Destroy）no(Node)，销毁Node, ry 在演讲中曾列举了 Node存在的一些问题：</p>
<ol>
<li><p>曾放弃原生支持 Promise： 造成了核心 API 的老化问题，得都一一更新成 Promise 版本才能解決。</p>
</li>
<li><p>沒有谨慎思考安全性问题：使用 V8 的 Node.js 不需要『授权』，即可访问网络、档案系统，甚至是内存信息，在数据安全考量越来越重要的时代，会是 Node.js 被质疑的问题之一</p>
</li>
<li><p>Build System：在 Node 开发早期，Chrome V8 是以 GYP 构建系统，而 Node 也就沿用了 GYP，但不久后 Chrome 放弃 GYP 转而使用 GN，而 Node 已经无法挽回。因此 Node 成了目前在 V8 上唯一使用 GYP 的用戶，而 GN 速度比 GYP 快了将近 20 倍、文件可读性高且支持许多依赖。</p>
</li>
<li><p>Package.json 与 Npm 的集权问题</p>
</li>
<li><p>node_modules：node_modules 里的每一個 folder 并沒有标准，因此可以放置多余的版本或是任何其他档案和文件，这导致增加了模块解析复杂度。另外社区早已苦 node_modules 久已，嘲讽之是比黑洞更黑的存在：</p>
</li>
</ol>
<img src="https://i.loli.net/2020/07/27/zTDH1eEXtYKpqfs.png" alt="image.png" style="zoom:50%;" />

<ol start="6">
<li>index.js：若有了 package.json，其实就不需要默认加载 index.js，這确实让模块加载更加地复杂化了。</li>
</ol>
<p>基于以上问题，ry 决定利用JavaScript和浏览器最新特性开发一款现代的JavaScript运行时。更多问题，大家请观看参考资料的演讲。</p>
<h3 id="Deno-正在杀死-Node-js的担忧"><a href="#Deno-正在杀死-Node-js的担忧" class="headerlink" title="Deno 正在杀死 Node.js的担忧"></a>Deno 正在杀死 Node.js的担忧</h3><p>Deno 刚发布的时候，社区除了各种”学不动”的声音之外，还有就是 Deno 是否会取代 Node.js。我认为活在当下（NodeJs），未雨绸缪（Deno）是最佳态度。</p>
<ul>
<li>Nodejs远没有到被取代的时候</li>
<li>Nodejs 非常成熟且有一个巨大的生态</li>
<li>Deno 是一项崭新的技术，在未来几年它可能会受到更多关注，成为 nodejs 的竞争者</li>
<li>对于过去用 bash 或 python 编写的工具脚本来说，Deno 是一个优秀的替代品。</li>
</ul>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>Deno 没有外部依赖，以单一可以执行文件发布。你可以 使用下面的安装程序安装 Deno，或者先从 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rlbm9sYW5kL2Rlbm8vcmVsZWFzZXM=" title="https://github.com/denoland/deno/releases">版本发布页面<i class="fa fa-external-link"></i></span>下载已发布的二进制可执行文件。</p>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><strong>使用 Shell (Mac, Linux)：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https://deno.land/x/install/install.sh | sh</span><br></pre></td></tr></table></figure>

<p><strong>使用 PowerShell (Windows):</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iwr https://deno.land/x/install/install.ps1 -useb | iex</span><br></pre></td></tr></table></figure>

<p><strong>使用 Homebrew (Mac):</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install deno</span><br></pre></td></tr></table></figure>

<h3 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h3><ul>
<li><p>运行 <code>deno -V</code>，如果它打印出 Deno 版本，说明安装成功。</p>
</li>
<li><p>运行 <code>deno help</code> 以查看帮助文档。</p>
</li>
<li><p>运行 <code>deno help &lt;subcommand&gt;</code> 以查看子命令的选项。</p>
</li>
</ul>
<h3 id="相关路径"><a href="#相关路径" class="headerlink" title="相关路径"></a>相关路径</h3><ul>
<li>DENO_DIR location（Deno安装位置）: “/Users/yangjunning/Library/Caches/deno”</li>
<li>Remote modules cache（远程模块缓存）: “/Users/yangjunning/Library/Caches/deno/deps”</li>
<li>TypeScript compiler cache（TypeScript编译缓存）: “/Users/yangjunning/Library/Caches/deno/gen”</li>
</ul>
<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>要升级已安装的版本，运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deno upgrade</span><br></pre></td></tr></table></figure>

<p>这会从 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rlbm9sYW5kL2Rlbm8vcmVsZWFzZXM=" title="https://github.com/denoland/deno/releases">github.com/denoland/deno/releases<i class="fa fa-external-link"></i></span> 获取最新的发布版本，然后解压并替换现有的版本。</p>
<p>您也可以用此来安装一个特定的版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deno upgrade --version 1.0.1</span><br></pre></td></tr></table></figure>

<h3 id="IDE及插件"><a href="#IDE及插件" class="headerlink" title="IDE及插件"></a>IDE及插件</h3><p>推荐使用 VSCode 及 VSCode Deno进行开发，VSCode Deno 是 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vdXNlci81NWI5ZDI1NjAwYjA5ZGIzNmJiZTJlOWE=" title="https://juejin.im/user/55b9d25600b09db36bbe2e9a">justjavac<i class="fa fa-external-link"></i></span> 大佬开发的。</p>
<p>为了解决与其他正常 node 项目的冲突，建议大家请在项目中新建 <code>.vscode/settings.json</code> 文件并填入以下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;deno.enable&quot;</span>: <span class="literal">true</span>, <span class="comment">// set false for user setting</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;[typescript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;denoland.vscode-deno&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>试着运行如下的简单程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ deno run https://deno.land/std/examples/welcome.ts</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/07/27/rQOJ7pFbWIXtCTf.png" alt=""></p>
<h3 id="搭建文件服务器"><a href="#搭建文件服务器" class="headerlink" title="搭建文件服务器"></a>搭建文件服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run --allow-read --allow-net https://deno.land/std@0.62.0/http/file_server.ts</span></span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2020/07/27/vWp2eqOTbZ9arB7.png" style="zoom:60%;" />

<h3 id="创建一个http服务器"><a href="#创建一个http服务器" class="headerlink" title="创建一个http服务器"></a>创建一个http服务器</h3><p>创建一个名为 <code>index.ts</code> 的文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; serve &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std@0.62.0/http/server.ts&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> s = serve(&#123; port: <span class="number">8000</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;http://localhost:8000/&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> req <span class="keyword">of</span> s) &#123;</span><br><span class="line">  req.respond(&#123; body: <span class="string">&quot;Hello World\n&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行 <code>deno run xxx</code> 命令执行文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run --allow-net --reload index.ts // --reload 是第一次执行时缓存模块用的</span></span><br></pre></td></tr></table></figure>

<h3 id="发出一个-HTTP-请求"><a href="#发出一个-HTTP-请求" class="headerlink" title="发出一个 HTTP 请求"></a>发出一个 HTTP 请求</h3><p>通过 HTTP 请求从服务器获取数据是一件很常见的事。让我们编写一个简单的程序来获取文件并打印到终端。</p>
<p>就像浏览器一样，您可以使用 web 标准的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API"><code>fetch</code></a> API 来发出请求。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们取得了第一个命令行参数，存储到变量 url。</span></span><br><span class="line"><span class="keyword">const</span> url = Deno.args[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 我们向指定的地址发出请求，等待响应，然后存储到变量 res。</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> fetch(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们把响应体解析为一个 ArrayBuffer，等待接收完毕，将其转换为 Uint8Array，最后存储到变量 body。</span></span><br><span class="line"><span class="keyword">const</span> body = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="keyword">await</span> res.arrayBuffer());</span><br><span class="line"><span class="comment">// 我们把 body 的内容写入标准输出流 stdout。</span></span><br><span class="line"><span class="keyword">await</span> Deno.stdout.write(body);</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run --allow-net sendHttp.ts http://example.com</span></span><br><span class="line">// 或</span><br><span class="line"><span class="meta">$</span><span class="bash"> deno run --allow-net=example.com https://deno.land/std/examples/curl.ts https://example.com</span></span><br></pre></td></tr></table></figure>

<h3 id="写一个文件"><a href="#写一个文件" class="headerlink" title="写一个文件"></a>写一个文件</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> encoder = <span class="keyword">new</span> TextEncoder();</span><br><span class="line"><span class="keyword">const</span> greetText = encoder.encode(<span class="string">&quot;Hello World\nMy name is youngjuning!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> Deno.writeFile(<span class="string">&quot;greet.txt&quot;</span>, greetText)</span><br></pre></td></tr></table></figure>

<h3 id="读取一个文件"><a href="#读取一个文件" class="headerlink" title="读取一个文件"></a>读取一个文件</h3><p>Deno 也提供内置的 API，它们都位于全局变量 <code>Deno</code> 中。您可以在此找到相关文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2MuZGVuby5sYW5kL2h0dHBzL2dpdGh1Yi5jb20vZGVub2xhbmQvZGVuby9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQvbGliLmRlbm8uZC50cw==" title="https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts">doc.deno.land<i class="fa fa-external-link"></i></span>。</p>
<p>文件系统 API 没有 web 标准形式，所以 Deno 提供了内置的 API。</p>
<p>在这个程序中，每个命令行参数都是一个文件名，参数对应的文件将被依次打开，打印到标准输出流。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> filenames = Deno.args;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> filename <span class="keyword">of</span> filenames) &#123;</span><br><span class="line">  <span class="keyword">const</span> file = <span class="keyword">await</span> Deno.open(filename);</span><br><span class="line">  <span class="keyword">await</span> Deno.copy(file, Deno.stdout);</span><br><span class="line">  file.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了内核到用户空间再到内核的必要拷贝，这里的 <code>copy()</code> 函数不会产生额外的昂贵操作，从文件中读到的数据会原样写入标准输出流。这反映了 Deno I/O 流的通用设计目标。</p>
<p>尝试一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run cat.ts /etc/passwd</span></span><br></pre></td></tr></table></figure>

<h3 id="TCP-服务"><a href="#TCP-服务" class="headerlink" title="TCP 服务"></a>TCP 服务</h3><p>新建 <code>cat.ts</code>，这个示例是一个 TCP echo 服务，接收 8080 端口的连接，把接收到的任何数据返回给客户端。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line"><span class="keyword">const</span> listener = Deno.listen(&#123; hostname, port &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Listening on <span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> conn <span class="keyword">of</span> listener) &#123;</span><br><span class="line">  Deno.copy(conn, conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尝试用 netcat 向它发送数据。</p>
<p><img src="https://i.loli.net/2020/07/27/XOyv57NVZwbHzKx.png" alt=""></p>
<p>像示例 <code>cat.ts</code> 一样，<code>copy()</code> 函数不会产生不必要的内存拷贝。它从内核接收数据包，然后发送回去，就这么简单。</p>
<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>在任何地方导入 URL 似乎都不方便。如果其中一个 URL ，链接到了一个稍微不同的库版本呢？在大型项目中，维护 URL 是否容易出错？解决方案是在中心deps.ts文件，导入和重新导出外部库（与 Node 的package.json文件目的相同）。例如，假设您在一个大型项目中，使用了上述测试库。要做的，不是在任何地方导入”<span class="exturl" data-url="aHR0cHM6Ly9kZW5vLmxhbmQvc3RkL3Rlc3RpbmcvbW9kLnRzJnF1b3Q777yM6ICM5piv5Y+v5Lul5Yib5bu65LiA5Liq" title="https://deno.land/std/testing/mod.ts&quot;，而是可以创建一个">https://deno.land/std/testing/mod.ts&quot;，而是可以创建一个<i class="fa fa-external-link"></i></span> <code>deps.ts</code>，用来导出第三方代码：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std/http/server.ts&quot;</span>; <span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">as</span> Server <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std/http/server.ts&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Server &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std/http/server.ts&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>在整个项目中，都可以从deps.ts导入，这样就可以避免对同一个 URL 进行多次引用：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;test, assertEquals&#125; <span class="keyword">from</span> <span class="string">&#x27;./deps.ts&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这种设计避免了，由于包管理软件、集中的代码库和多余的文件格式，而产生的过多复杂性。</p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p><code>deno bundle</code> 自带打包和 tree shaking 功能，可以将我们的代码打包成单文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">deno bundle ./src/index.ts ./dist/index.js</span><br></pre></td></tr></table></figure>

<p><code>deno install</code> 可以将我们的代码生成可执行文件进行直接使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">deno install --allow-read  --allow-net --allow-write -n youngjuning ./src/index.ts</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们也可以直接安装远程的库: <code>deno install --allow-read --allow-net https://deno.land/std/http/file_server.ts</code></p>
</blockquote>
<p>deno的可执行文件默认都放在 <code>/Users/yangjunning/.deno/bin/</code> 目录下，我们需要将它注册到环境变量中:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="string">&quot;/Users/yangjunning/.deno/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>我们已经知道了默认情况下，Deno是安全的。因此 Deno 模块没有文件、网络或环境的访问权限，除非您为它授权。在命令行参数中为 deno 进程授权后才能访问安全敏感的功能。</p>
<h3 id="权限列表"><a href="#权限列表" class="headerlink" title="权限列表"></a>权限列表</h3><p>以下权限是可用的：</p>
<ul>
<li><code>-A</code>, <code>--allow-all</code>：允许所有权限，这将禁用所有安全限制。</li>
<li><code>--allow-env</code>：允许环境访问，例如读取和设置环境变量。</li>
<li><code>--allow-hrtime</code>: 允许高精度时间测量，高精度时间能够在计时攻击和特征识别中使用。</li>
<li><code>--allow-net=&lt;allow-net&gt;</code>： 允许网络访问。您可以指定一系列用逗号分隔的域名，来提供域名白名单。</li>
<li><code>--allow-plugin</code>： 允许加载插件。请注意：这是一个不稳定功能。</li>
<li><code>--allow-read=&lt;allow-read&gt;</code> 允许读取文件系统。您可以指定一系列用逗号分隔的目录或文件，来提供文件系统白名单。</li>
<li><code>--allow-run</code> 允许运行子进程。请注意，子进程不在沙箱中运行，因此没有与 deno 进程相同的安全限制，请谨慎使用。</li>
<li><code>--allow-write=&lt;allow-write&gt;</code> 允许写入文件系统。您可以指定一系列用逗号分隔的目录或文件，来提供文件系统白名单。</li>
</ul>
<h3 id="权限白名单"><a href="#权限白名单" class="headerlink" title="权限白名单"></a>权限白名单</h3><p>Deno 还允许您使用白名单控制权限的粒度。</p>
<p>这是一个用白名单限制文件系统访问权限的示例，仅允许访问 <code>/usr</code> 目录，但它会在尝试访问 <code>/etc</code> 目录时失败。</p>
<p><img src="https://i.loli.net/2020/07/27/pztu5K3H2N7lWy8.png" alt=""></p>
<p><code>--allow-write</code> 也一样，代表写入权限。</p>
<h3 id="网络访问"><a href="#网络访问" class="headerlink" title="网络访问"></a>网络访问</h3><p><code>fetch.ts</code>:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> fetch(<span class="string">&quot;https://deno.land/&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这是一个设置 host 或 url 白名单的示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run --allow-net=github.com,deno.land fetch.ts</span></span><br></pre></td></tr></table></figure>

<p>如果 <code>fetch.ts</code> 尝试与其他域名建立网络连接，那么这个进程将会失败。</p>
<p>允许访问任意地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run --allow-net fetch.ts</span></span><br></pre></td></tr></table></figure>

<h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="denv"><a href="#denv" class="headerlink" title="denv"></a><span class="exturl" data-url="aHR0cHM6Ly9kZW5vLmxhbmQveC9kZW52I2RlbnY=" title="https://deno.land/x/denv#denv">denv<i class="fa fa-external-link"></i></span></h3><p>一个适用于 Deno 的类似于 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vdGRvdGxhL2RvdGVudg==" title="https://github.com/motdotla/dotenv">dotenv<i class="fa fa-external-link"></i></span>的插件</p>
<p><strong>使用</strong></p>
<p>你可以直接导入它，然后就可以使用和它同级目录的<code>.env</code> 文件：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; load &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/denv/mod.ts&quot;</span>;</span><br><span class="line"><span class="keyword">await</span> load();</span><br><span class="line"><span class="built_in">console</span>.log(Deno.env.get(<span class="string">&quot;HOME&quot;</span>));  <span class="comment">// e.g. outputs &quot;/home/alice&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(Deno.env.get(<span class="string">&quot;MADE_UP_VAR&quot;</span>));  <span class="comment">// outputs &quot;Undefined&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Env File 规则</strong></p>
<p>除了 <code>double quoted values expand new lines</code> 没有实现，其他的规则和 dotenv 一样。</p>
<h2 id="打包-1"><a href="#打包-1" class="headerlink" title="打包"></a>打包</h2><p><code>deno bundle</code> 自带打包和 tree shaking 功能，可以将我们的代码打包成单文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno bundle ./src/index.ts ./dist/index.js</span></span><br></pre></td></tr></table></figure>

<p><code>deno install</code> 可以将我们的代码生成可执行文件进行直接使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno install --allow-read  --allow-net --allow-write -n youngjuning ./src/index.ts</span></span><br></pre></td></tr></table></figure>

<p>deno的可执行文件默认都放在 <code>/Users/yangjunning/.deno/bin/</code> 目录下，我们需要将它注册到环境变量中:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="string">&quot;/Users/yangjunning/.deno/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="1、权限标志符位置的问题"><a href="#1、权限标志符位置的问题" class="headerlink" title="1、权限标志符位置的问题"></a>1、权限标志符位置的问题</h3><p>我们都知道， deno 默认是安全的，就是导致了默认情况下是不允许访问网络、读写文件等。比如有个名为 index.ts 的文件内容如下：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; serve &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std@0.50.0/http/server.ts&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> s = serve(&#123; port: <span class="number">8000</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;http://localhost:8000/&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> req <span class="keyword">of</span> s) &#123;</span><br><span class="line">  req.respond(&#123; body: <span class="string">&quot;Hello World\n&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果直接执行 <code>deno run index.ts</code>, 会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: Uncaught PermissionDenied: network access to &quot;0.0.0.0:8000&quot;, run again with the --allow-net flag</span><br></pre></td></tr></table></figure>

<p>所以我们很自然的就会在启动命令的最后加上 <code>--allow-net</code> ，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run index.ts --allow-net</span></span><br></pre></td></tr></table></figure>

<p>但是，这样仍然会报错。查了资料才知道 ，<code>--allow-net</code> 、<code>--allow-read</code> 之类的标志是不可以放到文件名后面的，必须紧跟在 <code>deno run</code> 后面，比如，如下才是正确的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run --alow-net index.ts</span></span><br></pre></td></tr></table></figure>

<h3 id="2、远程模块缓存"><a href="#2、远程模块缓存" class="headerlink" title="2、远程模块缓存"></a>2、远程模块缓存</h3><ol>
<li>远程代码在第一次运行时获取并缓存，直到代码通过 <code>--reload</code> 刷新缓存。（所以它在飞机上也能工作）。</li>
<li>从远程 URL 加载的模块或文件应当是不可变且可缓存的。</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWZwNHkxUTdiaS8=" title="https://www.bilibili.com/video/BV1fp4y1Q7bi/">我对 Node.js 遗憾的十件事 - Ryan Dahl - JSConf EU 2018<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUE1NDExeDdiZw==" title="https://www.bilibili.com/video/BV1A5411x7bg">Deno快速入门指南<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDIwLzAxL2Rlbm8taW50cm8uaHRtbA==" title="https://www.ruanyifeng.com/blog/2020/01/deno-intro.html">Deno 运行时入门教程：Node.js 的替代品<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly91cmxpZnkuY24vSlJyTTMy" title="https://urlify.cn/JRrM32">深入理解-node-js-的設計錯誤-從-ryan-dahl-的演講中反思<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW5mb3EuY24vYXJ0aWNsZS8yMDE3LzA5L05vZGUtUnlhbi1EYWhs" title="https://www.infoq.cn/article/2017/09/Node-Ryan-Dahl">Node 之父 Ryan Dahl：我不想被定义<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZW5vLmJvb3Rjc3MuY29tLw==" title="https://deno.bootcss.com/">Deno中文网<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZW5vY24ub3JnLw==" title="https://denocn.org/">Deno中文社区<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote>
<p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">微信</th>
<th align="center">投食</th>
<th align="center">公众号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td>
<td align="center"><img src="https://i.loli.net/2020/07/29/BiWte5F2xjnI1f8.jpg" width="200px"/></td>
</tr>
</tbody></table>
<p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍评论是我坚持的动力！！！</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZjFkMWQ5N2YyNjVkYTIyYjY0OTVlZDI=" title="https://juejin.im/post/5f1d1d97f265da22b6495ed2">🏆 技术专题第一期 | 聊聊 Deno的一些事儿……<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Deno</category>
      </categories>
      <tags>
        <tag>掘金专栏</tag>
        <tag>Deno</tag>
      </tags>
  </entry>
  <entry>
    <title>极速入门Go并爬取掘金专栏</title>
    <url>/2020/08/%E6%9E%81%E9%80%9F%E5%85%A5%E9%97%A8Go%E5%B9%B6%E7%88%AC%E5%8F%96%E6%8E%98%E9%87%91%E4%B8%93%E6%A0%8F/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/08/13/92pykLqY7NFWi3f.png" alt=""></p>
<a id="more"></a>

<h2 id="Go印象"><a href="#Go印象" class="headerlink" title="Go印象"></a>Go印象</h2><p>2018年的某一天，我问公司后端架构师说我想学学后端语言，除了Java有啥推荐，他告诉我他在学Go。然后跟我讲了一些诸如分布式、协程、大数据、爬虫……巴拉巴拉的我也听不太懂的概念。然后我说我还是学NodeJs吧。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/386ee7328c5b451a93924c671f858269~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<p>之所以斗胆再战Go语言，完全是梁静茹（<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODU0NTczMjE5MjY2ODg3Njk0" title="https://juejin.im/post/6854573219266887694">上次征文<i class="fa fa-external-link"></i></span>）给了我勇气。如果你是后端大佬，直接看后半篇的爬虫部分就可以。</p>
<p>本文的主题是极速、爬虫、掘金专栏，目的是使用Go写一个小工具把掘金专栏文章爬取下来，慢慢看。</p>
<h2 id="Let’s-Go"><a href="#Let’s-Go" class="headerlink" title="Let’s Go"></a>Let’s Go</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>语法简单，易上手（仅有25个关键保留字）</li>
<li>性能高、编译快，开发效率不比Python和Ruby低</li>
<li>部署方便，编译包小，几乎无依赖（二进制文件包可直接运行）这一点和Deno很像</li>
<li>原生支持并发（goroutine）</li>
<li>官方统一规范（gofmt、golint）又看到了Deno的影子</li>
<li>丰富的标准库，再次看到了Deno的影子</li>
</ul>
<h3 id="趋势"><a href="#趋势" class="headerlink" title="趋势"></a>趋势</h3><p>权威的趋势，优弧大佬已经讲的很清楚了，我这里补充一下GitHub的star趋势:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f1ea4ca5a4d457c8e93e07372b88e28~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<h2 id="Go简介"><a href="#Go简介" class="headerlink" title="Go简介"></a>Go简介</h2><p>Go是Google开发的一种静态强类型、编译型、并发型并具有垃圾回收功能的编程语言。为了方便搜索和识别，有时会将其称为Golang。</p>
<h2 id="Go语言特点"><a href="#Go语言特点" class="headerlink" title="Go语言特点"></a>Go语言特点</h2><ol>
<li>Go是一种新的语言，是一种支持并发、带垃圾回收、可快速编译的静态语言。</li>
<li>Go为并发执行与通信提供了基本的支持，是天生的高性能服务开发语言。</li>
<li>Go结合了解释性语言的游刃有余，动态类型语言的开发效率，以及静态类型的安全性。</li>
<li>Go只需要用几秒的时间就可以编译一个大型的Go程序，部署也非常容易。</li>
<li>Go具有Python/Ruby的开发效率，同时又是C语言的运行性能（还是有一定差距的）。</li>
<li>Go简单易上手（只有25个关键保留字）</li>
<li>Go有自己的开发规范，还提供工具支持。</li>
</ol>
<h2 id="Go安装配置"><a href="#Go安装配置" class="headerlink" title="Go安装配置"></a>Go安装配置</h2><blockquote>
<p>作者还有一篇<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MDgzNDg5MzA4Njg1" title="https://juejin.im/post/6844904083489308685">程序员的Mac开发环境【持续更新】<i class="fa fa-external-link"></i></span>，记录了我的Mac上的开发环境，读者大大可以顺便给个Star吗？</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ brew install go</span><br></pre></td></tr></table></figure>

<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ac7ef0acc5b4d2480c802d586f3ae44~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<blockquote>
<p>小技巧1：<code>ctrl+c</code> 可以跳过 <code>Updating Homebrew...</code>，要不卡到你怀疑人生。</p>
</blockquote>
<blockquote>
<p>小技巧2：如果你有时间等，可以带上 <code>-verbose</code> 参数，这样下载的时候会告诉你更新进度。</p>
</blockquote>
<blockquote>
<p>小技巧3：Homebrew 是同步的 GitHub 仓库，如果实在卡，请自行换 Homebrew 代理源</p>
</blockquote>
<p>安装成功后，查看go版本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.14.7 darwin/amd64</span><br></pre></td></tr></table></figure>

<p>配置环境变量：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ open /usr/<span class="built_in">local</span>/Cellar/go/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后看一下自己的libexec在什么地方然后记录下整体的地址，我的地址是 <code>/usr/local/Cellar/go/1.14.7/libexec</code></p>
</blockquote>
<p>需要将这部分写入到 <code>nano ~/.zshrc</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#GO</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/Cellar/go/1.14.7/libexec</span><br><span class="line"><span class="built_in">export</span> GOPATH=~/.go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure>

<p>记得执行 <code>source ~/.zshrc</code> 命令后才会生效。然后执行 <code>go env</code> 命令查看是否成功</p>
<details>
<summary>输出过长，请点开查看！！！</summary>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">GO111MODULE=&quot;on&quot;</span><br><span class="line">GOARCH=&quot;amd64&quot;</span><br><span class="line">GOBIN=&quot;&quot;</span><br><span class="line">GOCACHE=&quot;/Users/yangjunning/Library/Caches/go-build&quot;</span><br><span class="line">GOENV=&quot;/Users/yangjunning/Library/Application Support/go/env&quot;</span><br><span class="line">GOEXE=&quot;&quot;</span><br><span class="line">GOFLAGS=&quot;&quot;</span><br><span class="line">GOHOSTARCH=&quot;amd64&quot;</span><br><span class="line">GOHOSTOS=&quot;darwin&quot;</span><br><span class="line">GOINSECURE=&quot;&quot;</span><br><span class="line">GONOPROXY=&quot;&quot;</span><br><span class="line">GONOSUMDB=&quot;&quot;</span><br><span class="line">GOOS=&quot;darwin&quot;</span><br><span class="line">GOPATH=&quot;/Users/yangjunning/go&quot;</span><br><span class="line">GOPRIVATE=&quot;&quot;</span><br><span class="line">GOPROXY=&quot;https://goproxy.cn,direct&quot;</span><br><span class="line">GOROOT=&quot;/usr/local/Cellar/go/1.14.7/libexec&quot;</span><br><span class="line">GOSUMDB=&quot;sum.golang.org&quot;</span><br><span class="line">GOTMPDIR=&quot;&quot;</span><br><span class="line">GOTOOLDIR=&quot;/usr/local/Cellar/go/1.14.7/libexec/pkg/tool/darwin_amd64&quot;</span><br><span class="line">GCCGO=&quot;gccgo&quot;</span><br><span class="line">AR=&quot;ar&quot;</span><br><span class="line">CC=&quot;clang&quot;</span><br><span class="line">CXX=&quot;clang++&quot;</span><br><span class="line">CGO_ENABLED=&quot;1&quot;</span><br><span class="line">GOMOD=&quot;/dev/null&quot;</span><br><span class="line">CGO_CFLAGS=&quot;-g -O2&quot;</span><br><span class="line">CGO_CPPFLAGS=&quot;&quot;</span><br><span class="line">CGO_CXXFLAGS=&quot;-g -O2&quot;</span><br><span class="line">CGO_FFLAGS=&quot;-g -O2&quot;</span><br><span class="line">CGO_LDFLAGS=&quot;-g -O2&quot;</span><br><span class="line">PKG_CONFIG=&quot;pkg-config&quot;</span><br><span class="line">GOGCCFLAGS=&quot;-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/zn/17xnqr8s1pjbpzt9_t38tyhc0000gn/T/go-build998676802=/tmp/go-build -gno-record-gcc-switches -fno-common&quot;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="七牛云镜像代理"><a href="#七牛云镜像代理" class="headerlink" title="七牛云镜像代理"></a>七牛云镜像代理</h2><p>打开你的终端并执行，Go 1.13 及以上可行，其他版本请阅读<span class="exturl" data-url="aHR0cHM6Ly9nb3Byb3h5LmNuLw==" title="https://goproxy.cn/">Goproxy中国<i class="fa fa-external-link"></i></span> 查看文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go env -w GO111MODULE=on</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> go env -w GOPROXY=https://goproxy.cn,direct</span></span><br></pre></td></tr></table></figure>

<h2 id="Go-常用命令"><a href="#Go-常用命令" class="headerlink" title="Go 常用命令"></a>Go 常用命令</h2><p>1、<code>go build</code>：用于编译我们指定的源码文件或代码包以及它们的依赖包</p>
<p>2、<code>go clean</code>：用来移除当前源码包里面编译生成的文件</p>
<p>3、<code>go doc</code>：打印附于Go语言程序实体上的文档。我们可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的。</p>
<p>4、<code>go fmt</code>：帮助格式化你的代码文件，你只需要执行 go fmt xxx.go 你的代码将会被修改为标准格式</p>
<p>5、<code>go get</code>：根据要求和实际情况从互联网上下载或更新指定的代码败一级依赖包，并对他们进行编译和安装</p>
<p>6、<code>go install</code>：用于编译并安装指定的代码包及它们的依赖包</p>
<p>7、<code>go run</code>：可以遍历源码并运行命令源码文件</p>
<h2 id="Go标准库"><a href="#Go标准库" class="headerlink" title="Go标准库"></a>Go标准库</h2><p>1、sync：提供了基本的同步原语。在多个goroutine访问共享资源的时候，需要使用sync中提供的锁机制。</p>
<p>2、os：提供了对操作系统功能的非平台相关访问接口。接口为Unix风格。提供的功能包括文件操作、进程管理、信号和用户账号等。</p>
<p>3、time：时间相关的处理</p>
<p>4、fmt：实现格式化的输入输出操作。</p>
<p>5、io：实现了一系列非平台相关的IO相关接口和实现，比如提供了对os中系统相关的IO功能的封装。我们在进行流式读写（比如读写文件）时，会用到该包。</p>
<p>6、http：提供web服务</p>
<p>7、string：处理字符串的一些函数集合，包括合并、查找、分割、比较、后缀检查、索引、大小写处理等等。</p>
<h2 id="VsCode插件推荐"><a href="#VsCode插件推荐" class="headerlink" title="VsCode插件推荐"></a>VsCode插件推荐</h2><ul>
<li>Go：Rich Go language support for Visual Studio Code</li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>创建<code>helloworld.go</code>写入下面内容:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">// 代码包声明语句。</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span> <span class="comment">// 系统包用来输出的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 打印函数调用语句。用于打印输出信息。</span></span><br><span class="line">  fmt.Println(sayHello(<span class="string">&quot;掘金&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(juejin <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span>+juejin</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后执行<code>go run helloworld.go</code>，好了你已经入门了,下面可以一起开启爬虫的学习了，下面我会循序渐进地带大家实现一个爬取掘金专栏并转成Markdown的格式保存到本地的小爬虫，取名叫<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2p1ZWppbi1zcGlkZXI=" title="https://github.com/youngjuning/juejin-spider">juejin-spider<i class="fa fa-external-link"></i></span>。</p>
<h2 id="爬虫是什么"><a href="#爬虫是什么" class="headerlink" title="爬虫是什么"></a>爬虫是什么</h2><p>百度百科和维基百科对网络爬虫的定义：简单来说爬虫就是抓取目标网站内容的工具，一般是根据定义的行为自动进行抓取, 对网页或数据的分析与过滤；抓取的网页URL进行爬行策略。</p>
<p>简单来说就是把目标网页下载下来，然后通过解析、过滤、去重等一系列操作获得自己想要的数据并以相应的格式保存下来。大致流程如下图：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb67f112c5234a97b12eb690ab58435f~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<h2 id="colloy极速上手"><a href="#colloy极速上手" class="headerlink" title="colloy极速上手"></a>colloy极速上手</h2><p>gocolly是用go实现的网络爬虫框架，目前在github上具有11K+星，名列go版爬虫程序榜首。gocolly快速优雅，在单核上每秒可以发起1K以上请求；以回调函数的形式提供了一组接口，可以实现任意类型的爬虫；依赖goquery库可以像jquery一样选择web元素。</p>
<p>gocolly的官方网站是<span class="exturl" data-url="aHR0cDovL2dvLWNvbGx5Lm9yZy8=" title="http://go-colly.org/">http://go-colly.org/<i class="fa fa-external-link"></i></span>，提供了详细的文档和示例代码。安装colly:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go get -u github.com/gocolly/colly/...</span><br></pre></td></tr></table></figure>

<h3 id="人生第一个爬虫"><a href="#人生第一个爬虫" class="headerlink" title="人生第一个爬虫"></a>人生第一个爬虫</h3><p>在 <code>go.mod</code> 中管理依赖：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">module juejin.im/junning</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.14</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">  github.com/gocolly/colly/v2 latest</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>新建 <code>main.go</code> 文件并编写代码：</p>
<blockquote>
<p>这段代码不长，但是我看了官方文档以及五六篇博客，才搞定，就为了让我人生第一个爬虫足够完整。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="comment">// 1、导入 colly。</span></span><br><span class="line">    <span class="string">&quot;github.com/gocolly/colly&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gocolly/colly/extensions&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 2、创建 collector</span></span><br><span class="line">    c := colly.NewCollector(colly.AllowedDomains(<span class="string">&quot;juejin.im&quot;</span>)) <span class="comment">// 要限定域名，否则就把全网都爬下来了</span></span><br><span class="line">    extensions.RandomUserAgent(c)                              <span class="comment">// 使用随机的UserAgent，最好能使用代理。这样就不容易被ban</span></span><br><span class="line">    extensions.Referer(c)                                      <span class="comment">// 在访问的时候带上Referrer，意思就是这一次点击是从哪个页面产生的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、事件监听，通过 callback 执行事件处理。</span></span><br><span class="line">    c.OnError(<span class="function"><span class="keyword">func</span><span class="params">(_ *colly.Response, err error)</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Something went wrong:&quot;</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">    c.OnRequest(<span class="function"><span class="keyword">func</span><span class="params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// fmt.Println(&quot;Visiting&quot;, r.URL)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// Find and visit all links</span></span><br><span class="line">    c.OnHTML(<span class="string">&quot;a[href]&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">        fmt.Println(e.Text)</span><br><span class="line">        e.Request.Visit(e.Attr(<span class="string">&quot;href&quot;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、启动网页访问</span></span><br><span class="line">    c.Visit(<span class="string">&quot;https://juejin.im/&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>:=</code> 的方式声明变量并赋值，JS写多了好不习惯（语法学习推荐大家看<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vYm9vay82ODQ0NzMzODMzNDAxNTk3OTY2L3NlY3Rpb24=" title="https://juejin.im/book/6844733833401597966/section">漫画 Go 语言 纯手绘版<i class="fa fa-external-link"></i></span> ）</li>
<li><code>*clolly.HTMLElement</code> 的语法是声明参数类型的</li>
</ul>
<h3 id="回调及其调用顺序"><a href="#回调及其调用顺序" class="headerlink" title="回调及其调用顺序"></a>回调及其调用顺序</h3><p>gocolly 的原理就是监听网络访问，并提供了7事件和回调来供开发者来发挥。</p>
<ol>
<li>OnRequest：请求执行之前调用</li>
<li>OnError：请求出错的时候调用</li>
<li>OnResponseHeaders：Called after response headers received响应头接收到时调用</li>
<li>OnResponse：响应完成后调用</li>
<li>OnHTML：如果接收到的内容是HTML，则在OnResponse之后立即调用</li>
<li>OnXML：如果接收到的内容是HTML或者XML，则在OnHTML之后立即调用</li>
<li>OnScraped：在OnXML之后立即调用</li>
</ol>
<h3 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h3><p>这里列出了 <code>*colly.HTMLElement</code> 和 <code>*colly.Request</code> 的类型定义，在开发过程中，你可以随时跳转到类型定义文件，或者查看 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvY29sbHkvY29sbHkv" title="https://github.com/gocolly/colly/">https://github.com/gocolly/colly/<i class="fa fa-external-link"></i></span> 中对应的文件都可以（据说源码写的很优秀，有时间研究一下）。PS：和TypeScript其实有很多相似之处，可以类比学习，这也是为啥我可以一夜入门。</p>
<h4 id="colly-HTMLElement"><a href="#colly-HTMLElement" class="headerlink" title="*colly.HTMLElement"></a>*colly.HTMLElement</h4><blockquote>
<p>在线链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvY29sbHkvY29sbHkvYmxvYi9tYXN0ZXIvaHRtbGVsZW1lbnQuZ28=" title="https://github.com/gocolly/colly/blob/master/htmlelement.go">https://github.com/gocolly/colly/blob/master/htmlelement.go<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTMLElement is the representation of a HTML tag.</span></span><br><span class="line"><span class="keyword">type</span> HTMLElement <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// Name is the name of the tag</span></span><br><span class="line">    Name       <span class="keyword">string</span></span><br><span class="line">    Text       <span class="keyword">string</span></span><br><span class="line">    attributes []html.Attribute</span><br><span class="line">    <span class="comment">// Request is the request object of the element&#x27;s HTML document</span></span><br><span class="line">    Request *Request</span><br><span class="line">    <span class="comment">// Response is the Response object of the element&#x27;s HTML document</span></span><br><span class="line">    Response *Response</span><br><span class="line">    <span class="comment">// DOM is the goquery parsed DOM object of the page. DOM is relative</span></span><br><span class="line">    <span class="comment">// to the current HTMLElement</span></span><br><span class="line">    DOM *goquery.Selection</span><br><span class="line">    <span class="comment">// Index stores the position of the current element within all the elements matched by an OnHTML callback</span></span><br><span class="line">    Index <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="colly-Request"><a href="#colly-Request" class="headerlink" title="*colly.Request"></a>*colly.Request</h4><blockquote>
<p>在线链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvY29sbHkvY29sbHkvYmxvYi9tYXN0ZXIvcmVxdWVzdC5nbw==" title="https://github.com/gocolly/colly/blob/master/request.go">https://github.com/gocolly/colly/blob/master/request.go<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Request is the representation of a HTTP request made by a Collector</span></span><br><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// URL is the parsed URL of the HTTP request</span></span><br><span class="line">    URL *url.URL</span><br><span class="line">    <span class="comment">// Headers contains the Request&#x27;s HTTP headers</span></span><br><span class="line">    Headers *http.Header</span><br><span class="line">    <span class="comment">// Ctx is a context between a Request and a Response</span></span><br><span class="line">    Ctx *Context</span><br><span class="line">    <span class="comment">// Depth is the number of the parents of the request</span></span><br><span class="line">    Depth <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// Method is the HTTP method of the request</span></span><br><span class="line">    Method <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// Body is the request body which is used on POST/PUT requests</span></span><br><span class="line">    Body io.Reader</span><br><span class="line">    <span class="comment">// ResponseCharacterencoding is the character encoding of the response body.</span></span><br><span class="line">    <span class="comment">// Leave it blank to allow automatic character encoding of the response body.</span></span><br><span class="line">    <span class="comment">// It is empty by default and it can be set in OnRequest callback.</span></span><br><span class="line">    ResponseCharacterEncoding <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// ID is the Unique identifier of the request</span></span><br><span class="line">    ID        <span class="keyword">uint32</span></span><br><span class="line">    collector *Collector</span><br><span class="line">    abort     <span class="keyword">bool</span></span><br><span class="line">    baseURL   *url.URL</span><br><span class="line">    <span class="comment">// ProxyURL is the proxy address that handles the request</span></span><br><span class="line">    ProxyURL <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="爬取掘金专栏"><a href="#爬取掘金专栏" class="headerlink" title="爬取掘金专栏"></a>爬取掘金专栏</h2><p>爬虫的原理就是模拟一个网页访问，获取文档信息，并对信息以各种手段解析出自己需要的数据，并保存数据。</p>
<p>由于作者是仓促间一夜入门Go语言，无力实现一个数据爬取的爬虫，我实现的是：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">访问掘金专栏详情页</span><br><span class="line">        ⏬</span><br><span class="line">获取指定的内容和标题部分</span><br><span class="line">        ⏬</span><br><span class="line">将标题作为文件名</span><br><span class="line">        ⏬</span><br><span class="line">把内容转为Markdown格式存入文件</span><br><span class="line">        ⏬</span><br><span class="line">保存文件到本地</span><br></pre></td></tr></table></figure>

<h3 id="分析页面结构"><a href="#分析页面结构" class="headerlink" title="分析页面结构"></a>分析页面结构</h3><p><strong>专栏标题结构</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">data-v-23a9d5ed</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span>(.*?)<span class="tag">&lt;<span class="name">\</span>/<span class="attr">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>专栏正文结构</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;markdown-body&quot;</span>&gt;</span>(.*?)<span class="tag">&lt;<span class="name">\</span>/<span class="attr">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="获取专栏标题和内容"><a href="#获取专栏标题和内容" class="headerlink" title="获取专栏标题和内容"></a>获取专栏标题和内容</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := colly.NewCollector(</span><br><span class="line">        colly.Async(<span class="literal">true</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    c.OnRequest(<span class="function"><span class="keyword">func</span><span class="params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Visiting&quot;</span>, r.URL)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    c.OnError(<span class="function"><span class="keyword">func</span><span class="params">(_ *colly.Response, err error)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;Something went wrong:&quot;</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    c.OnHTML(<span class="string">&quot;.article-title&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">        <span class="comment">// Code Here</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    c.OnHTML(<span class="string">&quot;.markdown-body&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">        <span class="comment">// Code Here</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    c.Visit(<span class="string">&quot;https://juejin.im/post/&quot;</span> + *post)</span><br><span class="line">    c.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>colly.NewCollector</code>里面加了一项<code>colly.Async(true)</code>，表示抓取时异步的，这能让抓取速度显著提高</li>
<li>使用 <code>OnHTML</code> 事件分别抓取带有<code>article-title</code>和<code>.markdown-body</code>的元素，这里边就是我们下边要实现功能的逻辑实现地。</li>
<li><code>OnHTML</code> 第一个参数是符合CSS选择器规则的，可以使用任意选择器搞事情。</li>
</ul>
<h3 id="转HTML为Markdown"><a href="#转HTML为Markdown" class="headerlink" title="转HTML为Markdown"></a>转HTML为Markdown</h3><p>这里我们借助的是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pvaGFubmVzS2F1Zm1hbm4vaHRtbC10by1tYXJrZG93bg==" title="https://github.com/JohannesKaufmann/html-to-markdown">html-to-markdown<i class="fa fa-external-link"></i></span> 这个库提供的功能，我们将其简单封装一下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将Html转为Markdown</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertHTMLToMarkdown</span><span class="params">(selection *goquery.Selection)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    converter := md.NewConverter(<span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="literal">nil</span>)</span><br><span class="line">    markdown := converter.Convert(selection)</span><br><span class="line">    <span class="keyword">return</span> markdown</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="保存文件到本地"><a href="#保存文件到本地" class="headerlink" title="保存文件到本地"></a>保存文件到本地</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(fileName <span class="keyword">string</span>,content <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    filePath := fileName + <span class="string">&quot;.md&quot;</span></span><br><span class="line">    <span class="keyword">var</span> file *os.File</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> checkFileIsExist(filePath) &#123;</span><br><span class="line">        <span class="comment">// 如果文件存在，则删除</span></span><br><span class="line">        err := os.Remove(filePath)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建文件并写入内容</span></span><br><span class="line">    file, _ = os.Create(filePath)</span><br><span class="line">    n, _ := io.WriteString(file, <span class="string">&quot;## &quot;</span>+fileName+<span class="string">&quot;\n\n&quot;</span>+content)</span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    file.Close()</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查文件是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkFileIsExist</span><span class="params">(fileName <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    _, err := os.Stat(fileName)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li><code>os.Stat</code>：用来获取文件或文件信息，基于它封装了<code>checkFileIsExist</code> 判断文件是否存在</li>
<li><code>os.Create</code>+<code>io.WriteString</code>实现了文件的创建和写入文件</li>
<li>判断文件存在则用<code>os.Remove(filePath)</code> 删除文件，以覆盖文件（懒得看覆盖文件的方法）</li>
</ul>
<h3 id="获取命令行参数"><a href="#获取命令行参数" class="headerlink" title="获取命令行参数"></a>获取命令行参数</h3><p>这个写法我用NodeJS写CLI工具的时候写法差不多，有兴趣的可以<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2NsaQ==" title="https://github.com/youngjuning/cli">看一下，<i class="fa fa-external-link"></i></span>下次不一定，就这次呗。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> post = flag.String(<span class="string">&quot;post&quot;</span>, <span class="string">&quot;6859538537830858759&quot;</span>, <span class="string">&quot;文章编号&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> rootDir = flag.String(<span class="string">&quot;root&quot;</span>, root, <span class="string">&quot;文件保存的根目录&quot;</span>)</span><br><span class="line">  flag.Parse()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取环境变量"><a href="#获取环境变量" class="headerlink" title="获取环境变量"></a>获取环境变量</h3><p>GO语言中不支持使用<code>~</code>号代表家目录，经过一番折腾，找到这个解决办法，这不和Deno一个德行，这语言设计都是互相借鉴（抄）的吧。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">os.Getenv(<span class="string">&quot;HOME&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="获取图片"><a href="#获取图片" class="headerlink" title="获取图片"></a>获取图片</h3><p>测试脚本的时候发现有图片的文章，图片都丢失了，这怎么行，没有图片的文章是没有灵魂的。分析的结果是掘金的图片是懒加载的，标签大概长这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;lazyload inited loaded&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://i.loli.net/2020/08/13/cVomW7L9YOTw2uA.png&quot;</span> <span class="attr">data-width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">data-height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2020/08/13/cVomW7L9YOTw2uA.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我盲猜是这个<code>data-</code>属性的问题，遂在脚本中加入了下面的代码将<code>data-</code>删掉：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">reg := regexp.MustCompile(<span class="string">`data-`</span>)</span><br><span class="line">        html, _ := e.DOM.Html()</span><br><span class="line">        markdown := convertHTMLToMarkdown(reg.ReplaceAllString(html, <span class="string">&quot;&quot;</span>))</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2hvbWVicmV3LWp1ZWppbi1zcGlkZXIvcmVsZWFzZXMvdGFnL3YwLjEuMA==" title="https://github.com/youngjuning/homebrew-juejin-spider/releases/tag/v0.1.0">youngjuning/homebrew-juejin-spider@0.1.0<i class="fa fa-external-link"></i></span> 已经发布，可以完美地抓取掘金专栏啦。</p>
<h3 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h3><blockquote>
<p>代码太长，源码在这里 》》》<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2p1ZWppbi1zcGlkZXI=" title="https://github.com/youngjuning/juejin-spider">https://github.com/youngjuning/juejin-spider<i class="fa fa-external-link"></i></span>《《《，都读到这里了，给个star呗。</p>
</blockquote>
<h2 id="打包并使用Homebrew发布脚本"><a href="#打包并使用Homebrew发布脚本" class="headerlink" title="打包并使用Homebrew发布脚本"></a>打包并使用Homebrew发布脚本</h2><p>黑客是要有追求的，不可能做个玩具出来。而且Go本身就是运行起来不靠任何依赖和环境，我不能要求使用工具的人还得装个go的环境。我第一个想到的就是将我的脚本发到Homebrew，谢天谢地，<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lODg4MzFhYWM2MmE=" title="https://www.jianshu.com/p/e88831aac62a">使用HomeBrew发布脚本<i class="fa fa-external-link"></i></span> 详细地讲解了这个过程。</p>
<h3 id="1、打包成可执行文件"><a href="#1、打包成可执行文件" class="headerlink" title="1、打包成可执行文件"></a>1、打包成可执行文件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go build juejin.go</span><br></pre></td></tr></table></figure>

<p>会在当前目录下生成一个叫 juejin 的可执行文件，<code>./juejin</code> 是可以执行的，也可以使用<code>go build -o=/usr/local/bin juejin.go</code> 或 <code>go build -o=$GOPATH/bin/ juejin.go</code> 放到已经注册的系统路径中。</p>
<h3 id="2、将可执行文件打包成-tar-gz-的格式"><a href="#2、将可执行文件打包成-tar-gz-的格式" class="headerlink" title="2、将可执行文件打包成 tar.gz 的格式"></a>2、将可执行文件打包成 tar.gz 的格式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar zcvf juejin_0.0.1.tar.gz juejin</span></span><br></pre></td></tr></table></figure>

<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f64f139d9578418fa7eaae6a33191266~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<p>上传到git，供配方软连接到这个脚本文件。</p>
<h3 id="3、使用-brew-create-lt-git-url-gt-tab-user-repo-创建药方"><a href="#3、使用-brew-create-lt-git-url-gt-tab-user-repo-创建药方" class="headerlink" title="3、使用 brew create &lt;git-url&gt; --tab user/repo 创建药方"></a>3、使用 <code>brew create &lt;git-url&gt; --tab user/repo</code> 创建药方</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ brew create \</span><br><span class="line">    https://github.com/youngjuning/homebrew-juejin-spider/raw/master/juejin_0.0.1.tar.gz \</span><br><span class="line">    --tap youngjuning/homebrew-juejin-spider</span><br></pre></td></tr></table></figure>

<p>我们需要对安装方式做一下调整:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">install</span></span></span><br><span class="line">    bin.install <span class="string">&quot;juejin&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>做完这些操作后，保存，提交到git上。</p>
<h3 id="4、安装脚本"><a href="#4、安装脚本" class="headerlink" title="4、安装脚本"></a>4、安装脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install youngjuning/juejin-spider/juejin</span></span><br></pre></td></tr></table></figure>

<p>执行 <code>juejin -h</code> 检查是否成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> juejin -h</span></span><br><span class="line">Usage of juejin:</span><br><span class="line">  -post string</span><br><span class="line">        文章编号 (default &quot;6859538537830858759&quot;)</span><br><span class="line">  -root string</span><br><span class="line">        文件保存的根目录 (default &quot;/Users/yangjunning/juejin&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="在其他人的设备安装自己的脚本"><a href="#在其他人的设备安装自己的脚本" class="headerlink" title="在其他人的设备安装自己的脚本"></a>在其他人的设备安装自己的脚本</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 在执行这个命令的时候，brew会自动去更新自己的formula仓库，会耗时几分钟。。。</span><br><span class="line">$ brew tap youngjuning/juejin-spider https://github.com/youngjuning/homebrew-juejin-spider.git</span><br><span class="line">// 下载、安装脚本</span><br><span class="line">$ brew install youngjuning/juejin-spider/juejin</span><br></pre></td></tr></table></figure>

<h2 id="超级赛亚人镇"><a href="#超级赛亚人镇" class="headerlink" title="超级赛亚人镇"></a>超级赛亚人镇</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bcd91045ddd8472f857afccf3dff1b15~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<blockquote>
<p>感谢你耐心看完了这篇文章，点赞等于学会，收藏等于精通，点赞加收藏是真爱！！！也期待在评论区和我讨论！！！</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODU5Nzg0MTAzNjIxODIwNDI5" title="https://juejin.im/post/6859784103621820429">🏆 技术专题第二期 | 我与 Go 的那些事……<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>golang</category>
      </categories>
      <tags>
        <tag>掘金专栏</tag>
        <tag>爬虫</tag>
        <tag>掘金征文</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native 集成 CodePush 指南</title>
    <url>/2020/02/React%20Native%20%E9%9B%86%E6%88%90%20CodePush%20%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/02/25/dLMXty7iYKnVk35.png" alt=""></p>
<p>目前现存的热更新方案有腾讯的 Bugly 应用升级](<span class="exturl" data-url="aHR0cHM6Ly9idWdseS5xcS5jb20vdjIvcHJvZHVjdHMvdXBncmFkZSnjgIFSZWFjdA==" title="https://bugly.qq.com/v2/products/upgrade)、React">https://bugly.qq.com/v2/products/upgrade)、React<i class="fa fa-external-link"></i></span> Native 中文网的Pushy](<span class="exturl" data-url="aHR0cHM6Ly91cGRhdGUucmVhY3RuYXRpdmUuY24vaG9tZSnjgIHlvq7ova/nmoRbQ29kZVB1c2hdKGh0dHBzOi8vYnJlLmlzL3IzWTloSnZCKQ==" title="https://update.reactnative.cn/home)、微软的[CodePush](https://bre.is/r3Y9hJvB)">https://update.reactnative.cn/home)、微软的[CodePush](https://bre.is/r3Y9hJvB)<i class="fa fa-external-link"></i></span> 和用来搭建私服的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpc29uZy9jb2RlLXB1c2gtc2VydmVy" title="https://github.com/lisong/code-push-server">code-push-server<i class="fa fa-external-link"></i></span>。</p>
<p>本文分享的是基于微软 AppCenter 的 CodePush 服务实现热更新，这个比较有代表性，也方便各位读者大大实践。当然鉴于国内的网络环境，后期会发布一篇如何基于 <code>code-push-server</code> 实现热更新功能。</p>
<a id="more"></a>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Xcode：Version 11.3.1 (11C504)</li>
<li>react-native：0.61.5</li>
<li>react-native-code-push: 6.1.0</li>
<li>appcenter-cli：2.3.3</li>
</ul>
<h2 id="CodePush介绍"><a href="#CodePush介绍" class="headerlink" title="CodePush介绍"></a>CodePush介绍</h2><p>CodePush 是一个 App Center 云服务，使 Apache Cordova 和 React Native 开发人员可以将移动应用程序更新直接部署到其用户的设备上。它充当中央存储库的角色，开发人员可以将某些更新（例如JS，HTML，CSS和图像更改）发布到该存储库，并且应用程序可以（使用提供的客户端SDK）从中查询更新。这使你可以与最终用户建立更具确定性和直接的参与度模型，同时解决错误和/或添加一些小的功能，这些功能不需要你重建二进制文件和/或通过任何公共应用商店重新分发二进制文件。默认情况下，在 App Center 上创建的所有 React Native 应用程序都启用了 CodePush。</p>
<blockquote>
<p>注意：对于Android设备，CodePush仅在兼容TLS 1.2的设备上运行</p>
</blockquote>
<h3 id="1-安装-App-Center-CLI"><a href="#1-安装-App-Center-CLI" class="headerlink" title="1.安装 App Center CLI"></a>1.安装 App Center CLI</h3><p>你可以使用 App Center CLI 管理 CodePush 的大多数功能。要安装 CLI，请打开终端窗口或命令提示符并执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g appcenter-cli</span><br></pre></td></tr></table></figure>

<p>成功安装 App Center CLI 后，执行<code>appcenter login</code>命令为你的 App Center 帐户详细信息配置 CLI：</p>
<p><img src="https://i.loli.net/2020/02/26/TwJyWsBOK5trHmj.png" alt=""></p>
<h3 id="2-应用管理"><a href="#2-应用管理" class="headerlink" title="2.应用管理"></a>2.应用管理</h3><p>部署更新之前，必须使用以下命令使用 App Center 创建应用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appcenter apps create -d &lt;appDisplayName&gt; -o &lt;operatingSystem&gt; -p &lt;platform&gt;</span><br></pre></td></tr></table></figure>

<p>如果您的应用同时针对 Android 和 iOS，我们强烈建议您使用 CodePush 创建单独的应用。每个平台一个。这样，您可以分别管理和发布更新，从长远来看，这会使事情变得更简单。大多数人只是在应用名称后缀<code>-Android</code>和<code>-iOS</code>。例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appcenter apps create -d MyApp-Android -o Android -p React-Native</span><br><span class="line">appcenter apps create -d MyApp-iOS -o iOS -p React-Native</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在 Android 和 iOS 上使用相同的应用程序可能会导致安装异常，因为为 iOS 生成的 CodePush 更新包将具有与为 Android 生成的更新不同的内容。</p>
</blockquote>
<blockquote>
<p>通过 <code>appcenter apps list</code> 可以查看所有的应用。</p>
</blockquote>
<blockquote>
<p>在App中心CLI的一个重要的新功能是设置一个应用程序的能力<strong>当前应用程序</strong>使用<code>appcenter apps set-current &lt;ownerName&gt;/&lt;appName&gt;</code>。通过将一个应用程序设置为当前应用程序，您无需<code>-a</code>在其他CLI命令中使用该标志。例如，<code>appcenter codepush deployment list -a &lt;ownerName&gt;/&lt;appName&gt;</code>可以将命令缩短<code>appcenter codepush deployment list</code>为设置当前应用程序的时间。您可以使用来检查哪个应用程序被设置为您帐户的当前应用程序<code>appcenter apps get-current</code>。设置当前应用程序可以缩短大多数CLI命令的键入时间。</p>
</blockquote>
<p>使用 <code>code-push-cli</code>，应用程序会自动进行两次部署（<code>Staging</code>和 <code>Production</code>）。在 App Center 中，你必须使用以下命令自行创建它们：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appcenter codepush deployment add -a &lt;ownerName&gt;/&lt;appName&gt; Staging</span><br><span class="line">appcenter codepush deployment add -a &lt;ownerName&gt;/&lt;appName&gt; Production</span><br></pre></td></tr></table></figure>

<p>创建部署后，您可以使用来访问两个部署的部署密钥<code>appcenter codepush deployment list --displayKeys</code>，您可以开始通过它们各自的SDK（用于<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXBwY2VudGVyL2Rpc3RyaWJ1dGlvbi9jb2RlcHVzaC9jb3Jkb3Zh" title="https://docs.microsoft.com/en-us/appcenter/distribution/codepush/cordova">Cordova<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXBwY2VudGVyL2Rpc3RyaWJ1dGlvbi9jb2RlcHVzaC9yZWFjdC1uYXRpdmU=" title="https://docs.microsoft.com/en-us/appcenter/distribution/codepush/react-native">React Native的<i class="fa fa-external-link"></i></span>详细信息）来配置移动客户端。</p>
<h3 id="3-修改versionNam"><a href="#3-修改versionNam" class="headerlink" title="3.修改versionNam"></a>3.修改versionNam</h3><p>在 <code>android/app/build.gradle</code> 中有个 <code>android.defaultConfig.versionName</code> 属性（在 <code>ios/**/Info.plist</code> 是 <code>&lt;key&gt;CFBundleShortVersionString&lt;/key&gt;</code> 属性 ）；我们需要把应用版本改成 <code>1.0.0</code>（默认<code>1.0</code>，但是 <code>codepush</code> 需要三位数）</p>
<h3 id="3-发布应用更新"><a href="#3-发布应用更新" class="headerlink" title="3.发布应用更新"></a>3.发布应用更新</h3><p>更改应用程序的代码或资产后，请按照以下说明使用 App Center CLI 将更新发布到App Center。</p>
<p>执行 App Center CLI <code>release-react</code> 命令以捆绑应用程序的代码和资产文件，然后将它们作为新版本发布到 App Center 服务器。例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appcenter codepush release-react -a &lt;ownerName&gt;/&lt;appName&gt; -d Staging -t 1.0.0 -m  --development false --description &lt;description&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>[-a|--app &lt;ownerName&gt;/&lt;appName&gt;]</code>:  指定应用</li>
<li><code>[-d|--deployment-name &lt;deploymentName&gt;</code>]:  此参数指定要将更新发布到的部署。它默认为<code>Staging</code>，但是当您准备部署到<code>Production</code>或您自己的自定义部署之一时，只需显式设置此参数即可。</li>
<li><code>[-t|--target-binary-version &lt;targetBinaryVersion&gt;]</code>:  指定要更新的应用的原生版本</li>
<li><code>[-m|--mandatory]</code>:  是强制更新，默认 <code>false</code></li>
<li><code>[--development]</code>: 此参数指定是否生成未缩小的开发JS包。如果未指定，则默认为<code>false</code>禁用警告并缩小包的位置。</li>
<li><code>[--description &lt;description&gt;</code>]:  此参数为部署提供了可选的“更改日志”。该值将往返传送给客户端，以便在检测到更新时，您的应用可以选择将其显示给最终用户（例如，通过“新功能”对话框）。该字符串接受诸如<code>\n</code>和的控制字符，<code>\t</code>因此您可以在描述中包括空格格式，以提高可读性。</li>
</ul>
<blockquote>
<p>CodePush客户端支持差异更新，因此，即使您在每次更新中释放JS捆绑包和资产，最终用户也只会实际下载他们需要的文件。该服务会自动处理此问题，因此您可以专注于创建出色的应用程序，而我们会担心优化最终用户的下载。</p>
</blockquote>
<h2 id="React-Native-Client-SDK"><a href="#React-Native-Client-SDK" class="headerlink" title="React Native Client SDK"></a>React Native Client SDK</h2><p>该插件为 CodePush 服务提供了客户端集成，使你可以轻松地向你的 React Native 应用添加动态更新体验。</p>
<blockquote>
<p>注意：以下配置均基于 react-native 0.60 版本。</p>
</blockquote>
<h3 id="它是如何工作的？"><a href="#它是如何工作的？" class="headerlink" title="它是如何工作的？"></a>它是如何工作的？</h3><p>React Native 应用程序由 JavaScript 文件和任何相关的图片组成，它们由打包程序 <span class="exturl" data-url="aHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vbWV0cm8v" title="https://facebook.github.io/metro/">metro<i class="fa fa-external-link"></i></span> 捆绑在一起, 并作为特定于平台的二进制文件（<code>.ipa</code> 或 <code>.apk</code> 文件）的一部分进行分发。发行该应用程序时，更新 JavaScript 代码（例如进行错误修复，添加新功能）或更新图片资源要求你重新编译并重新分发整个二进制文件，其中包括与商店相关的所有时间。</p>
<p>通过使你的 JavaScript 和图片资源与您发布到 CodePush 服务器的更新同步，CodePush 插件可帮助你立即在最终用户面前获得产品改进。</p>
<p>为了确保您的最终用户始终拥有你的应用程序的正常运行版本，CodePush 插件会维护先前更新的副本，因此，如果您不小心推送了包含崩溃的更新，它可以自动回滚。这样，你可以放心，新发现的发行版不会导致用户被阻塞。</p>
<blockquote>
<p>注意：任何涉及本机代码的产品更改（例如，修改<code>AppDelegate.m</code>/<code>MainActivity.java</code>、添加 <code>ttf</code> 或添加原生插件）都无法通过 CodePush 分发，因此必须通过相应的商店进行更新。</p>
</blockquote>
<h3 id="支持的React-Native平台"><a href="#支持的React-Native平台" class="headerlink" title="支持的React Native平台"></a>支持的React Native平台</h3><ul>
<li>iOS（7以上）</li>
<li>Android（4.1以上）</li>
<li>Windows（UWP）</li>
</ul>
<h3 id="安装-react-native-code-push"><a href="#安装-react-native-code-push" class="headerlink" title="安装 react-native-code-push"></a>安装 react-native-code-push</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add react-native-code-push</span><br></pre></td></tr></table></figure>

<p>与其他所有React Native插件一样，iOS 和 Android 的集成体验也有所不同，因此请根据您的应用目标平台执行以下设置步骤。请注意，如果您同时针对两个平台，建议为每个平台创建单独的 CodePush 应用程序。</p>
<blockquote>
<p>本指南假定您已使用该<code>react-native init</code>命令初始化React Native项目。</p>
</blockquote>
<h3 id="iOS设置"><a href="#iOS设置" class="headerlink" title="iOS设置"></a>iOS设置</h3><p>获得 CodePush 插件后，必须将其集成到 React Native 应用程序的 Xcode 项目中并正确配置。</p>
<ol>
<li><p>运行<code>cd ios &amp;&amp; pod install &amp;&amp; cd ..</code>以安装所有必需的CocoaPods依赖项。</p>
</li>
<li><p>打开<code>AppDelegate.m</code>文件，并为CodePush标头添加导入语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;CodePush&#x2F;CodePush.h&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找以下代码行，该代码为生产版本的网桥设置源URL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;];</span><br></pre></td></tr></table></figure>
</li>
<li><p>用以下行替换它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return [CodePush bundleURL];</span><br></pre></td></tr></table></figure>

<p>此更改将你的应用配置为始终加载应用JS捆绑包的最新版本。在首次启动时，这将与使用该应用程序编译的文件相对应。但是，在通过CodePush推送更新后，这将返回最近安装的更新的位置。</p>
<p>通常，您只想使用 CodePush 来解决发行版本中的 JS 包位置，因此，我们建议使用<code>DEBUG</code>预处理器宏在是否使用打包程序服务器和 CodePush 之间进行动态切换。这样可以更轻松地确保您在生产中获得所需的正确行为，同时仍可以在调试时使用Chrome开发工具，实时重新加载等。</p>
<p>你的<code>sourceURLForBridge</code>方法应如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge</span><br><span class="line">&#123;</span><br><span class="line">  #if DEBUG</span><br><span class="line">    return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index&quot; fallbackResource:nil];</span><br><span class="line">  #else</span><br><span class="line">    return [CodePush bundleURL];</span><br><span class="line">  #endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将部署密钥添加到<code>Info.plist</code>：</p>
<p>为了让 CodePush 运行时知道应该针对哪个部署查询更新，请打开你的应用的 <code>Info.plist</code> 文件，并添加一个名为<code>CodePushDeploymentKey</code>的新条目，其值是你要配置的应用的 <code>Staging Deployment Key</code>。</p>
<p>你可以通过 <code>appcenter codepush deployment list -k</code> 来检索这个值（该 <code>-k</code> 标志是必需的，因为默认情况下不会显示键），然后复制相对应的 <code>Deployment Key</code> 即可。</p>
<p><img src="https://cloud.githubusercontent.com/assets/116461/11601733/13011d5e-9a8a-11e5-9ce2-b100498ffb34.png" alt=""></p>
<p>为了有效利用与 CodePush 应用程序一起创建的 <code>Staging</code> 和 <code>Production</code> 部署，请在实际将你的应用程序对 CodePush 的使用移入生产环境之前，进行<a href="#多部署测试">多部署测试</a>的配置。</p>
<blockquote>
<p>如果您需要动态使用其他部署，还可以使用<a href="#动态部署分配">动态部署分配</a>在JS代码中覆盖部署密钥</p>
</blockquote>
</li>
</ol>
<h3 id="Android设置"><a href="#Android设置" class="headerlink" title="Android设置"></a>Android设置</h3><p>为了将CodePush集成到您的Android项目中，请执行以下步骤：</p>
<ol>
<li><p>在<code>android/app/build.gradle</code>文件中，将文件<code>codepush.gradle</code>添加为下面的其他构建任务定义：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">apply <span class="attr">from:</span> <span class="string">&quot;../../node_modules/react-native-code-push/android/codepush.gradle&quot;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>MainApplication.java</code>通过以下更改更新文件以使用 CodePush：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 1. 导入插件的类</span></span><br><span class="line"><span class="keyword">import</span> com.microsoft.codepush.react.CodePush;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">ReactApplication</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReactNativeHost mReactNativeHost = <span class="keyword">new</span> ReactNativeHost(<span class="keyword">this</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 2. 重写 getJSBundleFile 方法，每次 app 启动的时候让 CodePush 运行时决定从哪里加载 JS bundle</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">getJSBundleFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> CodePush.getJSBundleFile();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将部署密钥添加到<code>strings.xml</code>：</p>
<p>为了让 CodePush 运行时知道它应该查询哪些部署更新，请打开您的应用程序的 <code>string.xml</code> 文件，并添加一个名为 <code>CodePushDeploymentKey</code> 的新字符串，它的值是应用的 <code>Staging</code> 部署。你可以通过 <code>appcenter deployment list &lt;ownerName&gt;/&lt;appName&gt; -k</code> 获取该值。</p>
<p><img src="https://cloud.githubusercontent.com/assets/116461/11601733/13011d5e-9a8a-11e5-9ce2-b100498ffb34.png" alt=""></p>
<p>您<code>strings.xml</code>应该看起来像这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;app_name&quot;</span>&gt;</span>AppName<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">moduleConfig</span>=<span class="string">&quot;true&quot;</span> <span class="attr">name</span>=<span class="string">&quot;CodePushDeploymentKey&quot;</span>&gt;</span>DeploymentKey<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了有效利用与CodePush应用程序一起创建的<code>Staging</code>和<code>Production</code>部署，请在实际将您的应用程序对CodePush的使用移入生产环境之前，请参考下面的<a href="#多部署测试">多部署测试</a>文档。</p>
<blockquote>
<p>如果您需要动态使用其他部署，还可以使用<a href="#动态部署分配">动态部署分配</a>在JS代码中覆盖部署密钥</p>
</blockquote>
</li>
</ol>
<h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>下载并链接了 CodePush 插件，并且为你的应用程序询问 CodePush 从何处获取正确的 JS bundle 包后，剩下的唯一一件事就是向你的应用程序添加必要的代码，以控制以下策略：</p>
<ol>
<li>什么时候（多久）检查一次更新？（例如，应用程序启动，在设置页面中单击按钮或按固定时间间隔定期进行）</li>
<li>当有可用更新时，如何将其呈现给最终用户？</li>
</ol>
<p>最简单的方式是 <code>CodePush-ify</code> 应用程序的根组件。为此，您可以选择一下两个选项之一：</p>
<ul>
<li><p>选项1：将您的根组件与 codePush 高阶组件包装在一起：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codePush <span class="keyword">from</span> <span class="string">&#x27;react-native-code-push&#x27;</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">App = codePush(App)</span><br></pre></td></tr></table></figure>
</li>
<li><p>选项2：使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d5Y2F0cy9qYXZhc2NyaXB0LWRlY29yYXRvcnM=" title="https://github.com/wycats/javascript-decorators">ES7装饰器 <i class="fa fa-external-link"></i></span>语法：</p>
<blockquote>
<p>Babel 6.x 尚不支持装饰器。您可能需要通过安装和使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NrZXZ5L2JhYmVsLXByZXNldC1yZWFjdC1uYXRpdmUtc3RhZ2UtMCNiYWJlbC1wcmVzZXQtcmVhY3QtbmF0aXZlLXN0YWdlLTA=" title="https://github.com/skevy/babel-preset-react-native-stage-0#babel-preset-react-native-stage-0">babel-preset-react-native-stage-0<i class="fa fa-external-link"></i></span> 来启用装饰器。</p>
</blockquote>
<blockquote>
<p>Babel 7.x 支持装饰器语法。你可以使用 <span class="exturl" data-url="aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvZW4vbmV4dC9iYWJlbC1wbHVnaW4tcHJvcG9zYWwtZGVjb3JhdG9ycy5odG1s" title="https://babeljs.io/docs/en/next/babel-plugin-proposal-decorators.html">@babel/plugin-proposal-decorators<i class="fa fa-external-link"></i></span> 来启用装饰器。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codePush <span class="keyword">from</span> <span class="string">&quot;react-native-code-push&quot;</span></span><br><span class="line"></span><br><span class="line">@codePush</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>默认情况下，CodePush 将在每次启动应用程序时检查更新。如果有可用更新，它将在下一次重新启动应用程序时（由最终用户或操作系统明确显示）以静默方式下载并安装，从而确保最终用户获得最少的侵入性体验。如果必须使用可用的更新，则将立即安装该更新，以确保最终用户尽快获得它。</p>
<p>如果您希望应用程序更快地发现更新，则还可以选择每次应用程序从后台恢复时与 CodePush 服务器同步。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> codePushOptions = &#123; <span class="attr">checkFrequency</span>: codePush.CheckFrequency.ON_APP_RESUME &#125;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> codePush(codePushOptios)(App)</span><br></pre></td></tr></table></figure>

<p>另外，如果您想对检查发生的时间进行细粒度的控制（例如按按钮或定时器间隔），则可以使用 <span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvZFB1d0hXcmU=" title="https://bre.is/dPuwHWre">CodePush.sync()<i class="fa fa-external-link"></i></span> 随时进行调用，还可以通过 <code>SyncOptions</code> 通过 <code>CheckFrequency.MANUAL</code> 来关闭 CodePush 的自动检查功能:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;View, StyleSheet&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> codePush <span class="keyword">from</span> <span class="string">&#x27;react-native-code-push&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> AwesomeButton <span class="keyword">from</span> <span class="string">&#x27;react-native-really-awesome-button&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> codePushOptions = &#123; <span class="attr">checkFrequency</span>: codePush.CheckFrequency.MANUAL &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> checkForUpdate = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    codePush.sync(&#123;</span><br><span class="line">      updateDialog: <span class="literal">true</span>,</span><br><span class="line">      installMode: codePush.InstallMode.IMMEDIATE,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clear = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    codePush.clearUpdates();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;AwesomeButton type=<span class="string">&quot;secondary&quot;</span> onPress=&#123;checkForUpdate&#125;&gt;</span><br><span class="line">        检查更新</span><br><span class="line">      &lt;/AwesomeButton&gt;</span><br><span class="line">      &lt;AwesomeButton type=<span class="string">&quot;secondary&quot;</span> onPress=&#123;clear&#125;&gt;</span><br><span class="line">        清除更新</span><br><span class="line">      &lt;/AwesomeButton&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：这是可选的，完全可以不使用 codePush 这里包装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> codePush(codePushOptions)(App);</span><br></pre></td></tr></table></figure>

<p>如果你想要显示一个更新确认弹窗（一个主动安装）。配置何时安装可用更新（例如强制立即重启）或以任何其他方式自定义更新体验，请参阅 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXBwY2VudGVyL2Rpc3RyaWJ1dGlvbi9jb2RlcHVzaC9yZWFjdC1uYXRpdmUjYXBpLXJlZmVyZW5jZQ==" title="https://docs.microsoft.com/en-us/appcenter/distribution/codepush/react-native#api-reference">codepush<i class="fa fa-external-link"></i></span> API参考以获取有关一下信息：如何调整此默认行为。</p>
<h3 id="应用商店规则"><a href="#应用商店规则" class="headerlink" title="应用商店规则"></a>应用商店规则</h3><ul>
<li><p>苹果App允许使用热更新<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL3Byb2dyYW1zL2lvcy9pbmZvcm1hdGlvbi9pT1NfUHJvZ3JhbV9JbmZvcm1hdGlvbl80XzNfMTUucGRm" title="https://developer.apple.com/programs/ios/information/iOS_Program_Information_4_3_15.pdf">Apple’s developer agreement<i class="fa fa-external-link"></i></span>, 为了不影响用户体验，规定必须使用静默更新。</p>
</li>
<li><p>Google Play不能使用静默更新，必须弹框告知用户App有更新。</p>
</li>
<li><p>中国的android市场必须采用静默更新（如果弹框提示，App会被“请上传最新版本的二进制应用包”原因驳回）。</p>
</li>
</ul>
<h2 id="多部署测试"><a href="#多部署测试" class="headerlink" title="多部署测试"></a>多部署测试</h2><p>在入门文档中，我们说明了如何使用特定的部署密钥配置 CodePush 插件。但是，为了有效地测试发型版，至关重要的是，在首次创建 CodePush 应用程序（或你可能已经创建的任何自定义部署）时，利用我们建议进行的 <code>Staging</code> 和 <code>Production</code> 部署。</p>
<blockquote>
<p>我们的客户端回滚功能可以帮助您在安装导致崩溃的版本后解除对用户的阻止，服务器端的回滚（例如<code>appcenter codepush rollback</code>）使您可以防止其他用户在发现错误的版本后再安装它。但是，如果可以从一开始就防止广泛发布错误更新，那显然更好。</p>
</blockquote>
<p>利用<code>Staging</code>和<code>Production</code>部署，您可以实现类似于以下的工作流程（随意定制！）：</p>
<ol>
<li><code>Staging</code> 使用 <code>appcenter codepush release-react</code> 命令将 CodePush 更新发布到您的部署中（如果你需要更多的控制权可以使用 <code>appcenter codepush release</code> ）</li>
<li>构建应用程序的 staging<code>/</code>beta` 版本，从服务器同步更新，并验证其是否按预期工作</li>
<li>使用以下命令将测试的发行版从 <code>Staging</code> 升级到 <code>Prouction</code>: <code>appcenter codepush promote -a &lt;ownerName&gt;/&lt;appName&gt; -s Staging -d Production</code></li>
<li>构建应用程序的 <code>production</code>/<code>release</code>，从服务其同步更新并验证其是否按预期工作</li>
</ol>
<blockquote>
<p>如果您想采取更为谨慎的方法，甚至可以选择在“＃3”中执行 <strong>分阶段推出</strong>，这使您可以减轻更新带来的额外潜在风险（例如，＃2中的测试是否接触了所有可能的设备），仅使一定比例的用户可以使用生产更新（例如<code>code-push promote -a / -s Staging -d Production -r 20%</code>）。然后，在等待了一段合理的时间以查看是否有崩溃报告或客户反馈后，您可以通过运行将其扩展到整个受众<code>appcenter codepush patch -a / Production -r 100%</code>。</p>
</blockquote>
<h3 id="安卓系统"><a href="#安卓系统" class="headerlink" title="安卓系统"></a>安卓系统</h3><p>在<span class="exturl" data-url="aHR0cHM6Ly9nb29nbGUuZ2l0aHViLmlvL2FuZHJvaWQtZ3JhZGxlLWRzbC9jdXJyZW50L2luZGV4Lmh0bWw=" title="https://google.github.io/android-gradle-dsl/current/index.html">Android Gradle plugin <i class="fa fa-external-link"></i></span>允许您定义自定义配置设置，每个“构建类型”（如调试，发布）。此机制使您可以轻松地使用 CodePush 部署密钥配置调试版本，而发行版本也可以配置为使用 CodePush 生产部署密钥。</p>
<p>提醒一下，您可以通过<code>appcenter codepush deployment list  -k</code>从终端运行来检索这些键。</p>
<p>要进行设置，请执行以下步骤：</p>
<ol>
<li><p>打开项目的应用程序级别<code>build.gradle</code>文件（例如标准 React Native 项目中的 <code>android/app/build.gradle</code>）</p>
</li>
<li><p>查找此<code>android &#123; buildTypes &#123;&#125; &#125;</code>部分，并<code>resValue</code>为您<code>debug</code>和<code>release</code>构建类型定义条目，分别引用您的密钥<code>Staging</code>和<code>Production</code>部署密钥。</p>
 <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  buildTypes &#123;</span><br><span class="line">    debug &#123;</span><br><span class="line">      signingConfig signingConfigs.debug</span><br><span class="line">      <span class="comment">// Note: CodePush updates should not be tested in Debug mode as they are overriden by the RN packager. However, because CodePush checks for updates in all modes, we must supply a key.</span></span><br><span class="line">      resValue <span class="string">&quot;string&quot;</span>, <span class="string">&quot;CodePushDeploymentKey&quot;</span>, <span class="string">&#x27;&quot;&quot;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    release &#123;</span><br><span class="line">      <span class="comment">// Caution! In production, you need to generate your own keystore file.</span></span><br><span class="line">      <span class="comment">// see https://facebook.github.io/react-native/docs/signed-apk-android.</span></span><br><span class="line">      signingConfig signingConfigs.release</span><br><span class="line">      minifyEnabled enableProguardInReleaseBuilds</span><br><span class="line">      proguardFiles getDefaultProguardFile(<span class="string">&quot;proguard-android.txt&quot;</span>), <span class="string">&quot;proguard-rules.pro&quot;</span></span><br><span class="line">      resValue <span class="string">&quot;string&quot;</span>, <span class="string">&quot;CodePushDeploymentKey&quot;</span>, <span class="string">&#x27;&quot;&quot;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> The naming convention for releaseStaging is significant due to http://t.cn/EAnyAzi</span></span><br><span class="line">    releaseStaging.initWith(release)</span><br><span class="line">    releaseStaging &#123;</span><br><span class="line">        resValue <span class="string">&quot;string&quot;</span>, <span class="string">&quot;CodePushDeploymentKey&quot;</span>, <span class="string">&#x27;&quot;&quot;&#x27;</span></span><br><span class="line">        <span class="comment">// Note: It is a good idea to provide matchingFallbacks for the new buildType you create to prevent build issues（http://t.cn/EAex4XH）</span></span><br><span class="line">        <span class="comment">// Add the following line if not already there</span></span><br><span class="line">        matchingFallbacks = [<span class="string">&#x27;release&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果要在构建过程中配置部署密钥，请记住从<code>strings.xml</code>中删除密钥。</p>
</blockquote>
<blockquote>
<p><code>releaseStaging</code>由于<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9ibG9iL2UwODNmOWExMzliM2Y4YzU1NTI1MjhmOGY4MDE4NTI5ZWYzMTkzYjkvcmVhY3QuZ3JhZGxlI0w3OQ==" title="https://github.com/facebook/react-native/blob/e083f9a139b3f8c5552528f8f8018529ef3193b9/react.gradle#L79">此行<i class="fa fa-external-link"></i></span>，的命名约定，这不能改。</p>
</blockquote>
</li>
</ol>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><blockquote>
<p>该部分适用于 Xcode 11</p>
</blockquote>
<p>Xcode 允许你为每个<strong>配置</strong> (如 <code>debug</code>, <code>release</code>) 自定义构建设置，然后可以将其引用为 <code>Info.plist</code> 文件中的键值（如 <code>CodePushDeploymentKey</code> 设置）。此机制是您可以轻松地进行构建配置以生成二进制文件，这些二进制文件被配置为与不同的 CodePush 部署同步。</p>
<p>要进行设置，请执行以下步骤：</p>
<ol>
<li><p>打开您的 Xcode 项目，然后在 <code>Project navigator</code> 窗口中选择您的项目</p>
</li>
<li><p>确保已选择 <code>PROJECT</code> 节点，而不是 <code>TARGETS</code></p>
</li>
<li><p>选择 <code>Info</code> 标签</p>
</li>
<li><p>点击 <code>+</code> 的内部按钮<code>Duplicate &quot;Release&quot; Configuration</code><br><img src="https://docs.microsoft.com/en-us/appcenter/distribution/codepush/images/rn-ios-8.png" alt=""></p>
</li>
<li><p>将新配置命名为 <code>Staging</code>（或您喜欢的任何名称）</p>
</li>
<li><p>选择 <code>Build Settings</code> 选项卡</p>
</li>
<li><p>单击工具栏上的 <code>+</code> 按钮，创建一个名为  <code>CONFIGURATION_BUILD_DIR</code> 的 <code>User-Defined Setting</code>, 使用相同的 <code>per-configuration</code> 配置。</p>
<p><img src="https://i.stack.imgur.com/Sodu3.png" alt=""></p>
<blockquote>
<p>注意：每次创建这个 Xcode 都会崩溃，只能先把值写入之后，在 <code>project.pbxproj</code> 中新建。</p>
</blockquote>
</li>
<li><p>点击工具栏的 <code>+</code>  并选择 <code>Add User-Defined Setting</code></p>
<p><img src="https://docs.microsoft.com/en-us/appcenter/distribution/codepush/images/rn-ios-10.png" alt=""></p>
</li>
<li><p>将此新设置命名为<code>CodePushDeploymentKey</code>，展开它，然后为 <code>Staging</code>配置指定您的 <code>Staging</code> 部署密钥，为 <code>Release</code> 配置指定您的 <code>Production</code> 部署密钥。</p>
<p><img src="https://docs.microsoft.com/en-us/appcenter/distribution/codepush/images/rn-ios-11.png" alt=""></p>
<blockquote>
<p>提醒一下，您可以通过<code>appcenter codepush deployment list -a &lt;ownerName&gt;/&lt;appName&gt; --displayKeys</code>从终端运行来检索这些键。</p>
</blockquote>
</li>
<li><p>打开项目的 <code>Info.plist</code> 文件，然后将<code>CodePushDeploymentKey</code>条目的值更改为<code>$(CODEPUSH_KEY)</code></p>
<p><img src="https://docs.microsoft.com/en-us/appcenter/distribution/codepush/images/rn-ios-12.png" alt=""></p>
</li>
</ol>
<p>就是这样了，现在当你运行或构建你的App，你的 <code>Staging</code> 包将自动同步你的 <code>Staging</code> 部署，你的 <code>Release</code> 包将自动同步你的 <code>Production</code> 部署。</p>
<blockquote>
<p>注意：如果你遇到 <code>ld: library not found for ...</code> 错误信息，请看一下这个 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9yZWFjdC1uYXRpdmUtY29kZS1wdXNoL2lzc3Vlcy80MjY=" title="https://github.com/Microsoft/react-native-code-push/issues/426">issuse<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>此外，如果你想给他们不同的名称和/或图标，你可以修改<code>Product Bundle Identifier</code>，<code>Product Name</code>以及<code>Asset Catalog App Icon Set Name</code></p>
<h2 id="动态部署分配"><a href="#动态部署分配" class="headerlink" title="动态部署分配"></a>动态部署分配</h2><p>上一节说明了如何利用多个<code>CodePush</code>部署，以便在更新发布给用户之前，有效地测试您的更新内容。 但是，由于该工作流静态地将部署分配嵌入到实际二进制文件中，因此<code>临时构建</code>和<code>生产构建</code>只会同步该部署的更新内容。</p>
<p>在许多情况下，这是足够的，因为您只希望您的团队，客户，利益相关者等与您的预生产版本同步，因此，他们只需要知道如何与该版本同步构建。</p>
<p>但是，如果你希望能够进行 <code>A / B</code> 测试，或者为某些用户提供应用程序的早期访问权限，那么能够在运行时将特定用户（或受众）动态地置于特定部署中将非常有用。</p>
<p>为了实现此工作流程，你需要做的就是指定调用该<code>codePush</code>方法时希望当前用户与之同步的部署密钥。指定后，此密钥将覆盖应用程序的 <code>Info.plist</code>（iOS）或 <code>MainActivity.java</code>（Android）文件中提供的“默认”密钥。这允许您生成临时或生产构建，也可以根据需要动态“重定向”。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Imagine that &quot;userProfile&quot; is a prop that this component received</span></span><br><span class="line"><span class="comment">// which includes the deployment key that the current user should use.</span></span><br><span class="line">codePush.sync(&#123; <span class="attr">deploymentKey</span>: userProfile.CODEPUSH_KEY &#125;);</span><br></pre></td></tr></table></figure>

<p>有了这样的变化后，现在只需选择应用程序如何为当前用户配置正确的部署密钥。 在实践中，通常有两种解决方案：</p>
<ol>
<li>将更改部署的功能开放给用户。例如，您的设置页面可能会有一个切换按钮以启用“测试版”的访问权限。 如果您不在乎预生产更新的内容被得知，并且您的某些用户可能希望根据自己的意愿选择使用最新（并且可能有错误）的更新（有点像Chrome渠道）。 但是，此解决方案将决策权交给您的用户，这无法帮助您透明地执行 <code>A / B</code> 测试。</li>
<li>使用额外的元数据注释用户的服务器端配置文件，标明与其同步的部署。 默认情况下，您的应用只能使用二进制嵌入密钥，但在用户通过身份验证后，您的服务器可以选择将其“重定向”到其他部署，这样您就可以根据需要逐步将某些用户或组放置在不同的部署中。您甚至可以选择将服务器响应存储在本地存储中，以使其成为新的默认值。 如何将密钥与用户的配置文件一起存储完全取决于您的身份验证解决方案（例如 <code>Auth0</code>，<code>Firebase</code>，自定义<code>DB</code> + <code>REST API</code>），但这通常非常简单。</li>
</ol>
<blockquote>
<p>注意：如果需要，您还可以实施混合解决方案，允许最终用户在不同部署之间切换，同时还允许您的服务器覆盖该决策。 这样，您就拥有了“部署解决方案”的层次结构，可确保您的应用程序能够自行更新，用户可以通过获得最新内容的访问权限来获得最新体验，但您也有能力根据需要对用户进行 <code>A / B</code> 测试。</p>
</blockquote>
<p>由于我们建议将<code>Staging</code>部署用于更新的预发布测试（如上一节中所述），因此使用该部署对用户执行 <code>A / B</code> 测试并不一定有意义，与此相反，你应该允许早期访问（如上面选项1中所述）。因此，我们建议充分利用自定义应用程序部署，以便您可以按用户需求对用户进行细分。例如，您可以创建长期甚至是一次性的部署，向其发布应用程序的变体，然后将某些用户放入其中，以查看其参与度。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// <span class="comment">#1) Create your new deployment to hold releases of a specific app variant</span></span><br><span class="line">appcenter codepush deployment add -a &lt;ownerName&gt;/&lt;appName&gt; <span class="built_in">test</span>-variant-one</span><br><span class="line"></span><br><span class="line">// <span class="comment">#2) Target any new releases at that custom deployment</span></span><br><span class="line">appcenter codepush release-react -a &lt;ownerName&gt;/&lt;appName&gt; -d <span class="built_in">test</span>-variant-one</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：从一个部署“切换”到另一个部署的用户数，被纳入到部署中的“安装度量”中报告的总用户数。例如，如果您的<code>Production</code> 部署当前报告的用户总数为1，但您将该用户动态切换为 <code>Staging</code> 部署，则 <code>Production</code> 部署将报告 0个总用户，而 <code>Staging</code> 部署将报告1（刚刚切换的用户）。 即使在使用基于运行时的部署重定向解决方案的情况下，这种行为可以让你准确地跟踪您的版本使用情况。</p>
</blockquote>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><blockquote>
<p>源码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL0FwcENlbnRlckNvZGVQdXNoRGVtbw==" title="https://github.com/youngjuning/AppCenterCodePushDemo">https://github.com/youngjuning/AppCenterCodePushDemo<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h3 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;View, StyleSheet&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> codePush <span class="keyword">from</span> <span class="string">&#x27;react-native-code-push&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> AwesomeButton <span class="keyword">from</span> <span class="string">&#x27;react-native-really-awesome-button&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;codePushSync, checkForUpdate&#125; <span class="keyword">from</span> <span class="string">&#x27;./CodePushUtils&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> getUpdateMetadata = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> running = <span class="keyword">await</span> codePush.getUpdateMetadata(</span><br><span class="line">      codePush.UpdateState.RUNNING,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> pending = <span class="keyword">await</span> codePush.getUpdateMetadata(</span><br><span class="line">      codePush.UpdateState.PENDING,</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;[CodePush] running&#x27;</span>, running);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;[CodePush] pending&#x27;</span>, pending);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    codePushSync();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;AwesomeButton onPress=&#123;checkForUpdate&#125; style=&#123;&#123;<span class="attr">marginBottom</span>: <span class="number">10</span>&#125;&#125;&gt;</span><br><span class="line">        Check For Update!</span><br><span class="line">      &lt;/AwesomeButton&gt;</span><br><span class="line">            &lt;AwesomeButton onPress=&#123;<span class="function">() =&gt;</span> codePush.clearUpdates()&#125; style=&#123;&#123;<span class="attr">marginBottom</span>: <span class="number">10</span>&#125;&#125;&gt;</span><br><span class="line">        Clear Updates!</span><br><span class="line">      &lt;/AwesomeButton&gt;</span><br><span class="line">      &lt;AwesomeButton onPress=&#123;getUpdateMetadata&#125;&gt;</span><br><span class="line">        getUpdateMetadata!</span><br><span class="line">      &lt;/AwesomeButton&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>

<h3 id="CodePushUtils-js"><a href="#CodePushUtils-js" class="headerlink" title="CodePushUtils.js"></a>CodePushUtils.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;AppState, Platform, Alert&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> codePush <span class="keyword">from</span> <span class="string">&#x27;react-native-code-push&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> configReader <span class="keyword">from</span> <span class="string">&#x27;react-native-config-reader&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CodePushDeploymentKey = &#123;</span><br><span class="line">  ios: &#123;</span><br><span class="line">    debug: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    staging: <span class="string">&#x27;944zuIiRSds-ZZY6AQF82aRl0b1vUL_mMxiie&#x27;</span>,</span><br><span class="line">    release: <span class="string">&#x27;yyJfk2vtpLUUlOCg3FnvCcky9o4U1lEWR1UJV&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  android: &#123;</span><br><span class="line">    debug: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    releasestaging: <span class="string">&#x27;tOncLvKACzzSkUaML9tCOUfPZxHVnobfaNIUe&#x27;</span>,</span><br><span class="line">    release: <span class="string">&#x27;Gtc4iXTPn24yu6CBrbl_V2GTy21xtdQyfm6x1&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDeploymentKey = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> buildType = configReader.BUILD_TYPE.toLowerCase();</span><br><span class="line">  <span class="keyword">const</span> deploymentKey = CodePushDeploymentKey[Platform.OS][buildType];</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;[CodePushUtils]&#x27;</span>, deploymentKey);</span><br><span class="line">  <span class="keyword">return</span> deploymentKey;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> codePushStatusDidChange = <span class="keyword">async</span> syncStatus =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (syncStatus) &#123;</span><br><span class="line">    <span class="keyword">case</span> codePush.SyncStatus.CHECKING_FOR_UPDATE:</span><br><span class="line">      <span class="comment">// 0 - 正在查询CodePush服务器以进行更新。</span></span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">&#x27;[CodePush] Checking for update.&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> codePush.SyncStatus.AWAITING_USER_ACTION:</span><br><span class="line">      <span class="comment">// 1 - 有可用的更新，并且向最终用户显示了一个确认对话框。（仅在updateDialog使用时适用）</span></span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">&#x27;[CodePush] Awaiting user action.&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> codePush.SyncStatus.DOWNLOADING_PACKAGE:</span><br><span class="line">      <span class="comment">// 2 - 正在从CodePush服务器下载可用更新。</span></span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">&#x27;[CodePush] Downloading package.&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> codePush.SyncStatus.INSTALLING_UPDATE:</span><br><span class="line">      <span class="comment">// 3 - 已下载一个可用的更新，并将其安装。</span></span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">&#x27;[CodePush] Installing update.&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> codePush.SyncStatus.UP_TO_DATE:</span><br><span class="line">      <span class="comment">// 4 - 应用程序已配置的部署完全最新。</span></span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">&#x27;[CodePush] App is up to date.&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> codePush.SyncStatus.UPDATE_IGNORED:</span><br><span class="line">      <span class="comment">// 5 该应用程序具有可选更新，最终用户选择忽略该更新。（仅在updateDialog使用时适用）</span></span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">&#x27;[CodePush] User cancelled the update.&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> codePush.SyncStatus.UPDATE_INSTALLED:</span><br><span class="line">      <span class="comment">// 6 - 安装了一个可用的更新，它将根据 SyncOptions 中的 InstallMode指定在 syncStatusChangedCallback 函数返回后立即或在下次应用恢复/重新启动时立即运行。</span></span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">&#x27;[CodePush] Installed update.&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> codePush.SyncStatus.SYNC_IN_PROGRESS:</span><br><span class="line">      <span class="comment">// 7 - 正在执行的 sync 操作</span></span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">&#x27;[CodePush] Sync already in progress.&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> codePush.SyncStatus.UNKNOWN_ERROR:</span><br><span class="line">      <span class="comment">// -1 - 同步操作遇到未知错误。</span></span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">&#x27;[CodePush] An unknown error occurred.&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> codePushDownloadDidProgress = <span class="function"><span class="params">progress</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> curPercent = (</span><br><span class="line">    (progress.receivedBytes / progress.totalBytes) *</span><br><span class="line">    <span class="number">100</span></span><br><span class="line">  ).toFixed(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;[CodePushUtils] Downloading Progress&#x27;</span>, <span class="string">`<span class="subst">$&#123;curPercent&#125;</span>%`</span>);</span><br><span class="line">  <span class="comment">// console.log(`$&#123;progress.receivedBytes&#125; of $&#123;progress.totalBytes&#125; received.`);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> syncImmediate = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> deploymentKey = getDeploymentKey();</span><br><span class="line">  codePush.sync(</span><br><span class="line">    &#123;</span><br><span class="line">      updateDialog: &#123;</span><br><span class="line">        <span class="comment">// 是否显示更新描述</span></span><br><span class="line">        appendReleaseDescription: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 更新描述的前缀。 默认为&quot;Description&quot;</span></span><br><span class="line">        descriptionPrefix: <span class="string">&#x27;\n\n更新内容：\n&#x27;</span>,</span><br><span class="line">        <span class="comment">// 强制更新按钮文字，默认为continue</span></span><br><span class="line">        mandatoryContinueButtonLabel: <span class="string">&#x27;立即更新&#x27;</span>,</span><br><span class="line">        <span class="comment">// 强制更新时的信息. 默认为&quot;An update is available that must be installed.&quot;</span></span><br><span class="line">        mandatoryUpdateMessage: <span class="string">&#x27;必须更新后才能使用&#x27;</span>,</span><br><span class="line">        <span class="comment">// 非强制更新时，按钮文字,默认为&quot;ignore&quot;</span></span><br><span class="line">        optionalIgnoreButtonLabel: <span class="string">&#x27;稍后&#x27;</span>,</span><br><span class="line">        <span class="comment">// 非强制更新时，确认按钮文字. 默认为&quot;Install&quot;</span></span><br><span class="line">        optionalInstallButtonLabel: <span class="string">&#x27;后台更新&#x27;</span>,</span><br><span class="line">        <span class="comment">// 非强制更新时，检查到更新的消息文本</span></span><br><span class="line">        optionalUpdateMessage: <span class="string">&#x27;有新版本了，是否更新？&#x27;</span>,</span><br><span class="line">        <span class="comment">// Alert窗口的标题</span></span><br><span class="line">        title: <span class="string">&#x27;更新&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      deploymentKey,</span><br><span class="line">      installMode: codePush.InstallMode.IMMEDIATE,</span><br><span class="line">    &#125;,</span><br><span class="line">    codePushStatusDidChange,</span><br><span class="line">    codePushDownloadDidProgress,</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> checkForUpdate = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> deploymentKey = getDeploymentKey();</span><br><span class="line">  <span class="keyword">const</span> update = <span class="keyword">await</span> codePush.checkForUpdate(deploymentKey);</span><br><span class="line">  <span class="keyword">if</span> (!update) &#123;</span><br><span class="line">    Alert.alert(<span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;已是最新版本&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    syncImmediate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> codePushSync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  AppState.addEventListener(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="params">newState</span> =&gt;</span> &#123;</span><br><span class="line">    newState === <span class="string">&#x27;active&#x27;</span> &amp;&amp; syncImmediate();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Npm-Scripts"><a href="#Npm-Scripts" class="headerlink" title="Npm Scripts"></a>Npm Scripts</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;gradle:clean&quot;: &quot;cd android &amp;&amp; ./gradlew clean&quot;,</span><br><span class="line">    &quot;an:release&quot;: &quot;yarn gradle:clean &amp;&amp; cd android &amp;&amp; ./gradlew app:assembleRelease&quot;,</span><br><span class="line">    &quot;an:installRelease&quot;: &quot;yarn gradle:clean &amp;&amp; cd android &amp;&amp; ./gradlew app:installRelease&quot;,</span><br><span class="line">    &quot;an:staging&quot;: &quot;yarn gradle:clean &amp;&amp; cd android &amp;&amp; ./gradlew app:assembleReleaseStaging&quot;,</span><br><span class="line">    &quot;an:installStaging&quot;: &quot;yarn gradle:clean &amp;&amp; cd android &amp;&amp; ./gradlew app:installReleaseStaging&quot;,</span><br><span class="line">    &quot;displayKeys&quot;: &quot;yarn disPlayIosKeys &amp;&amp; yarn disPlayAndroidKeys&quot;,</span><br><span class="line">    &quot;disPlayIosKeys&quot;: &quot;appcenter codepush deployment list --app youngjuning/AppCenterCodePushDemo-iOS --displayKeys&quot;,</span><br><span class="line">    &quot;disPlayAndroidKeys&quot;: &quot;appcenter codepush deployment list --app youngjuning/AppCenterCodePushDemo-Android --displayKeys&quot;,</span><br><span class="line">    &quot;release-react&quot;: &quot;yarn release-react-ios &amp;&amp; yarn release-react-android&quot;,</span><br><span class="line">    &quot;release-react-ios&quot;: &quot;appcenter codepush release-react --app youngjuning/AppCenterCodePushDemo-iOS&quot;,</span><br><span class="line">    &quot;release-react-android&quot;: &quot;appcenter codepush release-react --app youngjuning/AppCenterCodePushDemo-Android&quot;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="CodePush-什么情况下不会立即重启应用"><a href="#CodePush-什么情况下不会立即重启应用" class="headerlink" title="CodePush 什么情况下不会立即重启应用"></a>CodePush 什么情况下不会立即重启应用</h3><ol>
<li>自上一次<code>disallowRestart</code>被调用，没有新的更新。</li>
<li>有更新，但<code>installMode</code>为<code>InstallMode.ON_NEXT_RESTART</code>的情况下。</li>
<li>有更新，但<code>installMode</code>为<code>InstallMode.ON_NEXT_RESUME</code>，并且程序一直处于前台，并没有从后台切换到前台的情况下。</li>
<li>自从上次<code>disallowRestart</code>被调用，没有再调用<code>restartApp</code>。</li>
</ol>
<h3 id="TypeSctipt"><a href="#TypeSctipt" class="headerlink" title="TypeSctipt"></a>TypeSctipt</h3><p>如果使用 TypeScript，再浏览一次文档的API部分之后，就可以依靠类型系统的提示来工作啦： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9yZWFjdC1uYXRpdmUtY29kZS1wdXNoL2Jsb2IvbWFzdGVyL3R5cGluZ3MvcmVhY3QtbmF0aXZlLWNvZGUtcHVzaC5kLnRz" title="https://github.com/microsoft/react-native-code-push/blob/master/typings/react-native-code-push.d.ts">react-native-code-push.d.ts<i class="fa fa-external-link"></i></span></p>
<h3 id="iOS-添加-BUILD-Type"><a href="#iOS-添加-BUILD-Type" class="headerlink" title="iOS 添加 BUILD_Type"></a>iOS 添加 BUILD_Type</h3><p>在 <code>Info.plist</code> 中添加 <code>BUILD_TYPE</code>，取值为 <code>$(CONFIGURATION)</code></p>
<h3 id="react-native-bundle"><a href="#react-native-bundle" class="headerlink" title="react-native bundle"></a>react-native bundle</h3><p>生成  <code>bundle</code> 命名：<code>react-native bundle --platform</code> 平台 <code>--entry-file</code>启动文件 <code>--bundle-output</code> 打包js输出文件 <code>--assets-dest</code>  资源输出目录 <code>--dev</code>  是否调试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ react-native bundle --platform android --entry-file index.js --bundle-output ./bundle/android/main.jsbundle --assets-dest ./bundle/android --dev <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><table>
<thead>
<tr>
<th align="center">作者微信</th>
<th align="center">知识星球</th>
<th align="center">赞赏作者</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td>
</tr>
</tbody></table>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXBwY2VudGVyL2Rpc3RyaWJ1dGlvbi9jb2RlcHVzaC8=" title="https://docs.microsoft.com/en-us/appcenter/distribution/codepush/">Appcenter CodePush<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9icmUuaXMvRHhXeUQ2d1A=" title="https://bre.is/DxWyD6wP">React-Native应用部署-热更新-CodePush最新集成总结<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82YTVlMDBkMjI3MjM=" title="https://www.jianshu.com/p/6a5e00d22723">CodePush热更新详细接入教程<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3RlY2hibG9nLnNpc2h1eHVlZnUuY29tL2F0cmljbGUuaHRtbD81YmVhYTdlNTlmNTQ1NDAwNzAzOWUwMWM=" title="http://techblog.sishuxuefu.com/atricle.html?5beaa7e59f5454007039e01c">react-native热更新<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Hybrid</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>写给前端的Linux实战教程</title>
    <url>/2020/03/%E5%86%99%E7%BB%99%E5%89%8D%E7%AB%AF%E7%9A%84Linux%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<img src="https://i.loli.net/2020/03/30/rzVCW97GcjAa81k.png" style="zoom:30%;" />

<a id="more"></a>

<p>笔者使用的是 AliYun 服务器 ECS，镜像选择的是 Ubuntu，Ubuntu的详细版本信息是：<code>Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-91-generic x86_64)</code>，如何购买云服务器不在本文讨论范围内，如果只是学习，那你完全可以使用 virtualbox 安装 Ubuntu。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 连接服务器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh &lt;username&gt;@&lt;hostname&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新系统源</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt update</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级系统源</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt upgrade</span></span><br></pre></td></tr></table></figure>

<h2 id="必备环境及应用"><a href="#必备环境及应用" class="headerlink" title="必备环境及应用"></a>必备环境及应用</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt install git</span></span><br></pre></td></tr></table></figure>

<h4 id="命令行配置"><a href="#命令行配置" class="headerlink" title="命令行配置"></a>命令行配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、初始化设置</span></span><br><span class="line">$ git config --global user.name <span class="string">&#x27;youngjuning&#x27;</span></span><br><span class="line">$ git config --global user.email <span class="string">&#x27;youngjuning@aliyun.com&#x27;</span></span><br><span class="line"><span class="comment"># 2、将 `color.ui` 设置为 `auto` 可以让命令的输出拥有更高的可读性。</span></span><br><span class="line">$ git config --global color.ui auto</span><br><span class="line"><span class="comment"># 3、git 记住用户名和密码</span></span><br><span class="line">$ git config --global credential.helper store</span><br><span class="line"><span class="comment"># 4、core.autocrlf</span></span><br><span class="line">$ git config --global core.autocrlf input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Linux或Mac系统使用LF作为行结束符，因此你不想 Git 在签出文件时进行自动的转换；当一个以 <code>CRLF</code> 为行结束符的文件不小心被引入时你肯定想进行修正，把 <code>core.autocrlf</code> 设置成 <code>input</code> 来告诉 Git 在提交时把 <code>CRLF</code> 转换成 <code>LF</code>，签出时不转换：<br>这样会在 Windows 系统上的签出文件中保留 <code>CRLF</code>，会在 Mac 和 Linux 系统上，包括仓库中保留 <code>LF</code>。</p>
</blockquote>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 jre、jdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt install openjdk-8-jre-headless openjdk-8-jdk-headless</span></span><br></pre></td></tr></table></figure>

<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。我们使用 <code>n</code> 模块来维护 Node 的版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt install nodejs npm build-essential</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install -g npm n</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装最新版</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo n latest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 其他命令##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo n 10.16.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装最新的稳定版</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo n lts</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除指定版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> n rm 12.10.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 除去当前版本以外的所有缓存版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> n prune</span></span><br></pre></td></tr></table></figure>

<h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><blockquote>
<p>修改 <code>~/.zshrc</code> 之后都需要执行 <code>source ~/.zshrc</code> 命令使之立即生效</p>
<p><code>echo $SHLL</code> 可以查看当前 Shell</p>
</blockquote>
<ul>
<li><code>apt install zsh</code></li>
<li><code>git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</code></li>
<li>`cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</li>
<li><code>nano ~/.zshrc</code></li>
<li>找到 <code>ZSH_THEME=&quot;robbyrussell&quot;</code> ，把 <code>robbyrussell</code> 替换为 <code>ys</code></li>
<li>修改默认Shell：<code>chsh -s /bin/zsh</code></li>
<li>命令高亮<ul>
<li><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git &quot;$HOME/.zsh-syntax-highlighting&quot; --depth 1</code></li>
<li><code>echo &quot;source $HOME/.zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot; &gt;&gt; &quot;$HOME/.zshrc&quot;</code></li>
</ul>
</li>
<li>重新打开命令行</li>
<li><code>echo &quot;export EDITOR=nano&quot; &gt;&gt; ~/.zshrc</code></li>
</ul>
<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><blockquote>
<p>建议使用：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtaXgvdmltcmM=" title="https://github.com/amix/vimrc">https://github.com/amix/vimrc<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh ~/.vim_runtime/install_awesome_vimrc.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;set number&quot;</span> &gt;&gt; ~/.vimrc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;set showcmd&quot;</span> &gt;&gt; ~/.vimrc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.vimrc</span></span><br></pre></td></tr></table></figure>

<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><code>/</code><ul>
<li><code>bin</code>：包含了会被所有用户使用的可执行程序</li>
<li><code>boot</code>：包含与 Linux 启动密切相关的文件</li>
<li><code>dev</code>：包含外设。它里面的子目录，每一个对应一个外设</li>
<li><code>etc</code>：包含系统的配置文件</li>
<li><code>home</code>：用户的私人目录</li>
<li><code>lib</code>：包含被程序所调用的库文件，例如<code>.so</code>结尾的文件</li>
<li><code>media</code>：可移动的外设（USB盘，SD卡，DVD，光盘，等等）插入电脑时</li>
<li><code>mnt</code>：用于临时挂载一些装置</li>
<li><code>opt</code>：可选的应用软件包，用于安装多数第三方软件和插件</li>
<li><code>root</code>：超级用户 root 的家目录</li>
<li><code>sbin</code>：用于包含系统级的重要可执行程序</li>
<li><code>srv</code>：包含一些网络服务启动之后所需要取用的数据</li>
<li><code>tmp</code>：普通用户和程序存放临时文件的地方</li>
<li><code>usr</code>：Unix Software Resource，安装了大部分用户要调用的程序</li>
<li><code>var</code>：通常包含程序的数据，比如 log（日志）文件</li>
</ul>
</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote>
<p>Linux命令搜索引擎：<span class="exturl" data-url="aHR0cHM6Ly9naXQuaW8vbGludXg=" title="https://git.io/linux">https://git.io/linux<i class="fa fa-external-link"></i></span></p>
</blockquote>
<ul>
<li><code>reboot</code>：重新启动正在运行的Linux操作系统</li>
<li><code>halt</code>：关闭系统</li>
<li><code>shutdown</code>：用来系统关机命令。shutdown指令可以关闭所有程序，并依用户的需要，进行重新开机或关机的动作。</li>
<li><code>poweroff</code>：直接运行即可关机</li>
<li><code>history</code>：用于显示历史命令</li>
<li><code>whice</code>：查找并显示给定命令的绝对路径</li>
<li><code>pwd</code>：显示当前工作目录。（Print Working Directory）</li>
<li><code>source</code>：在当前Shell环境中从指定文件读取和执行命令，让文件修改立即生效。</li>
<li><code>updatedb</code>：创建或更新<code>locate</code>命令所必需的数据库文件</li>
<li><code>uname -a</code>：显示全部Linux系统信息</li>
<li><code>cat /proc/version</code>：显示Linux信息</li>
<li><code>cat /etc/lsb-release</code>：查看发行版信息</li>
<li><code>echo $SHELL</code>：当前的shell</li>
<li><code>service &lt;service&gt; force-reload|reload|restart|start|status|stop</code></li>
<li><code>systemctl start|stop|restart|status|reload</code>：<ul>
<li><code>enable</code>：开机自动启动服务</li>
<li><code>disable</code>：开机不自动启动服务</li>
<li><code>is-enabled</code>：查看服务是否开机自动启动</li>
<li><code>list-unit-files --type=service</code>：查看各个级别下服务的启动和禁用情况</li>
</ul>
</li>
</ul>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="文件目录操作"><a href="#文件目录操作" class="headerlink" title="文件目录操作"></a>文件目录操作</h3><ul>
<li><p><code>ls</code>：显示目录内容列表</p>
<ul>
<li><code>-a</code>：列出所有文件，包括以 “.” 开头的隐含文件。</li>
<li><code>-l</code>：除每个文件名外，增加显示文件类型、权限、硬链接数、所有者名、组名、大小（byte）及时间信息（如未指明是其它时间即指修改时间），可以用 <code>ll</code> 代替</li>
</ul>
</li>
<li><p><code>du</code>：显示每个文件和目录的磁盘使用空间（Disk Usage）</p>
<ul>
<li><code>-a</code>或<code>-all</code>：显示目录中个别文件的大小。</li>
<li><code>-h</code>或<code>--human-readable</code>：以K，M，G为单位，提高信息的可读性。</li>
<li><code>-s</code>或<code>--summarize</code>：仅显示总计，只列出最后加总的值。</li>
</ul>
</li>
<li><p><code>cat -N</code>：连接多个文件并打印到标准输出。(concatenate)</p>
</li>
<li><p><code>less -N</code></p>
<ul>
<li>空格键：前进一页（一个屏幕）</li>
<li>b键：后退一页（一个屏幕）</li>
<li>d键：前进半页（半个屏幕）</li>
<li>u键：后退半页（半个屏幕）</li>
<li>回车键/e键/下箭头：前进一行</li>
<li>y键/上箭头：后退一行</li>
<li>q键：停止读取文件，中止 less 命令</li>
<li>=键：显示你在文件中的什么位置</li>
<li>/键：进入搜索模式<ul>
<li>n键：跳转到下一个匹配项</li>
<li>shift+n：跳转到上一个匹配项</li>
</ul>
</li>
</ul>
</li>
<li><p><code>head</code>：显示文件的开头部分</p>
</li>
<li><p><code>tail</code>：在屏幕上显示指定文件的末尾若干行</p>
<ul>
<li><code>-f</code>：显示文件最新追加的内容。</li>
<li><code>-s&lt;秒数&gt;</code>：与<code>-f</code>选项连用，指定监视文件变化时间隔的秒数，默认1秒</li>
</ul>
</li>
<li><p><code>touch</code>：创建新的空文件</p>
</li>
<li><p><code>mkdir</code>：用来创建目录</p>
<ul>
<li><code>-p</code>或<code>--parents</code>：若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录</li>
</ul>
</li>
<li><p><code>cp</code>：将源文件或目录复制到目标文件或目录中</p>
<ul>
<li><code>-r</code>或<code>-R</code>：递归处理，将指定目录下的所有文件与子目录一并处理，recursive</li>
</ul>
</li>
<li><p><code>mv</code>：用来对文件或目录重新命名</p>
</li>
<li><p><code>rm</code>：用于删除给定的文件和目录</p>
<ul>
<li><code>-r</code>或<code>-R</code>：递归处理，将指定目录下的所有文件与子目录一并处理，recursive</li>
<li><code>-f</code>：强制删除文件或目录</li>
</ul>
</li>
<li><p><code>ln</code>：用来为文件创建链接</p>
<blockquote>
<ul>
<li>硬链接缺陷：一般情况下，只能创建指向文件的硬链接，不能创建指向目录的</li>
<li>硬链接指的是使用了同一个<code>inode</code>号，但是文件名不一样</li>
<li><code>ls -i</code>：显示<code>inode</code>号</li>
</ul>
</blockquote>
<ul>
<li><code>-s</code>, <code>--symbolic</code>：对源文件建立符号链接，而非硬链接</li>
</ul>
</li>
<li><p><code>locate</code>：比 <code>find</code> 好用的文件查找工具，需要配合 <code>updatedb</code> 使用</p>
</li>
<li><p><code>find</code>：在指定目录下查找文件</p>
<blockquote>
<p><code>find [何处] &lt;何物&gt; [做什么]</code></p>
</blockquote>
<ul>
<li><p><code>-name &lt;范本样式&gt;</code>：指定字符串作为寻找文件或目录的范本样式</p>
</li>
<li><p><code>-size &lt;文件大小&gt;</code>：查找符合指定的文件大小的文件</p>
</li>
<li><p><code>-type &lt;文件类型&gt;</code>：只寻找符合指定的文件类型的文件；</p>
<ul>
<li><strong>f</strong> 普通文件</li>
<li><strong>l</strong> 符号连接</li>
<li><strong>d</strong> 目录</li>
<li><strong>c</strong> 字符设备</li>
<li><strong>b</strong> 块设备</li>
<li><strong>s</strong> 套接字</li>
<li><strong>p</strong> Fifo</li>
</ul>
</li>
<li><p><code>-atime &lt;24小时数&gt;</code>：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；</p>
</li>
<li><p><code>-exec &lt;执行指令&gt;</code>：假设find指令的回传值为True，就执行该指令</p>
<blockquote>
<p><code>find . -name *.txt -exec chmod 600 &#123;&#125; \;</code></p>
<p>可以换成<code>-ok</code>,ok 会让你确认操作</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><ul>
<li><p><code>sudo su</code>：切换 root 身份，substitute do</p>
</li>
<li><p><code>useradd -m</code>：创建的新的系统用户自动创建用户的家目录</p>
</li>
<li><p><code>passwd</code>：用于让用户可以更改自己的密码</p>
</li>
<li><p>`userdel -r：用于删除给定的用户以及与用户相关的文件</p>
</li>
<li><p><code>users</code>：显示当前登录系统的所有用户</p>
</li>
<li><p><code>usermod</code>：用于修改用户的基本信息</p>
<ul>
<li><code>-l</code>：对用户重命名。<code>/home</code> 中的用户家目录名不改变，需要手动修改</li>
<li><code>-g</code>：修改用户所在群组</li>
<li><code>-G</code>：将用户添加到多个群组，多个群组用<code>,</code>分割</li>
<li><code>-aG</code> 或 <code>-ag</code>：不离开原来的群组进入新的群组</li>
</ul>
</li>
<li><p><code>groupadd</code>：用于创建一个新的工作组</p>
</li>
<li><p><code>groups</code>：用来打印指定用户所属的工作组</p>
</li>
<li><p><code>chown</code>：用来变更文件或目录的拥有者或所属群组</p>
<blockquote>
<p><code>chown &lt;username&gt;[:gruop] &lt;file|dir&gt;</code></p>
</blockquote>
<ul>
<li><code>-R</code>：递归处理，将指定目录下的所有文件及子目录一并处理</li>
</ul>
</li>
<li><p><code>chgrp</code>：用来变更文件或目录的所属群组</p>
</li>
<li><p><code>chmod</code>：用来变更文件或目录的权限</p>
<blockquote>
<img src="https://i.loli.net/2020/03/28/fiXQkrtNn8yZLWY.png" style="zoom:50%;" />

<p>一共有10位，第<strong>1</strong>位代表文件类型，第<strong>2-4</strong>位表示所有者的读、写和执行权限，第<strong>5-7</strong>位表示同组用户的读、写和执行权限，第<strong>8-10</strong>位表示其他用户的读、写和执行权限。如果没有权限用<code>-</code>占位。如果开启 SELinux，则第<strong>11</strong>位会多一个<code>.</code>。</p>
<ul>
<li>文件类型<ul>
<li><code>d</code>：英语 directory 的缩写，表示<strong>目录</strong></li>
<li><code>l</code>：英文 link 的缩写，表示<strong>链接</strong></li>
<li><code>-</code>：文件</li>
</ul>
</li>
<li><code>r</code>：英语 read 的缩写，表示<strong>读</strong></li>
<li><code>w</code>：英文 write 的缩写，表示<strong>写</strong></li>
<li><code>x</code>：英语 execute 的缩写，表示<strong>执行/运行</strong>。可以运行这个文件</li>
<li><code>.</code>：SELinux 的安全标签，如果第11位有<code>.</code>，表示启用了 SELinux</li>
</ul>
</blockquote>
<ul>
<li><p>用数字来分配权限</p>
<ul>
<li>没有权限：0</li>
<li>执行权限：1</li>
<li>写权限：2</li>
<li>写执行权限：3</li>
<li>读权限：4</li>
<li>读执行权限：5</li>
<li>读写权限：6</li>
<li>读写执行权限：7</li>
</ul>
</li>
<li><p>用字母来分配权限</p>
<ul>
<li>u：user 的缩写，是英语用户的意思。表示所有者</li>
<li>g：group的缩写，是英语群组的意思。表示群组用户</li>
<li>o：other的缩写，是英语其他的意思。表示其他用户</li>
<li>a：all的缩写，是英语所有的意思。表示所有用户</li>
<li>+：加号，表示添加权限</li>
<li>-：减号，表示去除权限</li>
<li>=：等号，表示分配权限</li>
</ul>
<blockquote>
<p><code>chmod u+rx file</code>：文件 file 的所有者增加读和运行的权限</p>
<p><code>chmod g+r file</code>：文件 file 的群组其他用户增加读的权限</p>
<p><code>chmod o-r file</code>：文件 file 的其他用户移除读的权限</p>
<p><code>chmod g+r o-r file</code>：文件 file 的群组其他用户增加读的权限，其他用户移除读的权限</p>
<p><code>chmod go-r file</code>：文件 file 的群组其他用户和其他用户均移除读的权限</p>
<p><code>chmod +x file</code>：文件 file 的所有用户增加运行的权限</p>
<p><code>chmod u=rwx,g=r,0=- file</code>：文件 file 的所有者分配读，写和执行的权限；群组其他用户分配读的权限，不能写或执行；其他用户没有任何权限</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="正则表达式和数据操作"><a href="#正则表达式和数据操作" class="headerlink" title="正则表达式和数据操作"></a>正则表达式和数据操作</h2><h3 id="grep-筛选数据"><a href="#grep-筛选数据" class="headerlink" title="grep: 筛选数据"></a>grep: 筛选数据</h3><p><strong>grep</strong> （global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。用于过滤/搜索的特定字符。可使用正则表达式能多种命令配合使用，使用上十分灵活。</p>
<ul>
<li><code>-i</code> <code>--ignore-case</code>：忽略字符大小写的差别。</li>
<li><code>-n</code>  <code>--line-number</code>：在显示符合范本样式的那一列之前，标示出该列的编号。</li>
<li><code>-v</code> <code>--revert-match</code>：反转查找。</li>
<li><code>-R/-r</code>  <code>--recursive</code>：在所有子目录和子文件中查找，可以用  <code>rgrep</code> 替代</li>
<li><code>-E</code> <code>--extended-regexp</code>：将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。可以用 <code>egrep</code> 代替<ul>
<li><code>grep -E ^p /etc/profile</code></li>
<li><code>grep -E [at] /etc/profile</code></li>
<li><code>grep -E [0-4] /etc/profile</code></li>
<li><code>grep -E [a-zA-Z] /etc/profile</code></li>
</ul>
</li>
</ul>
<h4 id="规则表达式"><a href="#规则表达式" class="headerlink" title="规则表达式"></a>规则表达式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^    # 锚定行的开始 如：&#x27;^grep&#x27;匹配所有以grep开头的行。</span><br><span class="line"><span class="meta">$</span><span class="bash">    <span class="comment"># 锚定行的结束 如：&#x27;grep$&#x27; 匹配所有以grep结尾的行。</span></span></span><br><span class="line">.    # 匹配一个非换行符的字符 如：&#x27;gr.p&#x27;匹配gr后接一个任意字符，然后是p。</span><br><span class="line">*    # 匹配零个或多个先前字符 如：&#x27;*grep&#x27;匹配所有一个或多个空格后紧跟grep的行。</span><br><span class="line">.*   # 一起用代表任意字符。</span><br><span class="line">[]   # 匹配一个指定范围内的字符，如&#x27;[Gg]rep&#x27;匹配Grep和grep。</span><br><span class="line">[^]  # 匹配一个不在指定范围内的字符，如：&#x27;[^A-FH-Z]rep&#x27;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。</span><br><span class="line">\(..\)  # 标记匹配字符，如&#x27;\(love\)&#x27;，love被标记为1。</span><br><span class="line">\&lt;      # 锚定单词的开始，如:&#x27;\&lt;grep&#x27;匹配包含以grep开头的单词的行。</span><br><span class="line">\&gt;      # 锚定单词的结束，如&#x27;grep\&gt;&#x27;匹配包含以grep结尾的单词的行。</span><br><span class="line">x\&#123;m\&#125;  # 重复字符x，m次，如：&#x27;0\&#123;5\&#125;&#x27;匹配包含5个o的行。</span><br><span class="line">x\&#123;m,\&#125;   # 重复字符x,至少m次，如：&#x27;o\&#123;5,\&#125;&#x27;匹配至少有5个o的行。</span><br><span class="line">x\&#123;m,n\&#125;  # 重复字符x，至少m次，不多于n次，如：&#x27;o\&#123;5,10\&#125;&#x27;匹配5--10个o的行。</span><br><span class="line">\w    # 匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#x27;G\w*p&#x27;匹配以G后跟零个或多个文字或数字字符，然后是p。</span><br><span class="line">\W    # \w的反置形式，匹配一个或多个非单词字符，如点号句号等。</span><br><span class="line">\b    # 单词锁定符，如: &#x27;\bgrep\b&#x27;只匹配grep。</span><br></pre></td></tr></table></figure>

<h3 id="sort-文件排序"><a href="#sort-文件排序" class="headerlink" title="sort 文件排序"></a>sort 文件排序</h3><p>对文本文件中所有行进行排序。</p>
<ul>
<li><code>-o</code>, <code>--output=FILE</code>：将结果写入FILE而不是标准输出。<code>sort -o name.txt name_sorted.txt</code></li>
<li><code>-r</code>, <code>--reverse</code>：将结果倒序排列。</li>
<li><code>-R</code>：<code>--random-sort</code> 随机排序，但分组相同的行。</li>
<li><code>-n</code>, <code>--numeric-sort</code>：根据数字排序。</li>
</ul>
<h4 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h4><ul>
<li>将所有输入文件的内容排序后并输出。</li>
<li>当没有文件或文件为<code>-</code>时，读取标准输入。</li>
</ul>
<h3 id="wc-文件统计"><a href="#wc-文件统计" class="headerlink" title="wc 文件统计"></a>wc 文件统计</h3><p>统计文件的行数、字数、字节数</p>
<blockquote>
<p><strong>wc命令</strong> 统计指定文件中的字节数、字数、行数，并将统计结果显示输出。利用wc指令我们可以计算文件的Byte数、字数或是列数，若不指定文件名称，或是所给予的文件名为“-”，则wc指令会从标准输入设备读取数据。wc同时也给出所指定文件的总统计数。</p>
</blockquote>
<ul>
<li><code>-c</code>： 统计字节数，或<code>--bytes</code>或<code>--chars</code>：只显示Bytes数</li>
<li><code>-l</code>：统计行数，或<code>--lines</code>：只显示列数</li>
<li><code>-m</code>：统计字符数。这个标志不能与 <code>-c</code> 标志一起使用</li>
<li><code>-w</code>：统计字数，或<code>--words</code>：只显示字数。一个字被定义为由空白、跳格或换行字符分隔的字符串</li>
<li><code>-L</code>：打印最长行的长度</li>
</ul>
<h3 id="uniq-删除文件中的重复内容"><a href="#uniq-删除文件中的重复内容" class="headerlink" title="uniq: 删除文件中的重复内容"></a>uniq: 删除文件中的重复内容</h3><p>显示或忽略重复的行。<code>uniq</code> 命令有点”呆“，只能将连续的重复行变为一行</p>
<ul>
<li><code>-c</code>, <code>--count</code>：在每行开头增加重复次数</li>
<li><code>-d</code>, <code>--repeated</code>：只显示重复行的值</li>
</ul>
<h4 id="主要用途-1"><a href="#主要用途-1" class="headerlink" title="主要用途"></a>主要用途</h4><ul>
<li>将输入文件（或标准输入）中邻近的重复行写入到输出文件（或标准输出）中。</li>
<li>当没有选项时，邻近的重复行将合并为一个。</li>
</ul>
<h3 id="cut-剪切文件的一部分内容"><a href="#cut-剪切文件的一部分内容" class="headerlink" title="cut: 剪切文件的一部分内容"></a>cut: 剪切文件的一部分内容</h3><p>连接文件并打印到标准输出设备上</p>
<ul>
<li><code>-c</code>：仅显示行中指定范围的字符，<code>cut -c 2-4 file</code></li>
<li><code>-d</code>：指定字段的分隔符，默认的字段分隔符为“TAB”。</li>
<li></li>
</ul>
<h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><blockquote>
<p>黑洞文件 <code>/dev/null</code>，此文件具有唯一的属性，它总是空的。它能使发送到 <code>/dev/null</code> 的任何数据作废</p>
</blockquote>
<h3 id="gt-重定向到文件"><a href="#gt-重定向到文件" class="headerlink" title="&gt; 重定向到文件"></a><code>&gt;</code> 重定向到文件</h3><ul>
<li>如果此文件不存在，则新建一个文件</li>
<li>如果此文件已经存在，那就会把文件内容覆盖掉，而且不会征求用户同意</li>
</ul>
<h3 id="gt-gt-重定向到文件末尾"><a href="#gt-gt-重定向到文件末尾" class="headerlink" title="&gt;&gt; 重定向到文件末尾"></a><code>&gt;&gt;</code> 重定向到文件末尾</h3><p><code>&gt;&gt;</code>的作用与<code>&gt;</code>是类似的，不过它不会像<code>&gt;</code>那么危险。它会将重定向的内容写入到文件末尾，起到追加的作用。如果文件不存在，则创建文件</p>
<h3 id="2-gt-、2-gt-gt-重定向到标准错误输出"><a href="#2-gt-、2-gt-gt-重定向到标准错误输出" class="headerlink" title="2&gt; 、2&gt;&gt;重定向到标准错误输出"></a><code>2&gt;</code> 、<code>2&gt;&gt;</code>重定向到标准错误输出</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat not_exist_file.csv &gt; results.txt 2&gt; errors.log</span></span><br></pre></td></tr></table></figure>

<h3 id="2-gt-amp-1-组合符合"><a href="#2-gt-amp-1-组合符合" class="headerlink" title="2&gt;&amp;1 组合符合"></a><code>2&gt;&amp;1</code> 组合符合</h3><ul>
<li>将标准错误输出重定向到与标准输出相同的地方</li>
<li>覆盖：<code>cat not_exist_file_csv &gt; results.txt 2&gt;&amp;1</code></li>
<li>末尾追加：<code>cat not_exist_file_csv &gt;&gt; results.txt 2&gt;&amp;1</code></li>
</ul>
<h3 id="stdin、stdout、stderr"><a href="#stdin、stdout、stderr" class="headerlink" title="stdin、stdout、stderr"></a>stdin、stdout、stderr</h3><ul>
<li>从键盘向终端输入数据，这是标准输入，也就是 stdin</li>
<li>终端接收键盘输入的命令，会产生两种输出<ul>
<li>标准输出：stdout。指终端输出的信息（不包括错误信息）</li>
<li>标准错误输出：stderr。指终端输出的错误信息</li>
</ul>
</li>
</ul>
<h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><h3 id="lt-从文件中读取"><a href="#lt-从文件中读取" class="headerlink" title="&lt; 从文件中读取"></a><code>&lt;</code> 从文件中读取</h3><ul>
<li><p><code>cat notes.csv</code></p>
<ul>
<li><code>cat</code> 命令接受的输入是 notes.csv 这个文件名</li>
<li>那么它要先打开 notes.csv 文件</li>
<li>然后打印出文件内容</li>
</ul>
</li>
<li><p><code>cat &lt; notes.csv</code></p>
<ul>
<li><code>cat</code> 命令接受的输入直接是 notes.csv 这个文件的内容</li>
<li><code>cat</code> 命令只负责将其内容打印</li>
<li>打开文件并将文件内容传递给 <code>cat</code> 命令的工作则交给终端完成</li>
</ul>
</li>
</ul>
<h3 id="lt-lt-从键盘读取"><a href="#lt-lt-从键盘读取" class="headerlink" title="&lt;&lt; 从键盘读取"></a><code>&lt;&lt;</code> 从键盘读取</h3><ul>
<li><code>&lt;&lt;</code> 符号的作用是将键盘的输入重定向为某个命令的输入</li>
<li><code>sort -n &lt;&lt; END</code></li>
</ul>
<h2 id="管道符号"><a href="#管道符号" class="headerlink" title="| 管道符号"></a><code>|</code> 管道符号</h2><p>将一个命令的输出作为另一个命令的输入</p>
<ul>
<li>传说中的 ”管道符号“：<code>|</code></li>
<li><code>|</code>符号既然被称为”管道符“，其作用就是”建立命令管道“</li>
<li>管道也算是重定向流的一种</li>
<li><code>cut -d , -f 1 notes.csv | sort &gt; sorted_names.txt</code></li>
<li><code>du -h | sort -n | head</code></li>
<li><code>sudo grep log -Ir /var/log | cut -d : -f 1 | sort | uniq</code><ul>
<li><code>-I</code>：排除二进制文件</li>
<li><code>-r</code>：用于递归遍历</li>
</ul>
</li>
</ul>
<h2 id="进程和系统监测"><a href="#进程和系统监测" class="headerlink" title="进程和系统监测"></a>进程和系统监测</h2><ul>
<li><p><code>w</code>：显示目前登入系统的用户信息</p>
</li>
<li><p><code>uptime</code>：查看Linux系统负载信息</p>
<blockquote>
<p>能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。</p>
</blockquote>
</li>
<li><p><code>tload</code>：显示系统负载状况</p>
<blockquote>
<p>以图形化的方式输出当前系统的平均负载到指定的终端。假设不给予终端机编号，则会在执行tload指令的终端机显示负载情形</p>
</blockquote>
</li>
<li><p><code>who</code>：显示目前登录系统的用户信息</p>
<blockquote>
<p>显示目前登录系统的用户信息。执行who命令可得知目前有那些用户登入系统，单独执行who命令会列出登入帐号，使用的终端机，登入时间以及从何处登入或正在使用哪个X显示器。</p>
</blockquote>
</li>
<li><p><code>ps</code>：报告当前系统的进程状态 process status</p>
<ul>
<li>输出<ul>
<li>UID：运行进程的用户</li>
<li>PID：进程号，process identifier，每个进程有唯一的进程号</li>
<li>PPID：程序的父进程号，parent process ID</li>
<li>TTY：进程运行所在的终端</li>
<li>TIME：进程运行的时间</li>
<li>CMD：产生这个进程的程序名</li>
</ul>
</li>
<li>实践<ul>
<li><code>-ef</code>：列出所有用户在所有终端的所有进程，可以配合管道方便查看 <code>ps -ef | less</code></li>
<li><code>-efH</code>：按照乔木状列出进程</li>
<li><code>-u</code>：列出此用户运行的进程</li>
<li><code>-aux</code>：通过CPU和内存使用来过滤进程<ul>
<li><code>ps -aux --sort -pcpu | less</code>：根据CPU使用率降序排列</li>
<li><code>ps -aux --sort -pmem | less</code>：根据内存使用率降序排列</li>
</ul>
</li>
<li><code>ps -axjf</code> ，<code>pstree</code>：以树形结构显示进程</li>
</ul>
</li>
</ul>
<blockquote>
<p>用于报告当前系统的进程状态。可以搭配<code>kill</code>指令随时中断、删除不必要的程序。ps命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。</p>
</blockquote>
</li>
<li><p><code>top</code>：显示或管理执行中的程序</p>
<ul>
<li>q键：退出</li>
<li>h键：显示帮助文档</li>
<li>B键：加粗某些信息</li>
<li>f/F键：在进程列表中添加或删除某些列</li>
<li>u键：依照用户来过滤显示</li>
<li>k键：结束某个进程</li>
<li>s键：改变刷新页面的时间，默认地页面每个3秒刷新一次</li>
</ul>
</li>
<li><p><code>kill</code>：根据进程号结束一个进程</p>
<ul>
<li><code>-9</code>：强制结束进程</li>
</ul>
</li>
<li><p><code>killall</code>：根据进程名结束所有进程，可以结合<code>find</code></p>
</li>
</ul>
<h3 id="glances"><a href="#glances" class="headerlink" title="glances"></a>glances</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt install glances -y</span></span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2020/03/29/mUqi9MRt6vT2HIK.png" style="zoom:25%;" />

<h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt install htop -y</span></span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2020/03/29/jZbnwPI3BKq4lES.png" style="zoom:25%;" />

<h2 id="管理前后台进程"><a href="#管理前后台进程" class="headerlink" title="管理前后台进程"></a>管理前后台进程</h2><img src="https://i.loli.net/2020/03/29/Y15XE8zCdVKDrJP.png" style="zoom:80%;" />

<h3 id="amp-符号：后台运行进程"><a href="#amp-符号：后台运行进程" class="headerlink" title="&amp; 符号：后台运行进程"></a><code>&amp;</code> 符号：后台运行进程</h3><ul>
<li><code>cp file.txt file-copy.txt &amp;</code></li>
<li><code>find / -name &quot;*log&quot; &gt; output_find 2&gt;&amp;1 &amp;</code></li>
</ul>
<h3 id="nohup-使进程与终端分离"><a href="#nohup-使进程与终端分离" class="headerlink" title="nohup: 使进程与终端分离"></a><code>nohup</code>: 使进程与终端分离</h3><p>无论是否将 nohup 命令的输出重定向到终端，输出都将附加到当前目录的 nohup.out 文件中。hangup，挂起</p>
<p>如果当前目录的 nohup.out 文件不可写，输出重定向到<code>$HOME/nohup.out</code>文件中。如果没有文件能创建或打开以用于追加，那么 command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。</p>
<h3 id="Ctrl-Z、bg-进程转为后台运行"><a href="#Ctrl-Z、bg-进程转为后台运行" class="headerlink" title="Ctrl + Z、bg 进程转为后台运行"></a>Ctrl + Z、bg 进程转为后台运行</h3><h3 id="jobs：显示后台进程状态"><a href="#jobs：显示后台进程状态" class="headerlink" title="jobs：显示后台进程状态"></a>jobs：显示后台进程状态</h3><h3 id="fg：使进程转为前台运行"><a href="#fg：使进程转为前台运行" class="headerlink" title="fg：使进程转为前台运行"></a>fg：使进程转为前台运行</h3><h2 id="文件的解压和压缩"><a href="#文件的解压和压缩" class="headerlink" title="文件的解压和压缩"></a>文件的解压和压缩</h2><ul>
<li><code>tar</code>：Linux下的归档使用工具，用来打包和备份<ul>
<li><code>-cvf</code>：创建一个 tar 归档，<code>tar -cvf a.tar a/</code><ul>
<li>c：create 的缩写，表示创建</li>
<li>v：verbose 的缩写，表示冗余。会显示操作细节</li>
<li>f：file 的缩写，表示文件，指定归档文件</li>
</ul>
</li>
<li><code>-tf</code>：显示归档里的内容，并不解开归</li>
<li><code>-xvf</code>：解开归档<ul>
<li>x：extract 的缩写，表示”提取，取出“</li>
</ul>
</li>
<li><code>-zcvf</code>：归档，然后用 gzip 来压缩归档</li>
<li><code>-zxvf</code>：解gzip压缩，然后解开归档</li>
<li><code>-jcvf</code>：归档，然后用 bzip2 来压缩归档</li>
<li><code>-jxvf</code>：解bzip2压缩，然后解开归档</li>
</ul>
</li>
<li><code>zcat</code>、<code>zmore</code>、<code>zless</code></li>
<li><code>bzcat</code>、<code>bzmore</code>、<code>bzless</code></li>
<li><code>unzip</code>、<code>unrar</code>：<code>apt install zip</code></li>
</ul>
<h2 id="定时和延时执行"><a href="#定时和延时执行" class="headerlink" title="定时和延时执行"></a>定时和延时执行</h2><h3 id="date：显示或设置系统时间与日期"><a href="#date：显示或设置系统时间与日期" class="headerlink" title="date：显示或设置系统时间与日期"></a>date：显示或设置系统时间与日期</h3><ul>
<li><code>date +&quot;%H&quot;</code>：11</li>
<li><code>date +&quot;%H:%M:%S&quot;</code>：11:15:51</li>
<li><code>date +&quot;%Y-%m-%d&quot;</code>：2020-03-29</li>
<li><code>date +&quot;%Y-%m-%d %H:%M:%S&quot;</code>：2020-03-29 11:15:51</li>
<li>修改系统时间：<code>date 10121430</code></li>
</ul>
<h3 id="at：在指定时间执行一个任务"><a href="#at：在指定时间执行一个任务" class="headerlink" title="at：在指定时间执行一个任务"></a>at：在指定时间执行一个任务</h3><p><strong>at命令</strong> 用于在指定时间执行命令。<code>at</code>允许使用一套相当复杂的指定时间的方法。它能够接受在当天的<code>hh:mm（小时:分钟）</code>式的时间指定。假如该时间已过去，那么就放在第二天执行。当然也能够使用<code>midnight</code>（深夜），<code>noon</code>（中午），<code>teatime</code>（饮茶时间，一般是下午4点）等比较模糊的词语来指定时间。用户还能够采用12小时计时制，即在时间后面加上AM（上午）或PM（下午）来说明是上午还是下午。 也能够指定命令执行的具体日期，指定格式为<code>month day（月 日）</code>或 <code>mm/dd/yy（月/日/年）</code>或<code>dd.mm.yy（日.月.年）</code>。指定的日期必须跟在指定时间的后面。</p>
<p>上面介绍的都是绝对计时法，其实还能够使用相对计时法，这对于安排不久就要执行的命令是很有好处的。指定格式为：<code>now + count time-units</code>，<code>now</code>就是当前时间，time-units 是时间单位，这里能够是<code>minutes</code>（分钟）、<code>hours</code>（小时）、<code>days</code>（天）、<code>weeks</code>（星期）。<code>count</code>是时间的数量，究竟是几天，还是几小时，等等。 更有一种计时方法就是直接使用<code>today</code>（今天）、<code>tomorrow</code>（明天）来指定完成命令的时间。</p>
<ul>
<li><code>at 22:10</code>，会提示让输入命令，以<code>&lt;EOT&gt;</code>结束输入</li>
<li><code>at 22:10 tomorrow</code>：明天 22:10 执行</li>
<li><code>at 22:10 03/30/2020</code>：在 2020年3月20号22:10执行</li>
<li><code>at now +10 minutes</code>：10分钟之后执行</li>
</ul>
<h3 id="atq：列出当前用户的at任务列表"><a href="#atq：列出当前用户的at任务列表" class="headerlink" title="atq：列出当前用户的at任务列表"></a>atq：列出当前用户的at任务列表</h3><ul>
<li>q是英语 queue 的首字母，表示“队列”</li>
</ul>
<p><strong>atq命令</strong> 显示系统中待执行的任务列表，也就是列出当前用户的at任务列表。</p>
<h3 id="atrm：删除待执行任务队列中的指定任务"><a href="#atrm：删除待执行任务队列中的指定任务" class="headerlink" title="atrm：删除待执行任务队列中的指定任务"></a>atrm：删除待执行任务队列中的指定任务</h3><p><strong>atrm命令</strong> 用于删除待执行任务队列中的指定任务。</p>
<h3 id="sleep：将目前动作延迟一段时间"><a href="#sleep：将目前动作延迟一段时间" class="headerlink" title="sleep：将目前动作延迟一段时间"></a>sleep：将目前动作延迟一段时间</h3><ul>
<li><code>touch file.txt;sleep 10;rm file.txt</code></li>
</ul>
<h3 id="amp-amp-、-、"><a href="#amp-amp-、-、" class="headerlink" title="&amp;&amp;、||、;"></a><code>&amp;&amp;</code>、<code>||</code>、<code>;</code></h3><ul>
<li><code>&amp;&amp;</code>：<code>&amp;&amp;</code> 号前的命令执行成功，才会执行后面的命令</li>
<li><code>||</code>：<code>||</code> 号前的命令执行失败，才会执行后面的命令</li>
<li><code>;</code>：不论分号前的命令执行成功与否，都执行分号后的命令</li>
</ul>
<h3 id="crontab-提交和管理用户的需要周期性执行的任务"><a href="#crontab-提交和管理用户的需要周期性执行的任务" class="headerlink" title="crontab 提交和管理用户的需要周期性执行的任务"></a>crontab 提交和管理用户的需要周期性执行的任务</h3><p><strong>crontab命令</strong> 被用来提交和管理用户的需要周期性执行的任务，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p>
<ul>
<li><code>-e</code>：编辑该用户的计时器设置；</li>
<li><code>-l</code>：列出该用户的计时器设置；</li>
<li><code>-r</code>：删除该用户的计时器设置；</li>
<li><code>-u &lt;用户名称&gt;</code>：指定要设定计时器的用户名称。</li>
</ul>
<blockquote>
<p> m h dom mon dow  command</p>
<ul>
<li><p>顺序口诀：分 时 日 月 周</p>
</li>
<li><p>m：minute 的缩写，表示”分钟“（0~59）</p>
</li>
<li><p>h：hour 的缩写，表示“小时”(0~23)</p>
</li>
<li><p>dom：day of month 的缩写，表示“一个月的哪一天”（0~31）</p>
</li>
<li><p>mon：month 的缩写，表示”月份“（1~12）</p>
</li>
<li><p>dow：day of week 的缩写，表示“星期几”(0~6,星期日是0)</p>
</li>
<li><p>command：英语“命令”的意思，表示需要定时执行的命令</p>
</li>
</ul>
</blockquote>
<p><strong>特殊字符：</strong></p>
<ul>
<li>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li>
<li>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</li>
<li>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</li>
<li>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><blockquote>
<p>一定要换行，不换行不会生效的<br>重启 cron 服务：<code>systemctl cron.service restart</code></p>
</blockquote>
<p><strong>每1分钟执行一次command</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* * * * * command</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>每小时的第3和第15分钟执行</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3,15 * * * * command</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>在上午8点到11点的第3和第15分钟执行</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3,15 8-11 * * * command</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>每隔两天的上午8点到11点的第3和第15分钟执行</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3,15 8-11 */2 * * command</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>每个星期一的上午8点到11点的第3和第15分钟执行</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3,15 8-11 * * 1 command</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>每晚的21:30重启smb</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">30 21 * * * /etc/init.d/smb restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>每月1、10、22日的4 : 45重启smb</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">45 4 1,10,22 * * /etc/init.d/smb restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>每周六、周日的1:10重启smb</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">10 1 * * 6,0 /etc/init.d/smb restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>每天18 : 00至23 : 00之间每隔30分钟重启smb</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*/30 18-23 * * * /etc/init.d/smb restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>每星期六的晚上11:00 pm重启smb</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 23 * * 6 /etc/init.d/smb restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>每一小时重启smb</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* */1 * * * /etc/init.d/smb restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>晚上11点到早上7点之间，每隔一小时重启smb</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* 23-7/1 * * * /etc/init.d/smb restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>每月的4号与每周一到周三的11点重启smb</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 11 4 * mon-wed /etc/init.d/smb restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>一月一号的4点重启smb</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 4 1 jan * /etc/init.d/smb restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>每小时执行<code>/etc/cron.hourly</code>目录内的脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">01 * * * * root run-parts /etc/cron.hourly</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><ul>
<li>全局 SSH 客户端的配置：<code>/etc/ssh/ssh_config</code></li>
<li>用户 SSH 客户端的配置：<code>~/.ssh/config</code><ul>
<li>如果 <code>~/.ssh</code> 不存在，执行 <code>ssh localhost</code></li>
<li><code>nano config</code> 进行编辑</li>
</ul>
</li>
<li>SSH 服务端的配置：<code>/etc/ssh/sshd_config</code></li>
</ul>
<h3 id="服务端-config-文件的常用配置参数"><a href="#服务端-config-文件的常用配置参数" class="headerlink" title="服务端 config 文件的常用配置参数"></a>服务端 config 文件的常用配置参数</h3><ul>
<li>Port：sshd 服务端口号（默认是22）</li>
<li>PermitRootLogin：是否允许以 root 用户身份登录（默认是可以）</li>
<li>PasswordAuthentication：是否允许密码验证登录（默认是可以）</li>
<li>PubkeyAuthentication：是否允许公钥验证登录（默认是可以）</li>
<li>PermitEmptyPasswords：是否允许空密码登录（不安全。默认不可以）</li>
</ul>
<h3 id="客户端-config-文件的配置"><a href="#客户端-config-文件的配置" class="headerlink" title="客户端 config 文件的配置"></a>客户端 config 文件的配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nano ~/.ssh/config</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host aliyun</span><br><span class="line">  HostName 47.98.152.68</span><br><span class="line">  Port 22</span><br><span class="line">  User root</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh aliyun</span></span><br></pre></td></tr></table></figure>

<h3 id="配置免密码登录"><a href="#配置免密码登录" class="headerlink" title="配置免密码登录"></a>配置免密码登录</h3><ol>
<li><p>在客户机中生成密钥对（公钥和私钥）</p>
<blockquote>
<p><code>ssh-keygen -t rsa -C &quot;youngjuning@aliyun.com&quot;</code></p>
</blockquote>
<ul>
<li><p>在 <code>~/.ssh/</code> 目录下，会新生成两个文件</p>
<ul>
<li>id_rsa：私钥</li>
<li>id_rsa.pub：公钥</li>
</ul>
</li>
</ul>
</li>
<li><p><code>ssh-copy-id</code>：把本地的 ssh 公钥文件安装到远程主机对应的账户下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-copy-id -i ~/.ssh/id_rsa.pub root@47.98.152.68</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>ssh-copy-id命令</strong> 可以把本地主机的公钥复制到远程主机的<code>authorized_keys</code>文件上，<code>ssh-copy-id</code> 命令也会给远程主机的用户主目录（home）和<code>~/.ssh</code>, 和<code>~/.ssh/authorized_keys</code>设置合适的权限。</p>
<ul>
<li><code>-i</code>：指定公钥文件</li>
</ul>
</blockquote>
</li>
</ol>
<p><strong>设置免密码后仍想使用密码登录：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no root@47.98.152.68</span></span><br></pre></td></tr></table></figure>

<p><strong>测试Github是否正确配置免密码登录：</strong></p>
<p><code>ssh -T git@github.com</code></p>
<h2 id="Linux-网络"><a href="#Linux-网络" class="headerlink" title="Linux 网络"></a>Linux 网络</h2><h3 id="wget：Linux系统下载文件工具"><a href="#wget：Linux系统下载文件工具" class="headerlink" title="wget：Linux系统下载文件工具"></a>wget：Linux系统下载文件工具</h3><p><strong>wget命令</strong> 用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p>
<p>wget支持HTTP，HTTPS和FTP协议，可以使用HTTP代理。所谓的自动下载是指，wget可以在用户退出系统的之后在后台执行。这意味这你可以登录系统，启动一个wget下载任务，然后退出系统，wget将在后台执行直到任务完成，相对于其它大部分浏览器在下载大量数据时需要用户一直的参与，这省去了极大的麻烦。</p>
<p>用于从网络上下载资源，没有指定目录，下载资源回默认为当前目录。wget虽然功能强大，但是使用起来还是比较简单：</p>
<ol>
<li><strong>支持断点下传功能</strong> 这一点，也是网络蚂蚁和FlashGet当年最大的卖点，现在，Wget也可以使用此功能，那些网络不是太好的用户可以放心了；</li>
<li><strong>同时支持FTP和HTTP下载方式</strong> 尽管现在大部分软件可以使用HTTP方式下载，但是，有些时候，仍然需要使用FTP方式下载软件；</li>
<li><strong>支持代理服务器</strong> 对安全强度很高的系统而言，一般不会将自己的系统直接暴露在互联网上，所以，支持代理是下载软件必须有的功能；</li>
<li><strong>设置方便简单</strong> 可能，习惯图形界面的用户已经不是太习惯命令行了，但是，命令行在设置上其实有更多的优点，最少，鼠标可以少点很多次，也不要担心是否错点鼠标；</li>
<li><strong>程序小，完全免费</strong> 程序小可以考虑不计，因为现在的硬盘实在太大了；完全免费就不得不考虑了，即使网络上有很多所谓的免费软件，但是，这些软件的广告却不是我们喜欢的。</li>
</ol>
<h3 id="scp：加密的方式在本地主机和远程主机之间复制文件"><a href="#scp：加密的方式在本地主机和远程主机之间复制文件" class="headerlink" title="scp：加密的方式在本地主机和远程主机之间复制文件"></a>scp：加密的方式在本地主机和远程主机之间复制文件</h3><p><strong>scp命令</strong> 用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scp file.txt root@192.168.2.195</span><br></pre></td></tr></table></figure>

<h3 id="netstat-ntulp-grep-9001"><a href="#netstat-ntulp-grep-9001" class="headerlink" title="netstat -ntulp | grep 9001"></a>netstat -ntulp | grep 9001</h3><p>查看端口占用情况</p>
<h3 id="rsync：远程数据同步工具"><a href="#rsync：远程数据同步工具" class="headerlink" title="rsync：远程数据同步工具"></a>rsync：远程数据同步工具</h3><p><strong>rsync命令</strong> 是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。rsync使用所谓的“rsync算法”来使本地和远程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。 rsync是一个功能非常强大的工具，其命令也有很多功能特色选项，我们下面就对它的选项一一进行分析说明。</p>
<ul>
<li>默认地，rsync 在同步时并不会删除目标目录的文件。例如，你的源目录（被同步目录）中删除了一个文件，但是用 rsync 同步时，它并不会删除同步目录中的相同文件。<code>rsync -arv --delete</code> 可以删除</li>
</ul>
<p><strong>用 rsync 备份到同一台电脑的其他目录：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync -arv Images/ backups</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>-a</code>：保留文件的所有信息，包括权限，修改日期，等等。a 是 archive 的缩写，是<strong>归档</strong>的意思</li>
<li><code>-r</code>：递归调用。表示子目录的所有文件也都包括。r 是 recursive 的缩写，是<strong>递归</strong>的意思</li>
<li><code>-v</code> ：冗余模式。输出详细操作信息。v 是 verbose 的缩写，是<strong>冗余的</strong>意思</li>
</ul>
<p><strong>用 rsync 备份到同步本地文件到服务器：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync -arvz --progress --delete ~/Desktop/blog root@47.98.152.68:/home/yangjunning/</span></span><br></pre></td></tr></table></figure>

<h2 id="备份到七牛云"><a href="#备份到七牛云" class="headerlink" title="备份到七牛云"></a>备份到七牛云</h2><h3 id="安装命令行工具-qshell"><a href="#安装命令行工具-qshell" class="headerlink" title="安装命令行工具(qshell)"></a>安装命令行工具(qshell)</h3><ol>
<li>进入家目录：<code>cd ~</code></li>
<li>下载压缩包：<code>wget http://devtools.qiniu.com/qshell-linux-x86-v2.4.1.zip</code></li>
<li>解压压缩包：<code>unzip ~/qshell-linux-x86-v2.4.1.zip</code> </li>
<li>任何位置运行：<code>mv ~/qshell-linux-x86-v2.4.1 /usr/local/bin/qshell</code></li>
<li>权限：<code>chmod +x /usr/local/bin/qshell</code></li>
<li>删除压缩包：<code>rm -rf ~/qshell-linux-x86-v2.4.1.zip</code></li>
</ol>
<h3 id="密钥设置"><a href="#密钥设置" class="headerlink" title="密钥设置"></a>密钥设置</h3><p>需要鉴权的命令都需要依赖七牛账号下的 <code>AccessKey</code> 和 <code>SecretKey</code>。所以这类命令运行之前，需要使用 <code>account</code> 命令来设置下 <code>AccessKey</code> ，<code>SecretKey</code> 。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ qshell account -- ak sk name</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<code>ak</code>、<code>sk</code> 在七牛云<strong>控制台</strong> -&gt; <strong>个人中心</strong> - &gt; <strong>密钥管理</strong>内。</p>
</blockquote>
<p>可以连续使用 <code>qshell account</code> 添加账号<code>ak</code>, <code>sk</code>, <code>name</code>信息，qshell会保存这些账号的信息， 可以使用<code>qshell user</code>命令列举账号信息，在各个账号之间切换, 删除账号等</p>
<h3 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h3><p>使用qshell user子命令可以用来管理记录的多账户信息。</p>
<ol>
<li><code>qshell user ls</code>可以列举账户下所有的账户信息</li>
<li><code>qshell user cu</code> 可以用来切换账户</li>
<li><code>qshell user cu</code> 不携带的话会切换到最近的上个账户；比如我在A账户做完操作后，使用<code>qshell user cu B</code>到了B 账户，那么使用<code>qshell user cu</code>可以切回到A账户</li>
</ol>
<h3 id="qupload2"><a href="#qupload2" class="headerlink" title="qupload2"></a>qupload2</h3><p>同步数据到七牛空间， 带同步进度信息，和数据上传完整性检查（命令式），详情请查看<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vcWluaXUvcXNoZWxsL2Jsb2IvbWFzdGVyL2RvY3MvcXVwbG9hZDIubWQ=" title="http://github.com/qiniu/qshell/blob/master/docs/qupload2.md">文档<i class="fa fa-external-link"></i></span></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ qshell qupload2 --src-dir=/root --bucket=aliyun-server-backup</span><br></pre></td></tr></table></figure>

<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><table>
<thead>
<tr>
<th align="center">作者微信</th>
<th align="center">知识星球</th>
<th align="center">赞赏作者</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td>
<td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>运维</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
</search>

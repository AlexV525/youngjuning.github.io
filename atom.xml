<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨俊宁的博客</title>
  
  <subtitle>怕什么真理无穷，进一寸有一寸的欢喜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://youngjuning.js.org/"/>
  <updated>2020-12-20T10:50:40.000Z</updated>
  <id>http://youngjuning.js.org/</id>
  
  <author>
    <name>杨俊宁</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AST学习笔记</title>
    <link href="http://youngjuning.js.org/2020/12/AST%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://youngjuning.js.org/2020/12/AST%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-20T10:50:40.000Z</published>
    <updated>2020-12-20T10:50:40.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="AST-标识"><a href="#AST-标识" class="headerlink" title="AST 标识"></a>AST 标识</h3><ul><li>FUNC</li><li>KIND</li><li>LITERAL ID</li><li>SUSPEND COUNT</li><li>NAME</li><li>INFERRED NAME</li><li>DECLS</li><li>VARIABLE</li><li>BLOCK NOCOMPLETIONS</li><li>EXPRESSION STATEMENT</li><li>INIT</li><li>VAR PROXY unallocated</li><li>mode</li><li>assigned</li><li>LITERAL</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;AST-标识&quot;&gt;&lt;a href=&quot;#AST-标识&quot; class=&quot;headerlink&quot; title=&quot;AST 标识&quot;&gt;&lt;/a&gt;AST 标识&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;FUNC&lt;/li&gt;
&lt;li&gt;KIND&lt;/li&gt;
&lt;li&gt;L
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>图解Google V8 学习笔记</title>
    <link href="http://youngjuning.js.org/2020/12/%E5%9B%BE%E8%A7%A3Google-V8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://youngjuning.js.org/2020/12/%E5%9B%BE%E8%A7%A3Google-V8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-16T05:29:10.000Z</published>
    <updated>2020-12-16T05:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>图解Google V8 学习笔记</p><a id="more"></a><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li>JIT: Just In Time，即时编译技术。混合使用编译器和解释器的技术。不常用代码解释执行，常用代码编译执行。</li><li>惰性编译</li><li>内联缓存</li><li>隐藏类（Hide Class）</li><li>事件循环系统（Event Loop）</li><li>垃圾回收机制</li></ul><p>作用域、词法环境、执行上下文、CPU架构（intel、ARM、MIPS）、AST、机器语言</p><h2 id="V8-是什么"><a href="#V8-是什么" class="headerlink" title="V8 是什么"></a>V8 是什么</h2><p>V8 是一个由 Google 开发的开源 JavaScript 引擎，也被称为虚拟机，模拟实际计算机各种功能来实现代码的编译和执行。目前用在 Chrome 浏览器和 Node.js 中，其核心功能是执行易于人类理解的 JavaScript 代码。</p><h2 id="Mac-安装-V8"><a href="#Mac-安装-V8" class="headerlink" title="Mac 安装 V8"></a>Mac 安装 V8</h2><h3 id="预备条件"><a href="#预备条件" class="headerlink" title="预备条件"></a>预备条件</h3><ul><li>Install Xcode (Avaliable on the Mac App Store)</li><li>Install Xcode Command Line Tools (Preferences &gt; Downloads)</li><li>Install <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hyb21pdW0ub3JnL2RldmVsb3BlcnMvaG93LXRvcy9pbnN0YWxsLWRlcG90LXRvb2xz" title="https://www.chromium.org/developers/how-tos/install-depot-tools">depot_tools<i class="fa fa-external-link"></i></span><ul><li><code>cd ~ &amp;&amp; git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</code></li><li><code>sudo nano ~/.zshrc</code>(zsh) or <code>sudo nano ~/.bash_profile</code>(bash)</li><li>Add <code>export PATH=~/depot_tools:&quot;$PATH&quot;</code> (it’s important that depot_tools comes first here)</li><li><code>source ~/.zshrc</code></li><li>From the directory you want to install V8 into, run <code>gclient</code></li></ul></li></ul><h3 id="Build-V8"><a href="#Build-V8" class="headerlink" title="Build V8"></a>Build V8</h3><ul><li><p><code>fetch v8</code></p></li><li><p><code>cd ~/v8</code></p></li><li><p><code>gclient sync</code></p></li><li><p><code>tools/dev/v8gen.py x64.optdebug</code></p></li><li><p><code>ninja -C out.gn/x64.optdebug</code> (prepare for lots of fan noise)</p><p>I’d also recommend adding these to your <code>.zshrc</code>:</p></li><li><p><code>sudo nano ~/.zshrc</code></p></li><li><p>Add <code>alias d8=~/v8/out.gn/x64.optdebug/d8</code></p></li><li><p>Add <code>alias tick-processor=~/v8/tools/mac-tick-processor</code></p></li><li><p>Add <code>export D8_PATH=&quot;~/v8/out.gn/x64.optdebug&quot;</code></p></li><li><p><code>source ~/.zshrc</code></p></li></ul><blockquote><p>使用 Demo 请参考 <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20va2V2aW5jZW5uaXMvMGNkMjEzOGM3OGEwNzQxMmVmMjEjZDgtc2hlbGwtZXhhbXBsZXM=" title="https://gist.github.com/kevincennis/0cd2138c78a07412ef21#d8-shell-examples">d8-shell-examples<i class="fa fa-external-link"></i></span></p></blockquote><h2 id="d8命令"><a href="#d8命令" class="headerlink" title="d8命令"></a>d8命令</h2><h3 id="查看解析器生成的AST"><a href="#查看解析器生成的AST" class="headerlink" title="查看解析器生成的AST"></a>查看解析器生成的AST</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ d8 --<span class="built_in">print</span>-ast &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="查看解析器生成的作用域"><a href="#查看解析器生成的作用域" class="headerlink" title="查看解析器生成的作用域"></a>查看解析器生成的作用域</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ d8 --<span class="built_in">print</span>-scopes &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="查看解释器生成的字节码"><a href="#查看解释器生成的字节码" class="headerlink" title="查看解释器生成的字节码"></a>查看解释器生成的字节码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ d8 --<span class="built_in">print</span>-bytecode &lt;file&gt;</span><br></pre></td></tr></table></figure><h2 id="V8执行一段JavaScript流程"><a href="#V8执行一段JavaScript流程" class="headerlink" title="V8执行一段JavaScript流程"></a>V8执行一段JavaScript流程</h2><p>解释执行:</p><p>编译执行:</p><h2 id="代码执行方式"><a href="#代码执行方式" class="headerlink" title="代码执行方式"></a>代码执行方式</h2><h3 id="解释执行"><a href="#解释执行" class="headerlink" title="解释执行"></a>解释执行</h3><p>需要先将输入的源代码通过解析器编译成中间代码，之后直接使用解释器解释执行中间代码，然后直接输出结果。解释执行的启动速度快，但是执行时的速度慢。</p><h3 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h3><p>采用这种方式时，也需要先将源代码转换为中间代码，然后我们的编译器再将中间代码编译成机器代码。通常编译成的机器代码是以二进制文件形式存储的，需要执行这段程序的时候直接执行二进制文件就可以了。还可以使用虚拟机将编译后的机器代码保存在内存中，然后直接执行内存中的二进制代码。编译执行的启动速度慢，但是执行时的速度快。</p><h2 id="JavaScript-虚拟机"><a href="#JavaScript-虚拟机" class="headerlink" title="JavaScript 虚拟机"></a>JavaScript 虚拟机</h2><ul><li>Safari: JavaScriptCore</li><li>Firefox: TraceMonkey</li><li>Chrome: V8</li><li>Edge: Chakra</li></ul><h2 id="变量提升（Hoisting）"><a href="#变量提升（Hoisting）" class="headerlink" title="变量提升（Hoisting）"></a>变量提升（Hoisting）</h2><blockquote><p>详细概念请参考 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9Ib2lzdGluZw==" title="https://developer.mozilla.org/zh-CN/docs/Glossary/Hoisting">https://developer.mozilla.org/zh-CN/docs/Glossary/Hoisting<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line">sayHello()</span><br><span class="line"><span class="keyword">var</span> sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;极客时间&quot;</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sayHello() // TypeError: sayHello is not a function</span></span><br><span class="line"><span class="comment">// var sayHello</span></span><br><span class="line"><span class="comment">// sayHello = function () &#123;</span></span><br><span class="line"><span class="comment">//   var a = &quot;极客时间&quot;</span></span><br><span class="line"><span class="comment">//   return a</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line">sayHello()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;极客时间&quot;</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function () &#123;</span></span><br><span class="line"><span class="comment">//   var a = &quot;极客时间&quot;</span></span><br><span class="line"><span class="comment">//   return a</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// sayHello()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图解Google V8 学习笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://youngjuning.js.org/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="V8" scheme="http://youngjuning.js.org/tags/V8/"/>
    
  </entry>
  
  <entry>
    <title>基于 lerna 的多包 JavaScript 项目搭建维护笔记</title>
    <link href="http://youngjuning.js.org/2020/11/%E5%9F%BA%E4%BA%8E-lerna-%E7%9A%84%E5%A4%9A%E5%8C%85-JavaScript-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E7%BB%B4%E6%8A%A4%E7%AC%94%E8%AE%B0/"/>
    <id>http://youngjuning.js.org/2020/11/%E5%9F%BA%E4%BA%8E-lerna-%E7%9A%84%E5%A4%9A%E5%8C%85-JavaScript-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E7%BB%B4%E6%8A%A4%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-14T08:24:58.000Z</published>
    <updated>2020-11-14T08:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/11/14/2VMPXulGiLD6JU8.png" alt=""></p><a id="more"></a><blockquote><p>本篇文章的代码托管在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2xlcm5hLXJlcG8=" title="https://github.com/youngjuning/lerna-repo">Github<i class="fa fa-external-link"></i></span>上。</p></blockquote><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="全局安装-lerna"><a href="#全局安装-lerna" class="headerlink" title="全局安装 lerna"></a>全局安装 lerna</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install lerna -g</span><br></pre></td></tr></table></figure><h3 id="新建一个-git-仓库"><a href="#新建一个-git-仓库" class="headerlink" title="新建一个 git 仓库"></a>新建一个 git 仓库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init lerna-repo &amp;&amp; <span class="built_in">cd</span> lerna-repo</span><br></pre></td></tr></table></figure><h3 id="初始化-lerna-项目"><a href="#初始化-lerna-项目" class="headerlink" title="初始化 lerna 项目"></a>初始化 lerna 项目</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lerna init --independent</span><br></pre></td></tr></table></figure><p>你的代码仓库目前应该是如下结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lerna-repo&#x2F;</span><br><span class="line">  packages&#x2F;</span><br><span class="line">  package.json</span><br><span class="line">  lerna.json</span><br></pre></td></tr></table></figure><h2 id="创建-package"><a href="#创建-package" class="headerlink" title="创建 package"></a>创建 package</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ lerna create module-1</span><br><span class="line">$ lerna create module-2</span><br></pre></td></tr></table></figure><h2 id="yarn-workspaces-amp-Lerna-Hoisting"><a href="#yarn-workspaces-amp-Lerna-Hoisting" class="headerlink" title="yarn workspaces &amp; Lerna Hoisting"></a>yarn workspaces &amp; Lerna Hoisting</h2><p>使用 <span class="exturl" data-url="aHR0cHM6Ly95YXJucGtnLmNvbS9sYW5nL3poLUhhbnMvZG9jcy93b3Jrc3BhY2VzLw==" title="https://yarnpkg.com/lang/zh-Hans/docs/workspaces/">yarn workspaces<i class="fa fa-external-link"></i></span> 结合 Lerna useWorkspaces 可以实现 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xlcm5hL2xlcm5hL2Jsb2IvbWFpbi9kb2MvaG9pc3QubWQ=" title="https://github.com/lerna/lerna/blob/main/doc/hoist.md">Lerna Hoisting<i class="fa fa-external-link"></i></span>。这并不是多此一举，这可以让你在统一的地方（根目录）管理依赖，这即节省时间又节省空间。</p><p>配置 lerna.json:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;npmClient&quot;: &quot;yarn&quot;,</span><br><span class="line">  &quot;useWorkspaces&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顶级 package.json 必须包含一个 workspaces 数组:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  ...</span><br><span class="line">  &quot;workspaces&quot;: [&quot;packages/*&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="npm-registry"><a href="#npm-registry" class="headerlink" title="npm registry"></a>npm registry</h2><h3 id="搭建-verdaccio"><a href="#搭建-verdaccio" class="headerlink" title="搭建 verdaccio"></a>搭建 verdaccio</h3><blockquote><p>verdaccio 是一个开源轻量的npm私服</p></blockquote><p>全局安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install verdaccio -g</span><br></pre></td></tr></table></figure><p>配置 <code>~/.config/verdaccio/config.yaml</code> uplinks:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"># a list of other known repositories we can talk to</span><br><span class="line">uplinks:</span><br><span class="line">  npmjs:</span><br><span class="line">    url: https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br><span class="line">  taobao:</span><br><span class="line">    url: https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br><span class="line">  tuya:</span><br><span class="line">    url: https:&#x2F;&#x2F;registry-npm.tuya-inc.top&#x2F;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h3><p>0、run <code>sudo npm i -g pm2</code></p><p>1、run <code>pm2 start verdaccio</code> &amp; <code>pm2 startup</code></p><p>outputs:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[PM2] Init System found: launchd</span><br><span class="line">[PM2] To setup the Startup Script, copy/paste the following <span class="built_in">command</span>:</span><br><span class="line">sudo env PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/bin /usr/<span class="built_in">local</span>/lib/node_modules/pm2/bin/pm2 startup launchd -u luozhu --hp /Users/luozhu</span><br></pre></td></tr></table></figure><p>2、run <code>sudo env PATH=$PATH:/usr/local/bin /usr/local/lib/node_modules/pm2/bin/pm2 startup launchd -u luozhu --hp /Users/luozhu</code></p><p>outputs:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[PM2] Freeze a process list on reboot via:</span><br><span class="line">$ pm2 save</span><br><span class="line"></span><br><span class="line">[PM2] Remove init script via:</span><br><span class="line">$ pm2 unstartup launchd</span><br></pre></td></tr></table></figure><h3 id="修改-lerna-publishConfig"><a href="#修改-lerna-publishConfig" class="headerlink" title="修改 lerna publishConfig"></a>修改 lerna publishConfig</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lerna.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;command&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;publish&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;ignoreChanges&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;ignored-file&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.md&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;chore(release): publish %s&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;registry&quot;</span>: <span class="string">&quot;http://localhost:4873&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 各 package 的 package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;publishConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;registry&quot;</span>: <span class="string">&quot;http://localhost:4873&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="commitlint-amp-commitizen"><a href="#commitlint-amp-commitizen" class="headerlink" title="commitlint &amp; commitizen"></a>commitlint &amp; commitizen</h2><blockquote><p>请参考我之前的文章 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODc3NDYyNzQ3NjMxMDI2MTkw" title="https://juejin.im/post/6877462747631026190">一文搞定规范化Git Commit<i class="fa fa-external-link"></i></span></p></blockquote><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn install</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ lerna bootstrap</span><br></pre></td></tr></table></figure><h3 id="package依赖"><a href="#package依赖" class="headerlink" title="package依赖"></a>package依赖</h3><p>给指定package安装依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn workspace module-1 add lodash</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ lerna add lodash --scope module-1</span><br></pre></td></tr></table></figure><p>给所有package安装依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn workspaces add dayjs</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ lerna add dayjs</span><br></pre></td></tr></table></figure><h3 id="workspace依赖"><a href="#workspace依赖" class="headerlink" title="workspace依赖"></a>workspace依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lerna add module-2 --scope module-1</span><br></pre></td></tr></table></figure><h3 id="共用的工具依赖"><a href="#共用的工具依赖" class="headerlink" title="共用的工具依赖"></a>共用的工具依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -W -D typescript</span><br></pre></td></tr></table></figure><h2 id="lerna-json"><a href="#lerna-json" class="headerlink" title="lerna.json"></a>lerna.json</h2><ul><li>version: 当前仓库的版本，Independent mode 请设置为 <code>independent</code></li><li>npmClient: 指定运行命令的客户端程序（默认是npm）</li><li>command<ul><li>publish<ul><li>ignoreChanges: 一个不包含在 <code>lerna changed/publish</code> 的 glob 数组。使用这个去阻止发布不必要的更新，比如修复 <code>README.md</code></li><li>message: 一个 publish 时的自定义 commit 信息。详情请查看<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xlcm5hL2xlcm5hL2Jsb2IvbWFpbi9jb21tYW5kcy92ZXJzaW9uIy0tbWVzc2FnZS1tc2c=" title="https://github.com/lerna/lerna/blob/main/commands/version#--message-msg">@lerna/version<i class="fa fa-external-link"></i></span></li><li>registry: 设置自定义的 npm 代理（比如使用 verdaccio 搭建的私服）</li></ul></li><li>version<ul><li>conventionalCommits: <code>lerna version</code> 会自动决定 version bump 和生成 CHANGELOG 文件</li></ul></li></ul></li></ul><h2 id="npm-scripts"><a href="#npm-scripts" class="headerlink" title="npm scripts"></a>npm scripts</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;release:beta&quot;</span>: <span class="string">&quot;lerna publish --canary --pre-dist-tag=beta --preid=beta --yes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release:rc&quot;</span>: <span class="string">&quot;lerna publish prerelease --pre-dist-tag=rc --preid=rc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release:next&quot;</span>: <span class="string">&quot;lerna publish prerelease --pre-dist-tag=next --preid=next&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release:preminor&quot;</span>: <span class="string">&quot;lerna publish preminor --pre-dist-tag=next --preid=next&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release:premajor&quot;</span>: <span class="string">&quot;lerna publish premajor --pre-dist-tag=next --preid=next&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release&quot;</span>: <span class="string">&quot;lerna publish&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release:minor&quot;</span>: <span class="string">&quot;lerna publish minor&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;release:major&quot;</span>: <span class="string">&quot;lerna publish major&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;commit&quot;</span>: <span class="string">&quot;git cz&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzNTY4NzUxNzIyNTA5" title="https://juejin.im/post/6844903568751722509">lerna管理前端模块最佳实践<i class="fa fa-external-link"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/14/2VMPXulGiLD6JU8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://youngjuning.js.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="lerna" scheme="http://youngjuning.js.org/tags/lerna/"/>
    
  </entry>
  
  <entry>
    <title>使用rollup打包React Native插件并发布</title>
    <link href="http://youngjuning.js.org/2020/10/%E4%BD%BF%E7%94%A8rollup%E6%89%93%E5%8C%85React-Native%E6%8F%92%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83/"/>
    <id>http://youngjuning.js.org/2020/10/%E4%BD%BF%E7%94%A8rollup%E6%89%93%E5%8C%85React-Native%E6%8F%92%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83/</id>
    <published>2020-10-30T03:46:15.000Z</published>
    <updated>2020-10-30T03:46:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/11/03/O9j3z1o2iyhKvNr.png" alt=""></p><a id="more"></a><h2 id="安装-rollup"><a href="#安装-rollup" class="headerlink" title="安装 rollup"></a>安装 rollup</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D rollup</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;react-native-refined-components&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.1.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;refined react-native components&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;dist/cjs/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;dist/es/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;browser&quot;</span>: <span class="string">&quot;dist/umd/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;dist/es/index.d.ts&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;rimraf dist/* &amp;&amp; rollup -c&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;rollup -c -w&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rollup配置文件"><a href="#rollup配置文件" class="headerlink" title="rollup配置文件"></a>rollup配置文件</h2><p>在根目录新建 <code>rollup.config.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">&#x27;./package.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  <span class="comment">// browser-friendly UMD build</span></span><br><span class="line">  &#123;</span><br><span class="line">    input: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">      file: pkg.browser, <span class="comment">// 文件</span></span><br><span class="line">      format: <span class="string">&#x27;umd&#x27;</span>, <span class="comment">// 格式</span></span><br><span class="line">      name: <span class="string">&#x27;refined-components&#x27;</span>, <span class="comment">// 生成包名称，代表你的 iife/umd 包</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// CommonJS (for Node) and ES module (for bundlers) build.</span></span><br><span class="line">  &#123;</span><br><span class="line">        input: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">        output: [</span><br><span class="line">            &#123; <span class="attr">file</span>: pkg.main, <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">file</span>: pkg.module, <span class="attr">format</span>: <span class="string">&#x27;es&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="转换-json-文件为-ES6-modules"><a href="#转换-json-文件为-ES6-modules" class="headerlink" title="转换 .json 文件为 ES6 modules"></a>转换 <code>.json</code> 文件为 ES6 modules</h2><h3 id="安装-rollup-plugin-json"><a href="#安装-rollup-plugin-json" class="headerlink" title="安装 @rollup/plugin-json:"></a>安装 <code>@rollup/plugin-json</code>:</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D @rollup/plugin-json</span><br></pre></td></tr></table></figure><h3 id="配置-rollup-config-js"><a href="#配置-rollup-config-js" class="headerlink" title="配置 rollup.config.js"></a>配置 <code>rollup.config.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">&#x27;./package.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  <span class="comment">// browser-friendly UMD build</span></span><br><span class="line">  &#123;</span><br><span class="line">    input: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">      file: pkg.browser, <span class="comment">// 文件</span></span><br><span class="line">      format: <span class="string">&#x27;umd&#x27;</span>, <span class="comment">// 格式</span></span><br><span class="line">      name: <span class="string">&#x27;refined-components&#x27;</span>, <span class="comment">// 生成包名称，代表你的 iife/umd 包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      json(),</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// CommonJS (for Node) and ES module (for bundlers) build.</span></span><br><span class="line">  &#123;</span><br><span class="line">        input: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">        output: [</span><br><span class="line">            &#123; <span class="attr">file</span>: pkg.main, <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">file</span>: pkg.module, <span class="attr">format</span>: <span class="string">&#x27;es&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    plugins: [json()]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="加载并解析-CommonJS-模块"><a href="#加载并解析-CommonJS-模块" class="headerlink" title="加载并解析 CommonJS 模块"></a>加载并解析 CommonJS 模块</h2><p>我们写组件库或工具库时不可避免会用到外部库，这些外部库可能是符合 CommonJS 规范的。而 Rollup 力图实现 ES 模块的规范， 因此，加载 CommonJS 模块和使用 Node 模块位置解析逻辑都被实现为可选插件，默认情况下不在 Rollup 内核中。我们需要安装并配置 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9wbHVnaW5zL3RyZWUvbWFzdGVyL3BhY2thZ2VzL2NvbW1vbmpz" title="https://github.com/rollup/plugins/tree/master/packages/commonjs">CommonJS<i class="fa fa-external-link"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9wbHVnaW5zL3RyZWUvbWFzdGVyL3BhY2thZ2VzL25vZGUtcmVzb2x2ZQ==" title="https://github.com/rollup/plugins/tree/master/packages/node-resolve">node-resolve<i class="fa fa-external-link"></i></span> 插件。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D @rollup/plugin-node-resolve @rollup/plugin-commonjs</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>一般我们打的 cjs 和 esm 格式文件需要把第三放包打进来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-commonjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; nodeResolve &#125; <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-node-resolve&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">&#x27;./package.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  <span class="comment">// browser-friendly UMD build</span></span><br><span class="line">  &#123;</span><br><span class="line">    input: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">      file: <span class="string">&quot;./dist/umd/index.js&quot;</span>, <span class="comment">// 文件</span></span><br><span class="line">      format: <span class="string">&#x27;umd&#x27;</span>, <span class="comment">// 格式</span></span><br><span class="line">      name: <span class="string">&#x27;refined-components&#x27;</span>, <span class="comment">// 生成包名称，代表你的 iife/umd 包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      json(),</span><br><span class="line">      commonjs(), <span class="comment">// 加载 commonjs 模块</span></span><br><span class="line">      nodeResolve() <span class="comment">// 将 commonjs 转换为 ES 模块</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>注意：CommonJS 和 ES module 格式下我们一般不希望把第三方库打包到输出产物中，所以并不需要配置这两个插件。</p></blockquote><h2 id="忽略-warning-treating-module-as-external-dependency"><a href="#忽略-warning-treating-module-as-external-dependency" class="headerlink" title="忽略 warning-treating-module-as-external-dependency"></a>忽略 <code>warning-treating-module-as-external-dependency</code></h2><p>Rollup 默认只会解析相对路径的模块，像是 <code>import _ from &#39;lodash&#39;</code> 不会被打包进 bundle，并且打包时会有警告。如果你想忽略这些警告，你需要在 <code>external</code> 中指明这些外部模块。那么有没有更优雅的方式呢？答案是肯定的，我们只需要安装并配置 <code>rollup-plugin-node-externals</code> 插件即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D rollup-plugin-node-externals</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> externals <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-node-externals&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  <span class="comment">// CommonJS (for Node) and ES module (for bundlers) build.</span></span><br><span class="line">  &#123;</span><br><span class="line">        output: [</span><br><span class="line">            &#123; </span><br><span class="line">        file: <span class="string">&#x27;./dist/cjs/index.js&#x27;</span>,</span><br><span class="line">        format: <span class="string">&#x27;cjs&#x27;</span>,</span><br><span class="line">        <span class="built_in">exports</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">            &#123; </span><br><span class="line">        file: <span class="string">&#x27;./dist/es/index.js&#x27;</span>,</span><br><span class="line">        format: <span class="string">&#x27;es&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    plugins: [</span><br><span class="line">      externals(&#123;<span class="attr">deps</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="打包-ts-文件"><a href="#打包-ts-文件" class="headerlink" title="打包 ts 文件"></a>打包 ts 文件</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D rollup-plugin-typescript2 typescript</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-typescript2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  <span class="comment">// browser-friendly UMD build</span></span><br><span class="line">  &#123;</span><br><span class="line">    input: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">      file: <span class="string">&#x27;./dist/umd/index.js&#x27;</span>, <span class="comment">// 文件</span></span><br><span class="line">      format: <span class="string">&#x27;umd&#x27;</span>, <span class="comment">// 格式</span></span><br><span class="line">      name: <span class="string">&#x27;refined-components&#x27;</span>, <span class="comment">// 生成包名称，代表你的 iife/umd 包</span></span><br><span class="line">      globals: &#123;</span><br><span class="line">        <span class="string">&#x27;react&#x27;</span>: <span class="string">&#x27;React&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;react-native&#x27;</span>: <span class="string">&#x27;reactNative&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      sourcemap: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="comment">// 如果用了 rollup-plugin-node-resolve， 则必须将它放在 typescript 插件前面</span></span><br><span class="line">      typescript(&#123; </span><br><span class="line">        tsconfigOverride: &#123; </span><br><span class="line">          compilerOptions: &#123; <span class="attr">declaration</span>: <span class="literal">false</span> &#125; </span><br><span class="line">        &#125; </span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    external: [<span class="string">&quot;react&quot;</span>,<span class="string">&quot;react-native&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// CommonJS (for Node) and ES module (for bundlers) build.</span></span><br><span class="line">  &#123;</span><br><span class="line">        input: <span class="string">&#x27;./src/index.ts&#x27;</span>,</span><br><span class="line">        output: [</span><br><span class="line">            &#123; <span class="attr">dir</span>: <span class="string">&#x27;./dist/cjs/index.js&#x27;</span>, <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>, <span class="attr">exports</span>: <span class="string">&#x27;auto&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">dir</span>: <span class="string">&#x27;./dist/es/index.js&#x27;</span>, <span class="attr">format</span>: <span class="string">&#x27;es&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    plugins: [</span><br><span class="line">      typescript(),</span><br><span class="line">    ],</span><br><span class="line">    external: [<span class="string">&quot;react&quot;</span>,<span class="string">&quot;react-native&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [<span class="string">&quot;dist&quot;</span>,<span class="string">&quot;rollup.config.js&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rollup-plugin-multi-input-使用"><a href="#rollup-plugin-multi-input-使用" class="headerlink" title="rollup-plugin-multi-input 使用"></a>rollup-plugin-multi-input 使用</h2><p>组件库比较大时，我们可能需要让我们的库支持 tree-shaking。那么你就不能将所有的文件都打入到一个文件中。<code>rollup-plugin-multi-input</code> 便是一个将打包产物输出到各自的文件中的插件。就像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">  - A.ts </span><br><span class="line">  - B.ts </span><br><span class="line">  - index.ts</span><br><span class="line">-&gt;</span><br><span class="line">dist</span><br><span class="line">  - A.js</span><br><span class="line">  - B.js</span><br><span class="line">  - index.js</span><br></pre></td></tr></table></figure><h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D rollup-plugin-multi-input</span><br></pre></td></tr></table></figure><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><blockquote><p>注意：因为产物是多文件，所以需要用 <code>dir</code> 属性指定文件夹。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiInput <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-multi-input&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// CommonJS (for Node) and ES module (for bundlers) build.</span></span><br><span class="line">  &#123;</span><br><span class="line">        input: [<span class="string">&#x27;src/**/*.ts&#x27;</span>,<span class="string">&#x27;src/**/*.tsx&#x27;</span>],</span><br><span class="line">        output: [</span><br><span class="line">            &#123; <span class="attr">dir</span>: <span class="string">&#x27;./src&#x27;</span>, <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>, <span class="attr">exports</span>: <span class="string">&#x27;auto&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">dir</span>: <span class="string">&#x27;./src&#x27;</span>, <span class="attr">format</span>: <span class="string">&#x27;es&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    plugins: [</span><br><span class="line">      multiInput(),</span><br><span class="line">    ],</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h2><ul><li>rollup-plugin-progress: 打包进度条</li><li>rollup-plugin-terser: 压缩文件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/03/O9j3z1o2iyhKvNr.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hybrid" scheme="http://youngjuning.js.org/categories/Hybrid/"/>
    
      <category term="React Native" scheme="http://youngjuning.js.org/categories/Hybrid/React-Native/"/>
    
    
      <category term="rollup" scheme="http://youngjuning.js.org/tags/rollup/"/>
    
      <category term="前端打包" scheme="http://youngjuning.js.org/tags/%E5%89%8D%E7%AB%AF%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>使用Jest和Enzyme进行React Native单元测试</title>
    <link href="http://youngjuning.js.org/2020/10/%E4%BD%BF%E7%94%A8Jest%E5%92%8CEnzyme%E8%BF%9B%E8%A1%8CReact%20Native%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://youngjuning.js.org/2020/10/%E4%BD%BF%E7%94%A8Jest%E5%92%8CEnzyme%E8%BF%9B%E8%A1%8CReact%20Native%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2020-10-16T07:23:13.000Z</published>
    <updated>2020-10-16T07:23:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/11/18/cnIAURFYCOsGfDk.png" alt=""></p><a id="more"></a><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><ul><li>jest：Jest是一个令人愉快的 JavaScript 测试框架，专注于简洁明快。</li><li>enzyme：Enzyme是用于React的JavaScript测试实用程序，可以更轻松地测试React组件的输出。您还可以根据给定的输出进行操作，遍历并以某种方式模拟运行时。</li><li>jest-enzyme: Jest assertions for enzyme</li><li>enzyme-adapter-react-16: React Native 测试所需的桥接器</li><li>enzyme-to-json: 将 Enzyme wrappers 转换成符合 Jest 快照测试的JSON格式。</li><li>react-native-mock-render: A fully mocked and test-friendly version of react native</li></ul><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add jest -D</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> babel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add babel-jest -D</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> enzyme</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add enzyme enzyme-adapter-react-16 enzyme-to-json -D</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> react-native-mock-render</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add react-native-mock-render -D</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> types</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add @types/enzyme @types/jest @types/react @types/react-native -D</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="jest-config-js"><a href="#jest-config-js" class="headerlink" title="jest.config.js"></a>jest.config.js</h3><ul><li>setupFilesAfterEnv：使用Jest运行安装文件以配置Enzyme和适配器（如下文<code>jest.setup.js</code>中所示），之前是<code>setupTestFrameworkScriptFile</code>，也可以使用<code>setupFiles</code></li><li>snapshotSerializers：推荐使用序列化程序使用<code>enzyme-to-json</code>，它的安装和使用非常简单，并允许您编写简洁的快照测试。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  preset: <span class="string">&#x27;react-native&#x27;</span>,</span><br><span class="line">  verbose: <span class="literal">true</span>,</span><br><span class="line">  collectCoverage: <span class="literal">true</span>,</span><br><span class="line">  moduleNameMapper: &#123; <span class="comment">// for https://github.com/facebook/jest/issues/919</span></span><br><span class="line">    <span class="string">&#x27;^image![a-zA-Z0-9$_-]+$&#x27;</span>: <span class="string">&#x27;GlobalImageStub&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;^[@./a-zA-Z0-9$_-]+\\.(png|gif)$&#x27;</span>: <span class="string">&#x27;RelativeImageStub&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  setupFilesAfterEnv: [<span class="string">&quot;&lt;rootDir&gt;/jest.setup.js&quot;</span>],</span><br><span class="line">  snapshotSerializers: [<span class="string">&#x27;enzyme-to-json/serializer&#x27;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Jest 在 <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTU3NTI2NzMvb3B0aW9uLXNldHVwdGVzdGZyYW1ld29ya3NjcmlwdGZpbGUtd2FzLXJlcGxhY2VkLWJ5LWNvbmZpZ3VyYXRpb24tc2V0dXBmaWxlc2E=" title="https://stackoverflow.com/questions/55752673/option-setuptestframeworkscriptfile-was-replaced-by-configuration-setupfilesa">24.1.0<i class="fa fa-external-link"></i></span> 之后只能使用 <code>setupFilesAfterEnv</code></p></blockquote><h3 id="jest-setup-js"><a href="#jest-setup-js" class="headerlink" title="jest.setup.js"></a>jest.setup.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;react-native-mock-render/mock&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;react-native/Libraries/Animated/src/bezier&#x27;</span>; <span class="comment">// for https://github.com/facebook/jest/issues/4710</span></span><br><span class="line"><span class="keyword">import</span> Enzyme <span class="keyword">from</span> <span class="string">&#x27;enzyme&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Adapter <span class="keyword">from</span> <span class="string">&#x27;enzyme-adapter-react-16&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Enzyme.configure(&#123; <span class="attr">adapter</span>: <span class="keyword">new</span> Adapter() &#125;);</span><br></pre></td></tr></table></figure><h2 id="覆盖率指标"><a href="#覆盖率指标" class="headerlink" title="覆盖率指标"></a>覆盖率指标</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE1LzA2L2lzdGFuYnVsLmh0bWw=" title="https://www.ruanyifeng.com/blog/2015/06/istanbul.html">代码覆盖率工具 Istanbul 入门教程<i class="fa fa-external-link"></i></span></p></li><li><p>Statements（stmts）：表达式覆盖率，是不是每个表达式都执行了？</p></li><li><p>Branches（Branch）：分支覆盖率，是不是每个if代码块都执行了？</p></li><li><p>Functions（Funcs）：函数覆盖率，是不是每个函数都调用了？</p></li><li><p>Lines（Lines）：行覆盖率，是不是每一行都执行了？</p></li></ul><h2 id="enzyme-入门"><a href="#enzyme-入门" class="headerlink" title="enzyme 入门"></a>enzyme 入门</h2><ul><li><p>shallow render（shallow）</p></li><li><p>full render（mount）</p></li><li><p>static render（render）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDA3NzYxMjEvZW56eW1lLWlzLW5vdC1maW5kaW5nLWNvbXBvbmVudC1ieS1wcm9wcw==" title="https://stackoverflow.com/questions/40776121/enzyme-is-not-finding-component-by-props">Enzyme is not finding component by props<i class="fa fa-external-link"></i></span></p></li></ul><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="jest-useFakeTimers"><a href="#jest-useFakeTimers" class="headerlink" title="jest.useFakeTimers()"></a>jest.useFakeTimers()</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly95ZXMtMS1hbS5naXRib29rLmlvL2Jsb2cvY2Utc2hpL2plc3QtemhvbmctcnUtaGUtY2Utc2hpLXNldHRpbWVvdXQ=" title="https://yes-1-am.gitbook.io/blog/ce-shi/jest-zhong-ru-he-ce-shi-settimeout">Jest 中 如何测试 setTimeout<i class="fa fa-external-link"></i></span></li></ul><h2 id="组件测试"><a href="#组件测试" class="headerlink" title="组件测试"></a>组件测试</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDYyNTIzOTYvamVzdC1ob3ctdG8tdGVzdC1pZi1hLWNvbXBvbmVudC1kb2VzLW5vdC1leGlzdA==" title="https://stackoverflow.com/questions/46252396/jest-how-to-test-if-a-component-does-not-exist">Jest - how to test if a component does not exist?<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuenltZWpzL2VuenltZS9pc3N1ZXMvMzE2" title="https://github.com/enzymejs/enzyme/issues/316">Refs not working in component being shallow rendered<i class="fa fa-external-link"></i></span></li></ul><h3 id="生命周期测试"><a href="#生命周期测试" class="headerlink" title="生命周期测试"></a>生命周期测试</h3><ul><li><span class="exturl" data-url="aHR0cDovL2VjaGl6ZW4uZ2l0aHViLmlvL3RlY2gvMjAxNy8wNC0yNC1jb21wb25lbnQtbGlmeWN5Y2xlLXRlc3Q=" title="http://echizen.github.io/tech/2017/04-24-component-lifycycle-test">组件生命周期测试 - jest+enzyme<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B0amh1YmVydC9yZWFjdC1lbnp5bWUtdGVzdGluZy1jb21wb25lbnR3aWxscmVjZWl2ZXByb3BzLXRoZS1jbGVhbi13YXktNGRiYTRmMDJiZTBi" title="https://medium.com/@tjhubert/react-enzyme-testing-componentwillreceiveprops-the-clean-way-4dba4f02be0b">React Enzyme: Testing componentWillReceiveProps, the Clean Way<i class="fa fa-external-link"></i></span></li></ul><h3 id="UI测试"><a href="#UI测试" class="headerlink" title="UI测试"></a>UI测试</h3><h3 id="组件函数调用"><a href="#组件函数调用" class="headerlink" title="组件函数调用"></a>组件函数调用</h3><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="如何忽略某一块代码"><a href="#如何忽略某一块代码" class="headerlink" title="如何忽略某一块代码"></a>如何忽略某一块代码</h3><p>添加以下格式的注释到要忽略的代码块前即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br></pre></td></tr></table></figure><h3 id="如何使用-ES6-的-import-和-export"><a href="#如何使用-ES6-的-import-和-export" class="headerlink" title="如何使用 ES6 的 import 和 export"></a>如何使用 ES6 的 import 和 export</h3><p>首先安装 <code>@babel/plugin-transform-modules-commonjs</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D @babel/plugin-transform-modules-commonjs</span></span><br></pre></td></tr></table></figure><p>首先新建一个 <code>babel.config.js</code> 文件，添加以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env: &#123;</span><br><span class="line">    test: &#123;</span><br><span class="line">      plugins: [<span class="string">&#x27;@babel/plugin-transform-modules-commonjs&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="How-to-Remove-warnings-when-rendering-react-native-components"><a href="#How-to-Remove-warnings-when-rendering-react-native-components" class="headerlink" title="How to Remove warnings when rendering react-native components"></a>How to Remove warnings when rendering react-native components</h3><ul><li>参考自：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuenltZWpzL2VuenltZS9pc3N1ZXMvODMxI2lzc3VlY29tbWVudC0zNTI5MzQ5NjM=" title="https://github.com/enzymejs/enzyme/issues/831#issuecomment-352934963">Remove warnings when rendering react-native components<i class="fa fa-external-link"></i></span></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;mounting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> origConsole = <span class="built_in">console</span>.error;</span><br><span class="line">    beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    afterEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error = origConsole;</span><br><span class="line">    &#125;);</span><br><span class="line">    it ...... </span><br><span class="line">       mount....</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="其他-issues"><a href="#其他-issues" class="headerlink" title="其他 issues"></a>其他 issues</h3><ul><li>@enzyme<ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuenltZWpzL2VuenltZS9pc3N1ZXMvMTQzNg==" title="https://github.com/enzymejs/enzyme/issues/1436">Create Adapter for React Native &amp; React 16<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuenltZWpzL2VuenltZS9pc3N1ZXMvOTkx" title="https://github.com/enzymejs/enzyme/issues/991">Can’t simulate press event in react-native<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuenltZWpzL2VuenltZS9pc3N1ZXMvMTYzNg==" title="https://github.com/enzymejs/enzyme/issues/1636">Shallow with New React Context API. Consumer not getting context<i class="fa fa-external-link"></i></span></li></ul></li><li>@jest<ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2plc3QvaXNzdWVzLzkxOQ==" title="https://github.com/facebook/jest/issues/919">requiring image in react-native<i class="fa fa-external-link"></i></span></li><li><a href="https://github.com/facebook/jest/issues/4710">TypeError: Cannot read property ‘Object.<anonymous>‘ of null</a></li><li><a href="https://github.com/facebook/jest/issues/6434">ReferenceError: You are trying to <code>import</code> a file after the Jest environment has been torn down.</a></li></ul></li></ul><h2 id="其他选型"><a href="#其他选型" class="headerlink" title="其他选型"></a>其他选型</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTQxNTI1NjIvZGlmZmVyZW5jZS1iZXR3ZWVuLWVuenltZS1yZWFjdHRlc3R1dGlscy1hbmQtcmVhY3QtdGVzdGluZy1saWJyYXJ5" title="https://stackoverflow.com/questions/54152562/difference-between-enzyme-reacttestutils-and-react-testing-library">Difference between enzyme, ReactTestUtils and react-testing-library<i class="fa fa-external-link"></i></span></li></ul><h3 id="react-test-renderer-amp-react-dom-test-utils"><a href="#react-test-renderer-amp-react-dom-test-utils" class="headerlink" title="react-test-renderer &amp; react-dom/test-utils"></a>react-test-renderer &amp; react-dom/test-utils</h3><h3 id="react-native-testing-library"><a href="#react-native-testing-library" class="headerlink" title="react-native-testing-library"></a>react-native-testing-library</h3><h3 id="Sinon"><a href="#Sinon" class="headerlink" title="Sinon"></a>Sinon</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGVpZ2hoYWxsaWRheS5jb20vdGVzdGluZy1yZWFjdC1qZXN0LWVuenltZS1zaW5vbg==" title="https://www.leighhalliday.com/testing-react-jest-enzyme-sinon">Testing React with Jest, Enzyme, and Sinon<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMDM3MjYzNA==" title="https://segmentfault.com/a/1190000010372634">Sinon 入门,看这篇文章就够了<i class="fa fa-external-link"></i></span></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sb3Zla3kuZ2l0aHViLmlvLzIwMTgvMDYvMDUvdW5pdC10ZXN0aW5nLXJlYWN0LWNvbXBvbmVudC13aXRoLWplc3Qv" title="https://loveky.github.io/2018/06/05/unit-testing-react-component-with-jest/">利用 Jest 为 React 组件编写单元测试<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL2Jsb2cubGVhbm90ZS5jb20vcG9zdC9oYWl0YW5nLnJlZ0BxcS5jb20vRW56eW1lJUU3JUFDJTk0JUU4JUFFJUIw" title="http://blog.leanote.com/post/haitang.reg@qq.com/Enzyme%E7%AC%94%E8%AE%B0">Enzyme笔记<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Zyb250ZW5kOS9mZTktbGlicmFyeS9pc3N1ZXMvMjQ0" title="https://github.com/frontend9/fe9-library/issues/244">使用jest+enzyme测试react组件<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NzAwOTY2NA==" title="https://zhuanlan.zhihu.com/p/47009664">使用Jest测试JavaScript(Mock篇)<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzODI4MjI4MTYxNTQ0" title="https://juejin.im/post/6844903828228161544">使用 Jest 和 Enzyme 测试 React 组件<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly90dXR1cmUuY28vMjAyMC8wNC8wNC85ZTc0OTZkLw==" title="https://tuture.co/2020/04/04/9e7496d/">一杯茶的时间，上手 Jest 测试框架<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0hzdWVoLUplbi9ibG9nL2lzc3Vlcy8x" title="https://github.com/Hsueh-Jen/blog/issues/1">用jest+enzyme來寫Reactjs的單元測試吧！<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpbnhpbjYzMC9ibG9nL2lzc3Vlcy8yMg==" title="https://github.com/yinxin630/blog/issues/22">Jest单元测试配置和所遇问题解决办法<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGhpbmJ1Zy5jb20vcS80OTc3MjQ5Nw==" title="https://www.thinbug.com/q/49772497">使用Jest和Enzyme模拟自定义事件<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3VzdTgvcC85NTEyMzkzLmh0bWw=" title="https://www.cnblogs.com/susu8/p/9512393.html">react前端自动化测试： jest + enzyme<i class="fa fa-external-link"></i></span></li></ul><h3 id="react-native"><a href="#react-native" class="headerlink" title="react native"></a>react native</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvbmV3cy81Nzg0MjE=" title="https://cloud.tencent.com/developer/news/578421">携程租车React Native单元测试实践<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzOTI5OTk4NzM3NDE2" title="https://juejin.im/post/6844903929998737416">Jest+enzyme测试React-native项目（从配置到案例）<i class="fa fa-external-link"></i></span></li></ul><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL3JlYWN0LW5hdGl2ZS1lbGVtZW50cw==" title="https://github.com/youngjuning/react-native-elements">react-native-elements<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC91LzQwODg5ODMvYmxvZy80NTQ0NDc3" title="https://my.oschina.net/u/4088983/blog/4544477">JavaScript 测试系列实战（三）：使用 Mock 模拟模块并处理组件交互<i class="fa fa-external-link"></i></span></li></ul><h3 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly90dGZiLnRlc3QudHJhdmVsb2thLmNvbS90ZXN0aW5nLXJlYWN0LWNvbXBvbmVudC11c2luZy1lbnp5bWUtamVzdC1wYXJ0LTEv" title="https://ttfb.test.traveloka.com/testing-react-component-using-enzyme-jest-part-1/">Testing React Component using Enzyme + Jest Part 1: Setup<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubmV3bGluZS5jby9mdWxsc3RhY2stcmVhY3QvMzAtZGF5cy1vZi1yZWFjdC9kYXktMjUv" title="https://www.newline.co/fullstack-react/30-days-of-react/day-25/">Better Testing with Enzyme<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cucm9iaW53aWVydWNoLmRlL3JlYWN0LXRlc3RpbmctamVzdC1lbnp5bWU=" title="https://www.robinwieruch.de/react-testing-jest-enzyme">How to test React with Jest &amp; Enzyme<i class="fa fa-external-link"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/18/cnIAURFYCOsGfDk.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://youngjuning.js.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Jest" scheme="http://youngjuning.js.org/tags/Jest/"/>
    
      <category term="单元测试" scheme="http://youngjuning.js.org/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="端到端测试" scheme="http://youngjuning.js.org/tags/%E7%AB%AF%E5%88%B0%E7%AB%AF%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>一文搞定规范化Git Commit</title>
    <link href="http://youngjuning.js.org/2020/09/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9A%E8%A7%84%E8%8C%83%E5%8C%96Git-Commit/"/>
    <id>http://youngjuning.js.org/2020/09/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9A%E8%A7%84%E8%8C%83%E5%8C%96Git-Commit/</id>
    <published>2020-09-28T09:03:07.000Z</published>
    <updated>2020-09-28T09:03:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/09/28/2c6PtO7umUjKxC1.png" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>规范化 <code>git commit</code> 对于提高 <code>git log</code> 可读性、可控的版本控制和 changelog 生成都有着重要的作用。然而阻碍我们脚步的不只是团队的推广，单单对于一系列工具的配置都让人头大。这其中主要就是 commitlint 和 commitizen 的配合使用以及自定义提交规范。本文总结了目前的最佳实践给大家，如果有帮助，赏个star足矣。</p><h2 id="Conventional-Commits-约定式提交规范"><a href="#Conventional-Commits-约定式提交规范" class="headerlink" title="Conventional Commits 约定式提交规范"></a>Conventional Commits 约定式提交规范</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29udmVudGlvbmFsY29tbWl0cy5vcmcvemgtaGFucy92MS4wLjAtYmV0YS40Lw==" title="https://www.conventionalcommits.org/zh-hans/v1.0.0-beta.4/">Conventional Commits<i class="fa fa-external-link"></i></span> 是一种用于给提交信息增加人机可读含义的规范。约定式提交规范是一种基于消息的轻量级约定。它提供了一组用于创建清晰的提交历史的简单规则；这使得编写基于规范的自动化工具变得更容易。这个约定与 <span class="exturl" data-url="aHR0cDovL3NlbXZlci5vcmcv" title="http://semver.org/">SemVer<i class="fa fa-external-link"></i></span> 相吻合，在提交信息中描述新特性、bug 修复和破坏性变更。</p><p>提交说明的结构如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;([可选的作用域]): &lt;描述&gt;</span><br><span class="line"></span><br><span class="line">[可选的正文]</span><br><span class="line"></span><br><span class="line">[可选的脚注]</span><br></pre></td></tr></table></figure><h3 id="类型（type）"><a href="#类型（type）" class="headerlink" title="类型（type）"></a>类型（type）</h3><ul><li><code>feat:</code>:  类型为 <code>feat</code> 的提交表示在代码库中新增了一个功能（这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#摘要"><code>MINOR</code></a> 相对应）。 </li><li><code>fix:</code>：类型为 <code>fix</code> 的 提交表示在代码库中修复了一个 bug （这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#摘要"><code>PATCH</code></a> 相对应）。</li><li><code>docs:</code>: 只是更改文档。</li><li><code>style:</code>: 不影响代码含义的变化（空白、格式化、缺少分号等）。</li><li><code>refactor:</code>: 代码重构，既不修复错误也不添加功能。</li><li><code>perf:</code>: 改进性能的代码更改。</li><li><code>test:</code>: 添加确实测试或更正现有的测试。 </li><li><code>build:</code>: 影响构建系统或外部依赖关系的更改（示例范围：gulp、broccoli、NPM）。</li><li><code>ci:</code>: 更改持续集成文件和脚本（示例范围：Travis、Circle、BrowserStack、SauceLabs）。</li><li><code>chore:</code>:  其他不修改<code>src</code>或<code>test</code>文件。</li><li><code>revert:</code>: commit 回退。</li></ul><h3 id="范围（scope）"><a href="#范围（scope）" class="headerlink" title="范围（scope）"></a>范围（scope）</h3><p>可以为提交类型添加一个围在圆括号内的作用域，以为其提供额外的上下文信息。例如 <code>feat(parser): adds ability to parse arrays.</code>。</p><h3 id="BREAKING-CHANGE"><a href="#BREAKING-CHANGE" class="headerlink" title="BREAKING CHANGE"></a>BREAKING CHANGE</h3><p>在可选的正文或脚注的起始位置带有 <code>BREAKING CHANGE:</code> 的提交，表示引入了破坏性 API 变更（这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#摘要"><code>MAJOR</code></a> 相对应）。 破坏性变更可以是任意 <em>类型</em> 提交的一部分。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="包含了描述以及正文内有破坏性变更的提交说明"><a href="#包含了描述以及正文内有破坏性变更的提交说明" class="headerlink" title="包含了描述以及正文内有破坏性变更的提交说明"></a>包含了描述以及正文内有破坏性变更的提交说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feat: allow provided config object to extend other configs</span><br><span class="line"></span><br><span class="line">BREAKING CHANGE: &#96;extends&#96; key in config file is now used for extending other config files</span><br></pre></td></tr></table></figure><h4 id="包含了可选的-字符以提醒注意破坏性变更的提交说明"><a href="#包含了可选的-字符以提醒注意破坏性变更的提交说明" class="headerlink" title="包含了可选的 ! 字符以提醒注意破坏性变更的提交说明"></a>包含了可选的 <code>!</code> 字符以提醒注意破坏性变更的提交说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chore!: drop Node 6 from testing matrix</span><br><span class="line"></span><br><span class="line">BREAKING CHANGE: dropping Node 6 which hits end of life in April</span><br></pre></td></tr></table></figure><h4 id="不包含正文的提交说明"><a href="#不包含正文的提交说明" class="headerlink" title="不包含正文的提交说明"></a>不包含正文的提交说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docs: correct spelling of CHANGELOG</span><br></pre></td></tr></table></figure><h4 id="包含作用域的提交说明"><a href="#包含作用域的提交说明" class="headerlink" title="包含作用域的提交说明"></a>包含作用域的提交说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feat(lang): add polish language</span><br></pre></td></tr></table></figure><h4 id="为-fix-编写的提交说明，包含（可选的）-issue-编号"><a href="#为-fix-编写的提交说明，包含（可选的）-issue-编号" class="headerlink" title="为 fix 编写的提交说明，包含（可选的） issue 编号"></a>为 fix 编写的提交说明，包含（可选的） issue 编号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fix: correct minor typos in code</span><br><span class="line"></span><br><span class="line">see the issue for details on the typos fixed</span><br><span class="line"></span><br><span class="line">closes issue #12</span><br></pre></td></tr></table></figure><h3 id="约定式提交规范"><a href="#约定式提交规范" class="headerlink" title="约定式提交规范"></a>约定式提交规范</h3><ol><li>每个提交都<strong>必须</strong>使用类型字段前缀，它由一个名词组成，诸如<code>feat</code>或<code>fix</code>，其后接一个<strong>可选的</strong>作用域字段，以及一个<strong>必要的</strong>冒号（英文半角）和空格。</li><li>当一个提交为应用或类库实现了新特性时，<strong>必须</strong>使用<code>feat</code>类型。</li><li>当一个提交为应用修复 bug 时，<strong>必须</strong>使用<code>fix</code>类型。</li><li>作用域字段可以跟随在类型字段后面。作用有<strong>必须</strong>是一个描述某部分代码的名词，并用圆括号包围，例如：<code>fix(parser):</code></li><li>描述字段<strong>必须</strong>紧接在类型/作用域前缀的空格之后。描述指的是对代码变更的简短总结，例如：<code>fix:array parsing issue when multiplejspaces were contained in string</code>。</li><li>在简短描述之后，<strong>可以</strong>编写更长的提交正文，为代码变更提供额外的上下文信息。正文<strong>必须</strong>起始于描述字段结束的一个空行后。</li><li>在正文结束的一个空行之后，<strong>可以</strong>编写一行或或多行脚注。脚注<strong>必须</strong>包含关于提交的元信息，例如：关联的合并请求、Reviewer、破坏性变更、每条元信息一行。</li><li>破坏性变更<strong>必须</strong>标示在正文区域最开始处，或脚注区域中某一行的开始。一个破坏性变更<strong>必须</strong>包含大写的文本<code>BREAKING CHANGE</code>，后面紧跟冒号和空格。</li><li>在<code>BREAKING CHANGE:</code>之后<strong>必须</strong>提供描述，以描述对 API 的变更。例如：<code>BREAKING CHANGE: enviroment variables now take precedence over cofig files</code>。</li><li>在提交说明中，<strong>可以</strong>使用<code>feat</code>和<code>fix</code>之外的类型。</li><li>工具的实现<strong>必须不</strong>区分大小写地解析构成约定式提交的信息单元，只有<code>BREAKING CHANGE</code>  <strong>必须</strong>是大写的。</li><li><strong>可以</strong>在类型/作用域前缀之后，<code>:</code>之前，附加<code>!</code>字符，以进一步提醒注意破坏性变更。当有<code>!</code>前缀时，正文或脚注内必须包含<code>BREAKING CHANGE: description</code></li></ol><h3 id="为什么使用约定式提交"><a href="#为什么使用约定式提交" class="headerlink" title="为什么使用约定式提交"></a>为什么使用约定式提交</h3><ul><li>自动化生产 CHANGELOG。</li><li>基于提交的类型，自动决定语义化的版本变更。</li><li>向同事、公众与其他利益关系者传达变化的性质。</li><li>触发构建和部署流程。</li><li>让人们探索一个更加结构化的提交历史，以便降低对你的项目作出贡献的难度。</li></ul><h2 id="cz-customizable"><a href="#cz-customizable" class="headerlink" title="cz-customizable"></a>cz-customizable</h2><p>可自定义的Commitizen插件（或独立实用运行）可帮助实现一致的提交消息。</p><p>安装 cz-customizable：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add cz-customizable -D</span><br></pre></td></tr></table></figure><p>向 package.json 添加新的 script：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span> : &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;commit&quot;: &quot;./node_modules/cz-customizable/standalone.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在根目录新建 <code>.cz-config.js</code> 并复制 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xlb25hcmRvYW5hbGlzdGEvY3otY3VzdG9taXphYmxlL2Jsb2IvbWFzdGVyL2N6LWNvbmZpZy1FWEFNUExFLmpz" title="https://github.com/leonardoanalista/cz-customizable/blob/master/cz-config-EXAMPLE.js">cz-config-EXAMPLE.js<i class="fa fa-external-link"></i></span> 到文件。</p><p>效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d049880526b4738ba54915d182831c4~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="commitlint"><a href="#commitlint" class="headerlink" title="commitlint"></a>commitlint</h2><p>commitlint检查您的提交消息是否符合<span class="exturl" data-url="aHR0cHM6Ly9jb252ZW50aW9uYWxjb21taXRzLm9yZy8=" title="https://conventionalcommits.org/">conventional commit format<i class="fa fa-external-link"></i></span>。</p><p>1、安装 @commitlint/cli、husky：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D @commitlint/cli husky</span></span><br></pre></td></tr></table></figure><p>2、添加 git commit hooks 到 package.json：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;husky&quot;: &#123;</span><br><span class="line">    &quot;hooks&quot;: &#123;</span><br><span class="line">      &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、安装 commitlint-config-cz：</p><p>commitlint-config-cz 合并 cz-customizable 的配置 <code>&#123;types,scopes,scopeOverrides&#125;</code> 和 commitlint 的配置 <code>&#123;type-enum,scope-enum&#125;</code>。这样，你就可以在一个地方维护 types 和 scopes。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add commitlint-config-cz -D</span></span><br></pre></td></tr></table></figure><p>4、在 <code>commitlint.config.js</code> 中用 <code>cz</code> 扩展您的 commitlint 配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">extends</span>: [<span class="string">&#x27;cz&#x27;</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="comment">// must add these rules</span></span><br><span class="line">    <span class="string">&#x27;type-empty&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;subject-empty&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="vscode-commitizen"><a href="#vscode-commitizen" class="headerlink" title="vscode commitizen"></a>vscode commitizen</h2><p>在 VS Code 中搜索装 vscode commitizen，然后就可以摆脱命令行了，而且这个插件是和前面所有的配置兼容的，效果如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c46df7e45f584f63b99b1748c5b6e743~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><p>新建一个 github workflow <code>.github/workflows/commitlint.yml</code>，作用是在提交 pull_request 时，检查信息:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Lint</span> <span class="string">Commit</span> <span class="string">Messages</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">pull_request</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">commitlint:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;10.x&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Add</span> <span class="string">dependencies</span> <span class="string">for</span> <span class="string">commitlint</span> <span class="string">action</span></span><br><span class="line">        <span class="comment"># $GITHUB_WORKSPACE is the path to your repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;::set-env name=NODE_PATH::$GITHUB_WORKSPACE/node_modules&quot;</span></span><br><span class="line">      <span class="comment"># Now the commitlint action will run considering its own dependencies and yours as well 🚀</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">wagoid/commitlint-github-action@v2</span></span><br></pre></td></tr></table></figure><h2 id="standard-version"><a href="#standard-version" class="headerlink" title="standard-version"></a>standard-version</h2><p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvc3RhbmRhcmQtdmVyc2lvbg==" title="https://link.zhihu.com/?target=https%3A//github.com/conventional-changelog/standard-version">standard-version<i class="fa fa-external-link"></i></span> 是一款遵循<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9zZW12ZXIub3JnLw==" title="https://link.zhihu.com/?target=https%3A//semver.org/">语义化版本（ semver）<i class="fa fa-external-link"></i></span>和 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9jb252ZW50aW9uYWxjb21taXRzLm9yZy8=" title="https://link.zhihu.com/?target=https%3A//conventionalcommits.org/">commit message 标准规范<i class="fa fa-external-link"></i></span> 的版本和 changelog 自动化工具。通常情况线下，我们会在 master 分支进行如下的版本发布操作：</p><ol><li><code>git pull origin master</code></li><li>根据 <code>package.json</code> 中的 <code>version</code> 更新版本号，更新 CHANGELOG</li><li><code>git add .</code></li><li><code>git commit</code></li><li><code>git tag</code> 打版本操作</li><li><code>git push --tags</code>：push 版本 tag 和 master 分支到仓库</li></ol><p>其中 <strong>2，3，4，5</strong> 是 standard-version 工具会自动完成的工作，配合本地的 shell 脚本，则可以自动完成一系列版本发布的工作了。</p><h3 id="安装-amp-使用"><a href="#安装-amp-使用" class="headerlink" title="安装 &amp; 使用"></a>安装 &amp; 使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D standard-version</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;release&quot;</span>: <span class="string">&quot;standard-version&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>First Release：<code>yarn release --first-release</code></li><li>Cutting Release：<code>yarn release</code></li><li>Release as a Pre-Release：<code>yarn release --prerelease</code> or <code>yarn release --prerelease alpha</code></li><li>Release as a Target Type Imperatively (<code>npm version</code>-like)：<code>yarn release --release-as minor</code> or <code>yarn release --release-as 1.1.0</code>，可以合并 <code>--prerelease</code>以此方便发布实验性特性</li><li>Prevent Git Hooks：<code>yarn release --no-verify</code></li></ul><h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote><p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p></blockquote><table><thead><tr><th align="center">微信</th><th align="center">投食</th><th align="center">公众号</th></tr></thead><tbody><tr><td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td></tr></tbody></table><p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/09/28/2c6PtO7umUjKxC1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://youngjuning.js.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://youngjuning.js.org/tags/git/"/>
    
      <category term="commitlint" scheme="http://youngjuning.js.org/tags/commitlint/"/>
    
      <category term="commitizen" scheme="http://youngjuning.js.org/tags/commitizen/"/>
    
  </entry>
  
  <entry>
    <title>手摸手带你封装 React Native 富文本编辑器</title>
    <link href="http://youngjuning.js.org/2020/08/%E6%89%8B%E6%91%B8%E6%89%8B%E5%B8%A6%E4%BD%A0%E5%B0%81%E8%A3%85-React-Native-%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://youngjuning.js.org/2020/08/%E6%89%8B%E6%91%B8%E6%89%8B%E5%B8%A6%E4%BD%A0%E5%B0%81%E8%A3%85-React-Native-%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2020-08-27T13:52:32.000Z</published>
    <updated>2020-08-27T13:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6cc0c871ddd47d0a27b4d146273b807~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><a id="more"></a><p>大家好，我是俊宁，最近研究了下如何实现一个 React Native 富文本编辑器，并产出了两个富文本编辑器插件，特此分享一下我是如何实现的。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>你是否接到过在 React Native 项目里实现富文本编辑的需求呢？你是否像我一样找不到一款合适的 React Native 富文本编辑器插件呢？你是否想过自己实现一款富文本编辑器呢？</p><p>曾经就有掘友加我微信请教我 React Native 下如何实现富文本编辑器。当时我就说等等我，我将要用 Webview 封装一个移动端富文本编辑器。然而，那是三个月以前的flag了。那个掘友是谁我也不记得了！🐶🐶🐶</p><h2 id="React-Native-Webview"><a href="#React-Native-Webview" class="headerlink" title="React Native Webview"></a>React Native Webview</h2><p>实现一个React Native 富文本编辑器我有两个思路。一个是基于已有的原生编辑器，通过桥接来实现；另一个是基于已有的H5编辑器通过WebView实现。基于H5的编辑器比较多，所以我选用了第二个方案。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add react-native-webview</span><br><span class="line"><span class="comment"># pod install for ios</span></span><br><span class="line">$ <span class="built_in">cd</span> ios &amp; pod install</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="引入-URL-资源"><a href="#引入-URL-资源" class="headerlink" title="引入 URL 资源"></a>引入 URL 资源</h4><p>这是最常见的 WebView  用例。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; WebView &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-webview&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWeb</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;WebView</span><br><span class="line">        source=&#123;&#123; <span class="attr">uri</span>: <span class="string">&#x27;https://infinite.red&#x27;</span> &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加载本地-HTML-文件"><a href="#加载本地-HTML-文件" class="headerlink" title="加载本地 HTML 文件"></a>加载本地 HTML 文件</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Dimensions, Platform &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; WebView &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-webview&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source=&#123;Platform.OS === <span class="string">&#x27;ios&#x27;</span> ? <span class="built_in">require</span>(<span class="string">&#x27;./assets/quill.html&#x27;</span>) : &#123; <span class="attr">uri</span>: <span class="string">&#x27;file:///android_asset/quill.html&#x27;</span> &#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWeb</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WebView</span> <span class="attr">source</span>=<span class="string">&#123;source&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>iOS 直接使用 <code>require(&#39;&#39;)</code> 的形式即可引入本地文件</p></li><li><p>Android需要先将文件复制到 <code>your-project/android/app/src/main/assets/</code> 文件夹下，然后使用 <code>&#123;uri: &#39;&#39;&#125;</code> 的形式引入</p></li></ul><h4 id="Web-和-React-Native-的通信"><a href="#Web-和-React-Native-的通信" class="headerlink" title="Web 和 React Native 的通信"></a>Web 和 React Native 的通信</h4><ol><li>React Native -&gt; Web:  <code>injectedJavaScript</code>、<code>injectedJavaScriptBeforeContentLoaded</code> 属性</li><li>Web -&gt; React Native:  <code>window.ReactNativeWebView.postMessage</code> 方法和 <code>onMessage</code> 属性</li></ol><p><code>injectedJavaScriptBeforeContentLoaded</code> 属性：</p><p>这是一个在 web 页面第一次加载前执行的脚本。它只会执行一次，即使页面重载或者导航走了。当你想要往 window、localstorage或者document上注入东西时非常有用。</p><p><code>window.ReactNativeWebView.postMessage</code> 方法和 <code>onMessage</code> 属性：</p><p><code>window.ReactNativeWebView.postMessage</code> 只接受一个参数并且只能是字符串类型。接收数据的是 <code>event.nativeEvent.data</code>。</p><h2 id="react-native-quill-editor-封装"><a href="#react-native-quill-editor-封装" class="headerlink" title="react-native-quill-editor 封装"></a>react-native-quill-editor 封装</h2><blockquote><p>插件已封装完毕可用，源码在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL3JlYWN0LW5hdGl2ZS1xdWlsbC1lZGl0b3I=" title="https://github.com/youngjuning/react-native-quill-editor">https://github.com/youngjuning/react-native-quill-editor<i class="fa fa-external-link"></i></span> , 欢迎大佬们使用完善。</p></blockquote><h3 id="html-文件准备"><a href="#html-文件准备" class="headerlink" title="html 文件准备"></a>html 文件准备</h3><ol><li>css文件：<code>https://cdn.quilljs.com/1.3.6/quill.snow.css</code></li><li>js文件：<code>https://cdn.quilljs.com/1.3.6/quill.min.js</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- 放置CSS文件内容 --&gt;</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;editor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="comment">&lt;!-- 放置js文件内容 --&gt;</span></span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 初始化 quill 编辑器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这里的 options 是通过 injectedJavaScriptBeforeContentLoaded 属性注入的</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> quill = <span class="keyword">new</span> Quill(<span class="string">&#x27;#editor&#x27;</span>, <span class="built_in">window</span>.options)</span></span><br><span class="line"><span class="javascript">    quill.on(<span class="string">&#x27;text-change&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">delta, oldDelta, source</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> html = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#editor&#x27;</span>).children[<span class="number">0</span>].innerHTML</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> message = &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="string">&#x27;onChange&#x27;</span>,</span></span><br><span class="line">        message: html,</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 触发 onMessage 事件</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.ReactNativeWebView.postMessage(<span class="built_in">JSON</span>.stringify(message))</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="React-Native-侧封装"><a href="#React-Native-侧封装" class="headerlink" title="React Native 侧封装"></a>React Native 侧封装</h3><blockquote><p>注意：这里亮点是通过 <code>injectedJavaScriptBeforeContentLoaded</code> 属性实现 options 的自定义配置。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Dimensions, Platform, ViewStyle &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; WebView, WebViewMessageEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-webview&#x27;</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  style?: ViewStyle</span><br><span class="line">  defaultValue?: string</span><br><span class="line">  options?: any</span><br><span class="line">  onChange?: <span class="function">(<span class="params">html: string</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Quill = <span class="function">(<span class="params">props: Props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 默认的quill配置</span></span><br><span class="line">  <span class="keyword">const</span> options = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    placeholder: <span class="string">&#x27;请输入...&#x27;</span>,</span><br><span class="line">    modules: &#123;</span><br><span class="line">      toolbar: [[&#123; <span class="attr">header</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">false</span>] &#125;], [<span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;italic&#x27;</span>, <span class="string">&#x27;underline&#x27;</span>], [<span class="string">&#x27;image&#x27;</span>, <span class="string">&#x27;code-block&#x27;</span>]],</span><br><span class="line">    &#125;,</span><br><span class="line">    ...props.options,</span><br><span class="line">    theme: <span class="string">&#x27;snow&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> injectedJavaScriptBeforeContentLoaded = <span class="string">`window.options=<span class="subst">$&#123;options&#125;</span>`</span></span><br><span class="line">  <span class="keyword">const</span> injectedJavaScript = <span class="string">`document.querySelector(&#x27;#editor&#x27;).children[0].innerHTML=&quot;<span class="subst">$&#123;props.defaultValue&#125;</span>&quot;`</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onMessage = <span class="function">(<span class="params">e: WebViewMessageEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(e.nativeEvent.data)</span><br><span class="line">    <span class="keyword">if</span> (data.type === <span class="string">&#x27;onChange&#x27;</span>) &#123;</span><br><span class="line">      props.onChange(data.message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;WebView</span><br><span class="line">      onMessage=&#123;onMessage&#125;</span><br><span class="line">      source=&#123;Platform.OS === <span class="string">&#x27;ios&#x27;</span> ? <span class="built_in">require</span>(<span class="string">&#x27;./assets/quill.html&#x27;</span>) : &#123; <span class="attr">uri</span>: <span class="string">&#x27;file:///android_asset/quill.html&#x27;</span> &#125;&#125;</span><br><span class="line">      javaScriptEnabled</span><br><span class="line">      injectedJavaScriptBeforeContentLoaded=&#123;injectedJavaScriptBeforeContentLoaded&#125;</span><br><span class="line">      injectedJavaScript=&#123;injectedJavaScript&#125;</span><br><span class="line">      style=&#123;&#123; <span class="attr">height</span>: Dimensions.get(<span class="string">&#x27;window&#x27;</span>).height - <span class="number">42</span>, <span class="attr">width</span>: Dimensions.get(<span class="string">&#x27;window&#x27;</span>).width, ...props.style &#125;&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Quill.defaultProps = &#123;</span><br><span class="line">  style: &#123;&#125;,</span><br><span class="line">  defaultValue: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  onChange: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  options: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Quill</span><br></pre></td></tr></table></figure><h3 id="使用体验优化"><a href="#使用体验优化" class="headerlink" title="使用体验优化"></a>使用体验优化</h3><p>前面提到的，Android 下边需要先把 html 文件复制到 <code>your-project/android/app/src/main/assets/</code> 下并通过 <code>&#123;uri: &#39;file:///&#39;&#125;</code> 的形式引用才会起作用。这就很不美丽了。人家的机制我改不了，只能想办法优化我的插件的用户的体验。我的方法是使用 <code>postinstall</code> 方法，在用户 <code>yarn install</code> 时，自动复制文件到指定文件夹下，亲测很好用。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;postinstall&quot;</span>: <span class="string">&quot;cpy &#x27;assets/quill.html&#x27; &#x27;../../android/app/src/main/assets/&#x27;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h3><p>本地开发时，有个问题就是如何实时看到自己修改的效果。方案有两个，一个是直接在 RN 项目中写，然后导出指定文件夹。另一个是使用我之前博客提到的<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ3OTAyMjI1MzU2OTgwMjMy" title="https://juejin.im/post/6847902225356980232">使用 wml 进行npm模块调试真香<i class="fa fa-external-link"></i></span>。我用的后者，亲测好用，具体配置看博客和源码即可。</p><img src="https://i.loli.net/2020/08/27/LvuyxVr3R2mlk9p.png" width="300px" /><p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6cc0c871ddd47d0a27b4d146273b807~tplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hybrid" scheme="http://youngjuning.js.org/categories/Hybrid/"/>
    
      <category term="React Native" scheme="http://youngjuning.js.org/categories/Hybrid/React-Native/"/>
    
    
      <category term="quill" scheme="http://youngjuning.js.org/tags/quill/"/>
    
      <category term="zx-editor" scheme="http://youngjuning.js.org/tags/zx-editor/"/>
    
      <category term="富文本编辑器" scheme="http://youngjuning.js.org/tags/%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>极速入门Go并爬取掘金专栏</title>
    <link href="http://youngjuning.js.org/2020/08/%E6%9E%81%E9%80%9F%E5%85%A5%E9%97%A8Go%E5%B9%B6%E7%88%AC%E5%8F%96%E6%8E%98%E9%87%91%E4%B8%93%E6%A0%8F/"/>
    <id>http://youngjuning.js.org/2020/08/%E6%9E%81%E9%80%9F%E5%85%A5%E9%97%A8Go%E5%B9%B6%E7%88%AC%E5%8F%96%E6%8E%98%E9%87%91%E4%B8%93%E6%A0%8F/</id>
    <published>2020-08-12T15:34:04.000Z</published>
    <updated>2020-08-12T15:34:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/08/13/92pykLqY7NFWi3f.png" alt=""></p><a id="more"></a><h2 id="Go印象"><a href="#Go印象" class="headerlink" title="Go印象"></a>Go印象</h2><p>2018年的某一天，我问公司后端架构师说我想学学后端语言，除了Java有啥推荐，他告诉我他在学Go。然后跟我讲了一些诸如分布式、协程、大数据、爬虫……巴拉巴拉的我也听不太懂的概念。然后我说我还是学NodeJs吧。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/386ee7328c5b451a93924c671f858269~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>之所以斗胆再战Go语言，完全是梁静茹（<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODU0NTczMjE5MjY2ODg3Njk0" title="https://juejin.im/post/6854573219266887694">上次征文<i class="fa fa-external-link"></i></span>）给了我勇气。如果你是后端大佬，直接看后半篇的爬虫部分就可以。</p><p>本文的主题是极速、爬虫、掘金专栏，目的是使用Go写一个小工具把掘金专栏文章爬取下来，慢慢看。</p><h2 id="Let’s-Go"><a href="#Let’s-Go" class="headerlink" title="Let’s Go"></a>Let’s Go</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>语法简单，易上手（仅有25个关键保留字）</li><li>性能高、编译快，开发效率不比Python和Ruby低</li><li>部署方便，编译包小，几乎无依赖（二进制文件包可直接运行）这一点和Deno很像</li><li>原生支持并发（goroutine）</li><li>官方统一规范（gofmt、golint）又看到了Deno的影子</li><li>丰富的标准库，再次看到了Deno的影子</li></ul><h3 id="趋势"><a href="#趋势" class="headerlink" title="趋势"></a>趋势</h3><p>权威的趋势，优弧大佬已经讲的很清楚了，我这里补充一下GitHub的star趋势:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f1ea4ca5a4d457c8e93e07372b88e28~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="Go简介"><a href="#Go简介" class="headerlink" title="Go简介"></a>Go简介</h2><p>Go是Google开发的一种静态强类型、编译型、并发型并具有垃圾回收功能的编程语言。为了方便搜索和识别，有时会将其称为Golang。</p><h2 id="Go语言特点"><a href="#Go语言特点" class="headerlink" title="Go语言特点"></a>Go语言特点</h2><ol><li>Go是一种新的语言，是一种支持并发、带垃圾回收、可快速编译的静态语言。</li><li>Go为并发执行与通信提供了基本的支持，是天生的高性能服务开发语言。</li><li>Go结合了解释性语言的游刃有余，动态类型语言的开发效率，以及静态类型的安全性。</li><li>Go只需要用几秒的时间就可以编译一个大型的Go程序，部署也非常容易。</li><li>Go具有Python/Ruby的开发效率，同时又是C语言的运行性能（还是有一定差距的）。</li><li>Go简单易上手（只有25个关键保留字）</li><li>Go有自己的开发规范，还提供工具支持。</li></ol><h2 id="Go安装配置"><a href="#Go安装配置" class="headerlink" title="Go安装配置"></a>Go安装配置</h2><blockquote><p>作者还有一篇<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MDgzNDg5MzA4Njg1" title="https://juejin.im/post/6844904083489308685">程序员的Mac开发环境【持续更新】<i class="fa fa-external-link"></i></span>，记录了我的Mac上的开发环境，读者大大可以顺便给个Star吗？</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install go</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ac7ef0acc5b4d2480c802d586f3ae44~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><blockquote><p>小技巧1：<code>ctrl+c</code> 可以跳过 <code>Updating Homebrew...</code>，要不卡到你怀疑人生。</p></blockquote><blockquote><p>小技巧2：如果你有时间等，可以带上 <code>-verbose</code> 参数，这样下载的时候会告诉你更新进度。</p></blockquote><blockquote><p>小技巧3：Homebrew 是同步的 GitHub 仓库，如果实在卡，请自行换 Homebrew 代理源</p></blockquote><p>安装成功后，查看go版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.14.7 darwin/amd64</span><br></pre></td></tr></table></figure><p>配置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open /usr/<span class="built_in">local</span>/Cellar/go/</span><br></pre></td></tr></table></figure><blockquote><p>然后看一下自己的libexec在什么地方然后记录下整体的地址，我的地址是 <code>/usr/local/Cellar/go/1.14.7/libexec</code></p></blockquote><p>需要将这部分写入到 <code>nano ~/.zshrc</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#GO</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/Cellar/go/1.14.7/libexec</span><br><span class="line"><span class="built_in">export</span> GOPATH=~/.go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure><p>记得执行 <code>source ~/.zshrc</code> 命令后才会生效。然后执行 <code>go env</code> 命令查看是否成功</p><details><summary>输出过长，请点开查看！！！</summary><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">GO111MODULE=&quot;on&quot;</span><br><span class="line">GOARCH=&quot;amd64&quot;</span><br><span class="line">GOBIN=&quot;&quot;</span><br><span class="line">GOCACHE=&quot;/Users/yangjunning/Library/Caches/go-build&quot;</span><br><span class="line">GOENV=&quot;/Users/yangjunning/Library/Application Support/go/env&quot;</span><br><span class="line">GOEXE=&quot;&quot;</span><br><span class="line">GOFLAGS=&quot;&quot;</span><br><span class="line">GOHOSTARCH=&quot;amd64&quot;</span><br><span class="line">GOHOSTOS=&quot;darwin&quot;</span><br><span class="line">GOINSECURE=&quot;&quot;</span><br><span class="line">GONOPROXY=&quot;&quot;</span><br><span class="line">GONOSUMDB=&quot;&quot;</span><br><span class="line">GOOS=&quot;darwin&quot;</span><br><span class="line">GOPATH=&quot;/Users/yangjunning/go&quot;</span><br><span class="line">GOPRIVATE=&quot;&quot;</span><br><span class="line">GOPROXY=&quot;https://goproxy.cn,direct&quot;</span><br><span class="line">GOROOT=&quot;/usr/local/Cellar/go/1.14.7/libexec&quot;</span><br><span class="line">GOSUMDB=&quot;sum.golang.org&quot;</span><br><span class="line">GOTMPDIR=&quot;&quot;</span><br><span class="line">GOTOOLDIR=&quot;/usr/local/Cellar/go/1.14.7/libexec/pkg/tool/darwin_amd64&quot;</span><br><span class="line">GCCGO=&quot;gccgo&quot;</span><br><span class="line">AR=&quot;ar&quot;</span><br><span class="line">CC=&quot;clang&quot;</span><br><span class="line">CXX=&quot;clang++&quot;</span><br><span class="line">CGO_ENABLED=&quot;1&quot;</span><br><span class="line">GOMOD=&quot;/dev/null&quot;</span><br><span class="line">CGO_CFLAGS=&quot;-g -O2&quot;</span><br><span class="line">CGO_CPPFLAGS=&quot;&quot;</span><br><span class="line">CGO_CXXFLAGS=&quot;-g -O2&quot;</span><br><span class="line">CGO_FFLAGS=&quot;-g -O2&quot;</span><br><span class="line">CGO_LDFLAGS=&quot;-g -O2&quot;</span><br><span class="line">PKG_CONFIG=&quot;pkg-config&quot;</span><br><span class="line">GOGCCFLAGS=&quot;-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/zn/17xnqr8s1pjbpzt9_t38tyhc0000gn/T/go-build998676802=/tmp/go-build -gno-record-gcc-switches -fno-common&quot;</span><br></pre></td></tr></table></figure></details><h2 id="七牛云镜像代理"><a href="#七牛云镜像代理" class="headerlink" title="七牛云镜像代理"></a>七牛云镜像代理</h2><p>打开你的终端并执行，Go 1.13 及以上可行，其他版本请阅读<span class="exturl" data-url="aHR0cHM6Ly9nb3Byb3h5LmNuLw==" title="https://goproxy.cn/">Goproxy中国<i class="fa fa-external-link"></i></span> 查看文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go env -w GO111MODULE=on</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> go env -w GOPROXY=https://goproxy.cn,direct</span></span><br></pre></td></tr></table></figure><h2 id="Go-常用命令"><a href="#Go-常用命令" class="headerlink" title="Go 常用命令"></a>Go 常用命令</h2><p>1、<code>go build</code>：用于编译我们指定的源码文件或代码包以及它们的依赖包</p><p>2、<code>go clean</code>：用来移除当前源码包里面编译生成的文件</p><p>3、<code>go doc</code>：打印附于Go语言程序实体上的文档。我们可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的。</p><p>4、<code>go fmt</code>：帮助格式化你的代码文件，你只需要执行 go fmt xxx.go 你的代码将会被修改为标准格式</p><p>5、<code>go get</code>：根据要求和实际情况从互联网上下载或更新指定的代码败一级依赖包，并对他们进行编译和安装</p><p>6、<code>go install</code>：用于编译并安装指定的代码包及它们的依赖包</p><p>7、<code>go run</code>：可以遍历源码并运行命令源码文件</p><h2 id="Go标准库"><a href="#Go标准库" class="headerlink" title="Go标准库"></a>Go标准库</h2><p>1、sync：提供了基本的同步原语。在多个goroutine访问共享资源的时候，需要使用sync中提供的锁机制。</p><p>2、os：提供了对操作系统功能的非平台相关访问接口。接口为Unix风格。提供的功能包括文件操作、进程管理、信号和用户账号等。</p><p>3、time：时间相关的处理</p><p>4、fmt：实现格式化的输入输出操作。</p><p>5、io：实现了一系列非平台相关的IO相关接口和实现，比如提供了对os中系统相关的IO功能的封装。我们在进行流式读写（比如读写文件）时，会用到该包。</p><p>6、http：提供web服务</p><p>7、string：处理字符串的一些函数集合，包括合并、查找、分割、比较、后缀检查、索引、大小写处理等等。</p><h2 id="VsCode插件推荐"><a href="#VsCode插件推荐" class="headerlink" title="VsCode插件推荐"></a>VsCode插件推荐</h2><ul><li>Go：Rich Go language support for Visual Studio Code</li></ul><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>创建<code>helloworld.go</code>写入下面内容:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">// 代码包声明语句。</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span> <span class="comment">// 系统包用来输出的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 打印函数调用语句。用于打印输出信息。</span></span><br><span class="line">  fmt.Println(sayHello(<span class="string">&quot;掘金&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(juejin <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span>+juejin</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行<code>go run helloworld.go</code>，好了你已经入门了,下面可以一起开启爬虫的学习了，下面我会循序渐进地带大家实现一个爬取掘金专栏并转成Markdown的格式保存到本地的小爬虫，取名叫<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2p1ZWppbi1zcGlkZXI=" title="https://github.com/youngjuning/juejin-spider">juejin-spider<i class="fa fa-external-link"></i></span>。</p><h2 id="爬虫是什么"><a href="#爬虫是什么" class="headerlink" title="爬虫是什么"></a>爬虫是什么</h2><p>百度百科和维基百科对网络爬虫的定义：简单来说爬虫就是抓取目标网站内容的工具，一般是根据定义的行为自动进行抓取, 对网页或数据的分析与过滤；抓取的网页URL进行爬行策略。</p><p>简单来说就是把目标网页下载下来，然后通过解析、过滤、去重等一系列操作获得自己想要的数据并以相应的格式保存下来。大致流程如下图：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb67f112c5234a97b12eb690ab58435f~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="colloy极速上手"><a href="#colloy极速上手" class="headerlink" title="colloy极速上手"></a>colloy极速上手</h2><p>gocolly是用go实现的网络爬虫框架，目前在github上具有11K+星，名列go版爬虫程序榜首。gocolly快速优雅，在单核上每秒可以发起1K以上请求；以回调函数的形式提供了一组接口，可以实现任意类型的爬虫；依赖goquery库可以像jquery一样选择web元素。</p><p>gocolly的官方网站是<span class="exturl" data-url="aHR0cDovL2dvLWNvbGx5Lm9yZy8=" title="http://go-colly.org/">http://go-colly.org/<i class="fa fa-external-link"></i></span>，提供了详细的文档和示例代码。安装colly:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u github.com/gocolly/colly/...</span><br></pre></td></tr></table></figure><h3 id="人生第一个爬虫"><a href="#人生第一个爬虫" class="headerlink" title="人生第一个爬虫"></a>人生第一个爬虫</h3><p>在 <code>go.mod</code> 中管理依赖：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module juejin.im/junning</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.14</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">  github.com/gocolly/colly/v2 latest</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>新建 <code>main.go</code> 文件并编写代码：</p><blockquote><p>这段代码不长，但是我看了官方文档以及五六篇博客，才搞定，就为了让我人生第一个爬虫足够完整。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="comment">// 1、导入 colly。</span></span><br><span class="line">    <span class="string">&quot;github.com/gocolly/colly&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gocolly/colly/extensions&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 2、创建 collector</span></span><br><span class="line">    c := colly.NewCollector(colly.AllowedDomains(<span class="string">&quot;juejin.im&quot;</span>)) <span class="comment">// 要限定域名，否则就把全网都爬下来了</span></span><br><span class="line">    extensions.RandomUserAgent(c)                              <span class="comment">// 使用随机的UserAgent，最好能使用代理。这样就不容易被ban</span></span><br><span class="line">    extensions.Referer(c)                                      <span class="comment">// 在访问的时候带上Referrer，意思就是这一次点击是从哪个页面产生的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、事件监听，通过 callback 执行事件处理。</span></span><br><span class="line">    c.OnError(<span class="function"><span class="keyword">func</span><span class="params">(_ *colly.Response, err error)</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Something went wrong:&quot;</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">    c.OnRequest(<span class="function"><span class="keyword">func</span><span class="params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// fmt.Println(&quot;Visiting&quot;, r.URL)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// Find and visit all links</span></span><br><span class="line">    c.OnHTML(<span class="string">&quot;a[href]&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">        fmt.Println(e.Text)</span><br><span class="line">        e.Request.Visit(e.Attr(<span class="string">&quot;href&quot;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、启动网页访问</span></span><br><span class="line">    c.Visit(<span class="string">&quot;https://juejin.im/&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>:=</code> 的方式声明变量并赋值，JS写多了好不习惯（语法学习推荐大家看<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vYm9vay82ODQ0NzMzODMzNDAxNTk3OTY2L3NlY3Rpb24=" title="https://juejin.im/book/6844733833401597966/section">漫画 Go 语言 纯手绘版<i class="fa fa-external-link"></i></span> ）</li><li><code>*clolly.HTMLElement</code> 的语法是声明参数类型的</li></ul><h3 id="回调及其调用顺序"><a href="#回调及其调用顺序" class="headerlink" title="回调及其调用顺序"></a>回调及其调用顺序</h3><p>gocolly 的原理就是监听网络访问，并提供了7事件和回调来供开发者来发挥。</p><ol><li>OnRequest：请求执行之前调用</li><li>OnError：请求出错的时候调用</li><li>OnResponseHeaders：Called after response headers received响应头接收到时调用</li><li>OnResponse：响应完成后调用</li><li>OnHTML：如果接收到的内容是HTML，则在OnResponse之后立即调用</li><li>OnXML：如果接收到的内容是HTML或者XML，则在OnHTML之后立即调用</li><li>OnScraped：在OnXML之后立即调用</li></ol><h3 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h3><p>这里列出了 <code>*colly.HTMLElement</code> 和 <code>*colly.Request</code> 的类型定义，在开发过程中，你可以随时跳转到类型定义文件，或者查看 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvY29sbHkvY29sbHkv" title="https://github.com/gocolly/colly/">https://github.com/gocolly/colly/<i class="fa fa-external-link"></i></span> 中对应的文件都可以（据说源码写的很优秀，有时间研究一下）。PS：和TypeScript其实有很多相似之处，可以类比学习，这也是为啥我可以一夜入门。</p><h4 id="colly-HTMLElement"><a href="#colly-HTMLElement" class="headerlink" title="*colly.HTMLElement"></a>*colly.HTMLElement</h4><blockquote><p>在线链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvY29sbHkvY29sbHkvYmxvYi9tYXN0ZXIvaHRtbGVsZW1lbnQuZ28=" title="https://github.com/gocolly/colly/blob/master/htmlelement.go">https://github.com/gocolly/colly/blob/master/htmlelement.go<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTMLElement is the representation of a HTML tag.</span></span><br><span class="line"><span class="keyword">type</span> HTMLElement <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// Name is the name of the tag</span></span><br><span class="line">    Name       <span class="keyword">string</span></span><br><span class="line">    Text       <span class="keyword">string</span></span><br><span class="line">    attributes []html.Attribute</span><br><span class="line">    <span class="comment">// Request is the request object of the element&#x27;s HTML document</span></span><br><span class="line">    Request *Request</span><br><span class="line">    <span class="comment">// Response is the Response object of the element&#x27;s HTML document</span></span><br><span class="line">    Response *Response</span><br><span class="line">    <span class="comment">// DOM is the goquery parsed DOM object of the page. DOM is relative</span></span><br><span class="line">    <span class="comment">// to the current HTMLElement</span></span><br><span class="line">    DOM *goquery.Selection</span><br><span class="line">    <span class="comment">// Index stores the position of the current element within all the elements matched by an OnHTML callback</span></span><br><span class="line">    Index <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="colly-Request"><a href="#colly-Request" class="headerlink" title="*colly.Request"></a>*colly.Request</h4><blockquote><p>在线链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvY29sbHkvY29sbHkvYmxvYi9tYXN0ZXIvcmVxdWVzdC5nbw==" title="https://github.com/gocolly/colly/blob/master/request.go">https://github.com/gocolly/colly/blob/master/request.go<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Request is the representation of a HTTP request made by a Collector</span></span><br><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// URL is the parsed URL of the HTTP request</span></span><br><span class="line">    URL *url.URL</span><br><span class="line">    <span class="comment">// Headers contains the Request&#x27;s HTTP headers</span></span><br><span class="line">    Headers *http.Header</span><br><span class="line">    <span class="comment">// Ctx is a context between a Request and a Response</span></span><br><span class="line">    Ctx *Context</span><br><span class="line">    <span class="comment">// Depth is the number of the parents of the request</span></span><br><span class="line">    Depth <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// Method is the HTTP method of the request</span></span><br><span class="line">    Method <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// Body is the request body which is used on POST/PUT requests</span></span><br><span class="line">    Body io.Reader</span><br><span class="line">    <span class="comment">// ResponseCharacterencoding is the character encoding of the response body.</span></span><br><span class="line">    <span class="comment">// Leave it blank to allow automatic character encoding of the response body.</span></span><br><span class="line">    <span class="comment">// It is empty by default and it can be set in OnRequest callback.</span></span><br><span class="line">    ResponseCharacterEncoding <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// ID is the Unique identifier of the request</span></span><br><span class="line">    ID        <span class="keyword">uint32</span></span><br><span class="line">    collector *Collector</span><br><span class="line">    abort     <span class="keyword">bool</span></span><br><span class="line">    baseURL   *url.URL</span><br><span class="line">    <span class="comment">// ProxyURL is the proxy address that handles the request</span></span><br><span class="line">    ProxyURL <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="爬取掘金专栏"><a href="#爬取掘金专栏" class="headerlink" title="爬取掘金专栏"></a>爬取掘金专栏</h2><p>爬虫的原理就是模拟一个网页访问，获取文档信息，并对信息以各种手段解析出自己需要的数据，并保存数据。</p><p>由于作者是仓促间一夜入门Go语言，无力实现一个数据爬取的爬虫，我实现的是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">访问掘金专栏详情页</span><br><span class="line">        ⏬</span><br><span class="line">获取指定的内容和标题部分</span><br><span class="line">        ⏬</span><br><span class="line">将标题作为文件名</span><br><span class="line">        ⏬</span><br><span class="line">把内容转为Markdown格式存入文件</span><br><span class="line">        ⏬</span><br><span class="line">保存文件到本地</span><br></pre></td></tr></table></figure><h3 id="分析页面结构"><a href="#分析页面结构" class="headerlink" title="分析页面结构"></a>分析页面结构</h3><p><strong>专栏标题结构</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">data-v-23a9d5ed</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span>(.*?)<span class="tag">&lt;<span class="name">\</span>/<span class="attr">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>专栏正文结构</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;markdown-body&quot;</span>&gt;</span>(.*?)<span class="tag">&lt;<span class="name">\</span>/<span class="attr">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="获取专栏标题和内容"><a href="#获取专栏标题和内容" class="headerlink" title="获取专栏标题和内容"></a>获取专栏标题和内容</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := colly.NewCollector(</span><br><span class="line">        colly.Async(<span class="literal">true</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    c.OnRequest(<span class="function"><span class="keyword">func</span><span class="params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Visiting&quot;</span>, r.URL)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    c.OnError(<span class="function"><span class="keyword">func</span><span class="params">(_ *colly.Response, err error)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;Something went wrong:&quot;</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    c.OnHTML(<span class="string">&quot;.article-title&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">        <span class="comment">// Code Here</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    c.OnHTML(<span class="string">&quot;.markdown-body&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">        <span class="comment">// Code Here</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    c.Visit(<span class="string">&quot;https://juejin.im/post/&quot;</span> + *post)</span><br><span class="line">    c.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>colly.NewCollector</code>里面加了一项<code>colly.Async(true)</code>，表示抓取时异步的，这能让抓取速度显著提高</li><li>使用 <code>OnHTML</code> 事件分别抓取带有<code>article-title</code>和<code>.markdown-body</code>的元素，这里边就是我们下边要实现功能的逻辑实现地。</li><li><code>OnHTML</code> 第一个参数是符合CSS选择器规则的，可以使用任意选择器搞事情。</li></ul><h3 id="转HTML为Markdown"><a href="#转HTML为Markdown" class="headerlink" title="转HTML为Markdown"></a>转HTML为Markdown</h3><p>这里我们借助的是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pvaGFubmVzS2F1Zm1hbm4vaHRtbC10by1tYXJrZG93bg==" title="https://github.com/JohannesKaufmann/html-to-markdown">html-to-markdown<i class="fa fa-external-link"></i></span> 这个库提供的功能，我们将其简单封装一下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将Html转为Markdown</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertHTMLToMarkdown</span><span class="params">(selection *goquery.Selection)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    converter := md.NewConverter(<span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="literal">nil</span>)</span><br><span class="line">    markdown := converter.Convert(selection)</span><br><span class="line">    <span class="keyword">return</span> markdown</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保存文件到本地"><a href="#保存文件到本地" class="headerlink" title="保存文件到本地"></a>保存文件到本地</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(fileName <span class="keyword">string</span>,content <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    filePath := fileName + <span class="string">&quot;.md&quot;</span></span><br><span class="line">    <span class="keyword">var</span> file *os.File</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> checkFileIsExist(filePath) &#123;</span><br><span class="line">        <span class="comment">// 如果文件存在，则删除</span></span><br><span class="line">        err := os.Remove(filePath)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建文件并写入内容</span></span><br><span class="line">    file, _ = os.Create(filePath)</span><br><span class="line">    n, _ := io.WriteString(file, <span class="string">&quot;## &quot;</span>+fileName+<span class="string">&quot;\n\n&quot;</span>+content)</span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    file.Close()</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查文件是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkFileIsExist</span><span class="params">(fileName <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    _, err := os.Stat(fileName)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><code>os.Stat</code>：用来获取文件或文件信息，基于它封装了<code>checkFileIsExist</code> 判断文件是否存在</li><li><code>os.Create</code>+<code>io.WriteString</code>实现了文件的创建和写入文件</li><li>判断文件存在则用<code>os.Remove(filePath)</code> 删除文件，以覆盖文件（懒得看覆盖文件的方法）</li></ul><h3 id="获取命令行参数"><a href="#获取命令行参数" class="headerlink" title="获取命令行参数"></a>获取命令行参数</h3><p>这个写法我用NodeJS写CLI工具的时候写法差不多，有兴趣的可以<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2NsaQ==" title="https://github.com/youngjuning/cli">看一下，<i class="fa fa-external-link"></i></span>下次不一定，就这次呗。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> post = flag.String(<span class="string">&quot;post&quot;</span>, <span class="string">&quot;6859538537830858759&quot;</span>, <span class="string">&quot;文章编号&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> rootDir = flag.String(<span class="string">&quot;root&quot;</span>, root, <span class="string">&quot;文件保存的根目录&quot;</span>)</span><br><span class="line">  flag.Parse()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取环境变量"><a href="#获取环境变量" class="headerlink" title="获取环境变量"></a>获取环境变量</h3><p>GO语言中不支持使用<code>~</code>号代表家目录，经过一番折腾，找到这个解决办法，这不和Deno一个德行，这语言设计都是互相借鉴（抄）的吧。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.Getenv(<span class="string">&quot;HOME&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="获取图片"><a href="#获取图片" class="headerlink" title="获取图片"></a>获取图片</h3><p>测试脚本的时候发现有图片的文章，图片都丢失了，这怎么行，没有图片的文章是没有灵魂的。分析的结果是掘金的图片是懒加载的，标签大概长这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;lazyload inited loaded&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://i.loli.net/2020/08/13/cVomW7L9YOTw2uA.png&quot;</span> <span class="attr">data-width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">data-height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2020/08/13/cVomW7L9YOTw2uA.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我盲猜是这个<code>data-</code>属性的问题，遂在脚本中加入了下面的代码将<code>data-</code>删掉：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">reg := regexp.MustCompile(<span class="string">`data-`</span>)</span><br><span class="line">        html, _ := e.DOM.Html()</span><br><span class="line">        markdown := convertHTMLToMarkdown(reg.ReplaceAllString(html, <span class="string">&quot;&quot;</span>))</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2hvbWVicmV3LWp1ZWppbi1zcGlkZXIvcmVsZWFzZXMvdGFnL3YwLjEuMA==" title="https://github.com/youngjuning/homebrew-juejin-spider/releases/tag/v0.1.0">youngjuning/homebrew-juejin-spider@0.1.0<i class="fa fa-external-link"></i></span> 已经发布，可以完美地抓取掘金专栏啦。</p><h3 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h3><blockquote><p>代码太长，源码在这里 》》》<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2p1ZWppbi1zcGlkZXI=" title="https://github.com/youngjuning/juejin-spider">https://github.com/youngjuning/juejin-spider<i class="fa fa-external-link"></i></span>《《《，都读到这里了，给个star呗。</p></blockquote><h2 id="打包并使用Homebrew发布脚本"><a href="#打包并使用Homebrew发布脚本" class="headerlink" title="打包并使用Homebrew发布脚本"></a>打包并使用Homebrew发布脚本</h2><p>黑客是要有追求的，不可能做个玩具出来。而且Go本身就是运行起来不靠任何依赖和环境，我不能要求使用工具的人还得装个go的环境。我第一个想到的就是将我的脚本发到Homebrew，谢天谢地，<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lODg4MzFhYWM2MmE=" title="https://www.jianshu.com/p/e88831aac62a">使用HomeBrew发布脚本<i class="fa fa-external-link"></i></span> 详细地讲解了这个过程。</p><h3 id="1、打包成可执行文件"><a href="#1、打包成可执行文件" class="headerlink" title="1、打包成可执行文件"></a>1、打包成可执行文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build juejin.go</span><br></pre></td></tr></table></figure><p>会在当前目录下生成一个叫 juejin 的可执行文件，<code>./juejin</code> 是可以执行的，也可以使用<code>go build -o=/usr/local/bin juejin.go</code> 或 <code>go build -o=$GOPATH/bin/ juejin.go</code> 放到已经注册的系统路径中。</p><h3 id="2、将可执行文件打包成-tar-gz-的格式"><a href="#2、将可执行文件打包成-tar-gz-的格式" class="headerlink" title="2、将可执行文件打包成 tar.gz 的格式"></a>2、将可执行文件打包成 tar.gz 的格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar zcvf juejin_0.0.1.tar.gz juejin</span></span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f64f139d9578418fa7eaae6a33191266~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>上传到git，供配方软连接到这个脚本文件。</p><h3 id="3、使用-brew-create-lt-git-url-gt-tab-user-repo-创建药方"><a href="#3、使用-brew-create-lt-git-url-gt-tab-user-repo-创建药方" class="headerlink" title="3、使用 brew create &lt;git-url&gt; --tab user/repo 创建药方"></a>3、使用 <code>brew create &lt;git-url&gt; --tab user/repo</code> 创建药方</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew create \</span><br><span class="line">    https://github.com/youngjuning/homebrew-juejin-spider/raw/master/juejin_0.0.1.tar.gz \</span><br><span class="line">    --tap youngjuning/homebrew-juejin-spider</span><br></pre></td></tr></table></figure><p>我们需要对安装方式做一下调整:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">install</span></span></span><br><span class="line">    bin.install <span class="string">&quot;juejin&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>做完这些操作后，保存，提交到git上。</p><h3 id="4、安装脚本"><a href="#4、安装脚本" class="headerlink" title="4、安装脚本"></a>4、安装脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install youngjuning/juejin-spider/juejin</span></span><br></pre></td></tr></table></figure><p>执行 <code>juejin -h</code> 检查是否成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> juejin -h</span></span><br><span class="line">Usage of juejin:</span><br><span class="line">  -post string</span><br><span class="line">        文章编号 (default &quot;6859538537830858759&quot;)</span><br><span class="line">  -root string</span><br><span class="line">        文件保存的根目录 (default &quot;/Users/yangjunning/juejin&quot;)</span><br></pre></td></tr></table></figure><h3 id="在其他人的设备安装自己的脚本"><a href="#在其他人的设备安装自己的脚本" class="headerlink" title="在其他人的设备安装自己的脚本"></a>在其他人的设备安装自己的脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 在执行这个命令的时候，brew会自动去更新自己的formula仓库，会耗时几分钟。。。</span><br><span class="line">$ brew tap youngjuning/juejin-spider https://github.com/youngjuning/homebrew-juejin-spider.git</span><br><span class="line">// 下载、安装脚本</span><br><span class="line">$ brew install youngjuning/juejin-spider/juejin</span><br></pre></td></tr></table></figure><h2 id="超级赛亚人镇"><a href="#超级赛亚人镇" class="headerlink" title="超级赛亚人镇"></a>超级赛亚人镇</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bcd91045ddd8472f857afccf3dff1b15~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><blockquote><p>感谢你耐心看完了这篇文章，点赞等于学会，收藏等于精通，点赞加收藏是真爱！！！也期待在评论区和我讨论！！！</p></blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODU5Nzg0MTAzNjIxODIwNDI5" title="https://juejin.im/post/6859784103621820429">🏆 技术专题第二期 | 我与 Go 的那些事……<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/08/13/92pykLqY7NFWi3f.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://youngjuning.js.org/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="golang" scheme="http://youngjuning.js.org/categories/%E5%90%8E%E7%AB%AF/golang/"/>
    
    
      <category term="掘金专栏" scheme="http://youngjuning.js.org/tags/%E6%8E%98%E9%87%91%E4%B8%93%E6%A0%8F/"/>
    
      <category term="爬虫" scheme="http://youngjuning.js.org/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="掘金征文" scheme="http://youngjuning.js.org/tags/%E6%8E%98%E9%87%91%E5%BE%81%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>从零开发一款Deno插件并发布</title>
    <link href="http://youngjuning.js.org/2020/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E4%B8%80%E6%AC%BEDeno%E6%8F%92%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83/"/>
    <id>http://youngjuning.js.org/2020/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E4%B8%80%E6%AC%BEDeno%E6%8F%92%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83/</id>
    <published>2020-08-11T15:40:21.000Z</published>
    <updated>2020-08-11T15:40:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/08/12/TBuR1bJgl4azw5n.png" alt=""></p><p>大家好，我是俊宁，那个写<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODU0NTczMjIwNDMyMjQ4ODM5" title="https://juejin.im/post/6854573220432248839">《Deno从入门到跑路》<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODU2NDQ3OTgyOTA1MDY1NDg2" title="https://juejin.im/post/6856447982905065486">《基于 Deno 构建 HTTP Server 实践指南》<i class="fa fa-external-link"></i></span>的作者，本来入手Deno只是为了白嫖掘金的大礼包，为此还挑战了零基础一天入门Deno。但是Deno真香，前后又花了一周的业余时间学习了MongoDB写出了一篇自认很完整的 HTTP Server 实践指南（后端同学轻喷）。</p><a id="more"></a><p>本文是一篇介绍我如何开发了一款Deno插件并发布到Deno官方插件库的。插件的名字叫Duck，是一款自动扫描controller层并注册路由的小工具。如何使用这个插件请有需要的同学点击logo直达：</p><p><a href="https://deno.land/x/duck@v1.0.1"><img src="https://i.loli.net/2020/08/05/XBzRTIeoSnQc5vH.png" width="150"/></a></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>这个项目诞生的因为写<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODU2NDQ3OTgyOTA1MDY1NDg2" title="https://juejin.im/post/6856447982905065486">《基于 Deno 构建 HTTP Server 实践指南》<i class="fa fa-external-link"></i></span>时，为了实现自动扫描controller的功能。借鉴了廖雪峰大佬关于koa的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY2hhZWxsaWFvL2xlYXJuLWphdmFzY3JpcHQvYmxvYi9tYXN0ZXIvc2FtcGxlcy9ub2RlL3dlYi9rb2Evdmlldy1rb2EvY29udHJvbGxlci5qcw==" title="https://github.com/michaelliao/learn-javascript/blob/master/samples/node/web/koa/view-koa/controller.js">自动扫描controller<i class="fa fa-external-link"></i></span>，除了使用的语言不一样，实现细节和思路上也不太一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── addAbcControllers.ts</span><br><span class="line">├── addOakControllers.ts</span><br><span class="line">├── addServestControllers.ts</span><br><span class="line">├── mod.ts</span><br><span class="line">└── test</span><br><span class="line">    ├── abc</span><br><span class="line">    │   ├── controllers</span><br><span class="line">    │   │   └── helloworld.ts</span><br><span class="line">    │   └── server.ts</span><br><span class="line">    ├── oak</span><br><span class="line">    │   ├── controllers</span><br><span class="line">    │   │   └── helloworld.ts</span><br><span class="line">    │   └── server.ts</span><br><span class="line">    └── servest</span><br><span class="line">        ├── controllers</span><br><span class="line">        │   └── helloworld.ts</span><br><span class="line">        └── server.ts</span><br></pre></td></tr></table></figure><ul><li><code>mod.ts</code>：Deno官方推荐的插件入口文件</li><li><code>test</code>：一些测试的demo</li><li><code>add***Controllers.ts</code>：兼容的常见的Http Server中间件插件，自动判断，不需要用户传参数。</li></ul><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="自动扫描controller"><a href="#自动扫描controller" class="headerlink" title="自动扫描controller"></a>自动扫描controller</h3><blockquote><p>注意：以下是代码片段，源码请点击开头的那只鸭子查看。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> realPath = Deno.realPathSync(dir);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> dirEntry <span class="keyword">of</span> Deno.readDirSync(dir)) &#123;</span><br><span class="line">  <span class="keyword">if</span> (dirEntry.name.endsWith(<span class="string">&quot;.ts&quot;</span>) || dirEntry.name.endsWith(<span class="string">&quot;.js&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> controller = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">`file://<span class="subst">$&#123;realPath&#125;</span>/<span class="subst">$&#123;dirEntry.name&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> method = controller.method || <span class="string">&quot;get&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> api = controller.api ||</span><br><span class="line">    dirEntry.name.replace(<span class="regexp">/(.*\/)*([^.]+).*/ig</span>, <span class="string">&quot;$2&quot;</span>);</span><br><span class="line">    router[method](<span class="string">`/<span class="subst">$&#123;api&#125;</span>`</span>, controller.default);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据用户传递的 <code>dir</code> 获取的文件夹使用 <code>Deno.realPathSync</code> 获取真实的绝对路径，这里后边获取文件的时候用。</li><li>使用 <code>Deno.readDirSync</code> 接口读取文件夹下所有的文件，这里做了校验，必须是 <code>js</code> 或 <code>ts</code> 结尾的文件才可以。</li><li>使用 <code>import</code> 动态导入模块，这里有个坑就是不加 <code>file://</code> 前缀的话，实际运行会自动加<code>https://</code>。</li><li>这里假设如果controller没有导出name，自动读取文件名作为api名（这里借鉴了umijs）</li><li>最后动态把这个controller挂载到router上（router这个也是用户传递进来的）。</li></ul><h3 id="智能兼容"><a href="#智能兼容" class="headerlink" title="智能兼容"></a>智能兼容</h3><p>这个真没啥好说的，就是人工比对了这些插件带的独有的属性来识别是哪款插件的，目前支持 servest、oak、abc这三个关注度比较高的项目。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">router: <span class="built_in">any</span>, dir: <span class="built_in">string</span> = &quot;controllers&quot;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (router.handle) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">await</span> addServestControllers(router,dir);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(router.middleware) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">await</span> addAbcControllers(router,dir);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> addOakControllers(router,dir);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开箱友好"><a href="#开箱友好" class="headerlink" title="开箱友好"></a>开箱友好</h3><p>使用duck之后，默认会给两个路由路径，而且<code>checkHealth</code>这个是项目必备的接口了基本上（后端同学告诉我的）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">router.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">ctx: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.response.body = <span class="string">&quot;Hello Oak!&quot;</span>;</span><br><span class="line">&#125;).get(<span class="string">&quot;/checkHealth&quot;</span>, <span class="function">(<span class="params">ctx: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.response.body = <span class="string">&quot;The server is health. Just do it.&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="发布插件"><a href="#发布插件" class="headerlink" title="发布插件"></a>发布插件</h2><p>1、打开 <span class="exturl" data-url="aHR0cHM6Ly9kZW5vLmxhbmQveA==" title="https://deno.land/x">https://deno.land/x<i class="fa fa-external-link"></i></span></p><p>2、点击 Add a module</p><p><img src="https://i.loli.net/2020/08/12/9q5HPhsMZE6utyv.png" alt=""></p><p>3、按照下图的指引我们需要创建一个托管在GitHub的公有仓库</p><p><img src="https://i.loli.net/2020/08/12/3alkvjy14qoJsB6.png" alt=""></p><p>4、起一个好听的名字，趁早注册，不然要被 justjavac 大佬抢完了，可能是怕我这种水逼水插件吧，哈哈哈哈。</p><p><img src="https://i.loli.net/2020/08/12/SfHVQXqRdL2tF1C.png" alt=""></p><p>5、后边就是提示你去添加 GitHub 的 webhook，然后就发布成功了，我刚试了一下 superman 还没被注册。</p><p>最后狗头镇楼！！！</p><p><img src="https://i.loli.net/2020/08/11/eJUIZ5l3CT1LPtM.png" alt=""></p><h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote><p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p></blockquote><table><thead><tr><th align="center">微信</th><th align="center">投食</th><th align="center">公众号</th></tr></thead><tbody><tr><td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td></tr></tbody></table><p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/08/12/TBuR1bJgl4azw5n.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;大家好，我是俊宁，那个写&lt;a href=&quot;https://juejin.im/post/6854573220432248839&quot;&gt;《Deno从入门到跑路》&lt;/a&gt;和&lt;a href=&quot;https://juejin.im/post/6856447982905065486&quot;&gt;《基于 Deno 构建 HTTP Server 实践指南》&lt;/a&gt;的作者，本来入手Deno只是为了白嫖掘金的大礼包，为此还挑战了零基础一天入门Deno。但是Deno真香，前后又花了一周的业余时间学习了MongoDB写出了一篇自认很完整的 HTTP Server 实践指南（后端同学轻喷）。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【译】在 React Native TypeScript 项目中使用 defaultProps</title>
    <link href="http://youngjuning.js.org/2020/08/%E3%80%90%E8%AF%91%E3%80%91%E5%9C%A8%20React%20Native%20TypeScript%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%20defaultProps/"/>
    <id>http://youngjuning.js.org/2020/08/%E3%80%90%E8%AF%91%E3%80%91%E5%9C%A8%20React%20Native%20TypeScript%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%20defaultProps/</id>
    <published>2020-08-09T17:23:52.000Z</published>
    <updated>2020-08-09T17:23:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/08/10/aK152TMsqfjJlbZ.png" alt=""></p><p>随着时间的推移，TypeScript 已经改进了 <code>defaultProps</code> 相关的类型检查。本文将讲述最新的用法和旧版本中的用法以及一些问题。<span class="exturl" data-url="aHR0cDovL3QuY24vQWk5TUs1cjE=" title="http://t.cn/Ai9MK5r1">原文<i class="fa fa-external-link"></i></span></p><a id="more"></a><h2 id="TypeScript-3-0-以上"><a href="#TypeScript-3-0-以上" class="headerlink" title="TypeScript 3.0 以上"></a>TypeScript 3.0 以上</h2><p>TypeScript 特意<span class="exturl" data-url="aHR0cDovL3QuY24vQWk5NlIxdlA=" title="http://t.cn/Ai96R1vP">添加了对 defaultProps 的支持<i class="fa fa-external-link"></i></span>以此让类型检查符合你的预期：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line">interface Props &#123;</span><br><span class="line">  foo: string;</span><br><span class="line">  bar: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello <span class="keyword">extends</span> React.Component&lt;Props, &#123;&#125;&gt; &#123;</span><br><span class="line">  public <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    foo: <span class="string">&quot;default&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; bar, foo &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Text&gt;&#123; bar &#125;, &#123; foo.toUpperCase() &#125;&lt;/Text&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hello 这个组件可以在不传递 <code>foo</code> 属性的情况下渲染、编译正常：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Hello bar=<span class="string">&quot;Hello&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>尽管<code>foo</code>不是必须的，但是我们并没有把它被标记为可选的（例如 <code>foo?: string</code>）。标记为可选的意味着它可能是 <code>undefined</code>，但是实际上因为 <code>defaultProps</code> 提供了默认值，它绝对不可能变成 <code>undefined</code>。</li><li><code>defaultProps</code> 没有明确的类型声明。它的类型是由编译器推断的。</li><li>需要 <code>@types/react</code> 版本在 <code>16.4.11</code> 以上</li></ul><h2 id="TypeScript-2-1-到-3-0"><a href="#TypeScript-2-1-到-3-0" class="headerlink" title="TypeScript 2.1 到 3.0"></a>TypeScript 2.1 到 3.0</h2><p>你可以使用 TypeScript 的 <code>Partial type</code> 特性，这意味着当前的接口只会实现被包裹的接口的一部分，这样我们可以随意拓展 <code>defaultProps</code> 而不需要改其他任何地方。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;reac&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line">interface Props &#123;</span><br><span class="line">  foo?: string;</span><br><span class="line">  bar: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>, </span>&#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps: Partial&lt;Props&gt; = &#123;</span><br><span class="line">    foo: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ul><li>因为 TypeScript 在检查 JSX 属性时只考虑了 props，你必须把有默认值的 props 标记为可选的</li><li>当使用 <code>strictNullChecks</code> 时，<code>this.props.foo</code> 的值可能会是 <code>undefined</code>。你可以使用非空断言（例如 <code>this.props.foo!</code>）或者类型守护（例如 <code>if (this.props.foo) &#123;...&#125;</code>）来移除 <code>undefined</code>。这是非常恼人的，因为实际上它是有默认值，所以绝对不会是 <code>undefined</code>，但是 TS 并不理解这个逻辑。这也是 TS 3.0 专门支持 <code>defaultProps</code> 的主要原因之一。</li></ul><h2 id="函数组件的-defaultProps"><a href="#函数组件的-defaultProps" class="headerlink" title="函数组件的 defaultProps"></a>函数组件的 defaultProps</h2><p>您也可以在函数组件上使用 <code>defaultProps</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line">interface Props &#123;</span><br><span class="line">  foo: string;</span><br><span class="line">  bar: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent: React.SFC&lt;Props&gt; = <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">  &lt;Text&gt;</span><br><span class="line">    Hello, &#123;props.foo&#125;, &#123;props.bar&#125;</span><br><span class="line">  &lt;/Text&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">MyComponent.defaultProps = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyComponent</span><br></pre></td></tr></table></figure><blockquote><p>注意：你不必再使用 <code>Partial&lt;Props&gt;</code>，因为 React.SFC 已经在 TS 2.1+ 被指定为 partial.</p></blockquote><p>另一个可选的方案是解构你的 props 参数然后直接符默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line">interface Props &#123;</span><br><span class="line">  foo: string;</span><br><span class="line">  bar: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent: React.SFC&lt;Props&gt; = <span class="function">(<span class="params">&#123; foo = <span class="string">&#x27;default&#x27;</span>, bar &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Text&gt;</span><br><span class="line">      Hello, &#123;foo&#125;, &#123;bar&#125;</span><br><span class="line">    &lt;/Text&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><table><thead><tr><th align="center">作者微信</th><th align="center">知识星球</th><th align="center">赞赏作者</th></tr></thead><tbody><tr><td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td><td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td><td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/08/10/aK152TMsqfjJlbZ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;随着时间的推移，TypeScript 已经改进了 &lt;code&gt;defaultProps&lt;/code&gt; 相关的类型检查。本文将讲述最新的用法和旧版本中的用法以及一些问题。&lt;a href=&quot;http://t.cn/Ai9MK5r1&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hybrid" scheme="http://youngjuning.js.org/categories/Hybrid/"/>
    
      <category term="React Native" scheme="http://youngjuning.js.org/categories/Hybrid/React-Native/"/>
    
    
      <category term="翻译" scheme="http://youngjuning.js.org/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="TypeScript" scheme="http://youngjuning.js.org/tags/TypeScript/"/>
    
      <category term="掘金专栏" scheme="http://youngjuning.js.org/tags/%E6%8E%98%E9%87%91%E4%B8%93%E6%A0%8F/"/>
    
      <category term="defaultProps" scheme="http://youngjuning.js.org/tags/defaultProps/"/>
    
  </entry>
  
  <entry>
    <title>精读CSS揭秘之背景与边框</title>
    <link href="http://youngjuning.js.org/2020/08/%E7%B2%BE%E8%AF%BBCSS%E6%8F%AD%E7%A7%98%E4%B9%8B%E8%83%8C%E6%99%AF%E4%B8%8E%E8%BE%B9%E6%A1%86/"/>
    <id>http://youngjuning.js.org/2020/08/%E7%B2%BE%E8%AF%BBCSS%E6%8F%AD%E7%A7%98%E4%B9%8B%E8%83%8C%E6%99%AF%E4%B8%8E%E8%BE%B9%E6%A1%86/</id>
    <published>2020-08-06T00:30:35.000Z</published>
    <updated>2020-08-06T00:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/08/08/NbqGOWrvzUhHY3g.png" alt=""></p><a id="more"></a><p>CSS对于前端工程师来说是基础中的基础，如果基础不扎实，就得日常跪求UED给图来实现效果。</p><blockquote><p>《CSS揭秘》这本书读来让人有满满的安全感，LEA VEROU 是CSS方面的专家，对CSS3的设计和未来的发展了解很多。描述的47个css技巧也很接地气，值得一读再读。</p></blockquote><blockquote><p>本文是精读《CSS揭秘》系列文章的第一篇，预计有8篇，以一（kan）周（wo）一（xin）篇（qing）的进度发布。</p></blockquote><blockquote><p>如无特殊说明，样式对应的html结构都是 <code>&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code></p></blockquote><blockquote><p>由于掘金限制，无法嵌入 iframe 标签，我把 codepen 的示例链接都附在了每一节，方便大家边读边练。</p></blockquote><h2 id="半透明边框"><a href="#半透明边框" class="headerlink" title="半透明边框"></a>半透明边框</h2><blockquote><p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9LS3pLcm9C" title="https://codepen.io/youngjuning/pen/KKzKroB">codepen<i class="fa fa-external-link"></i></span></p></blockquote><p>CSS 背景的工作原理是默认延伸到border区域的，CSS3 中，我们可以使用 <code>background-clip</code> 属性来调整这个默认行为带来的不便。将它设为 <code>padding-box</code>，便可以不让背景侵入边框所在的范围。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/08/09/WzDYntbHJx49kaI.png" style="zoom:50%;" /><h2 id="多重边框"><a href="#多重边框" class="headerlink" title="多重边框"></a>多重边框</h2><blockquote><p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9yTmVhT29i" title="https://codepen.io/youngjuning/pen/rNeaOob">codepen<i class="fa fa-external-link"></i></span></p></blockquote><h3 id="box-shadow-方案"><a href="#box-shadow-方案" class="headerlink" title="box-shadow 方案"></a>box-shadow 方案</h3><ol><li>利用 <code>box-shadow</code> 属性第四个参数（扩张半径）控制投影面积，其他两个偏移量和模糊半径都设置为。</li><li>利用 <code>box-shadow</code> 支持逗号分隔的语法，我们可以创建任意数量的投影。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#655</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> deeppink,</span><br><span class="line">    <span class="number">0</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/08/PzA4XJSi8eME7UK.png" alt=""></p><p>注意：</p><ol><li>投影的行为跟外边框不完全一致，因为它不会影响布局，而且也不会受到 <code>box-sizing</code> 属性的影响。不过，你还是可以通过内边距或外边距（这取决于投影是内嵌还是外扩的）来额外模拟出边框</li><li>上述代码创建出的假边框出现在元素的<strong>外圈</strong>。它们并不会响应鼠标事件，比如悬停或点击。如果这一点非常重要，你可以给 <code>box-shadow</code> 属性加上 <code>inset</code> 关键字，来使投影绘制在元素的<strong>内圈</strong>。请注意，此时你需要增加额外的内边距来腾出足够的空隙。</li></ol><h3 id="outline-方案"><a href="#outline-方案" class="headerlink" title="outline 方案"></a>outline 方案</h3><p>如果你只需要两层边框，那就可以先设置一层常规边框，再加上 <code>outline</code>（描边）属性来产生外层的边框。</p><p>该方案还可以利用 <code>outline-offset</code> 属性来控制描边和元素边缘之间的距离（可以为负值），下面代码的效果就是一个缝边的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">1px</span> dashed deeppink;</span><br><span class="line">  <span class="attribute">outline-offset</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/08/Orcg4ytVRuKNbGS.png" alt=""></p><h2 id="灵活的背景定位"><a href="#灵活的背景定位" class="headerlink" title="灵活的背景定位"></a>灵活的背景定位</h2><blockquote><p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9XTndibVJq" title="https://codepen.io/youngjuning/pen/WNwbmRj">codepen<i class="fa fa-external-link"></i></span></p></blockquote><h3 id="background-position-的扩展语法方案"><a href="#background-position-的扩展语法方案" class="headerlink" title="background-position 的扩展语法方案"></a>background-position 的扩展语法方案</h3><p>在CSS3中，<code>background-position</code> 属性已经得到扩展，它允许我们制定背景图片<strong>距离任意角的偏移量</strong>，只要我们<strong>在偏移量前面加上指定关键字</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(https://i.loli.net/<span class="number">2020</span>/<span class="number">08</span>/<span class="number">08</span>/jWNPK6e3ucf47LV.png) no-repeat</span><br><span class="line">    right bottom/<span class="number">50px</span> <span class="number">#6a99bf</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: right <span class="number">15px</span> bottom <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/08/yIVnde16BwN3bSk.png" alt=""></p><h3 id="background-origin-方案"><a href="#background-origin-方案" class="headerlink" title="background-origin 方案"></a>background-origin 方案</h3><p><code>background-origin</code> 是用来控制背景起始点的属性，默认是以<code>padding-box</code> 为准的，如果我们想让背景的的起点以内容区的边缘为基准（也就是说，此时背景图片距离边角的偏移量就跟内边距保持一致了）。</p><p>如果你想要背景偏移量与容器的内边距一致，那么就可以使用这个方案，代码实现如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(https://i.loli.net/<span class="number">2020</span>/<span class="number">08</span>/<span class="number">08</span>/jWNPK6e3ucf47LV.png) no-repeat</span><br><span class="line">    right bottom/<span class="number">50px</span> <span class="number">#6a99bf</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-origin</span>: content-box;</span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/08/CufS4jGV75qhgJL.png" alt=""></p><h3 id="calc-background-position-方案"><a href="#calc-background-position-方案" class="headerlink" title="calc() + background-position 方案"></a>calc() + background-position 方案</h3><p>calc() 函数可以传入形似 <code>100% - 20px</code> 的表达式（注意，<code>-</code> 两边必须有空格。）。我们可以利用这个特性来结合 <code>background-position</code> 以右上角为基准定位：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(https://i.loli.net/<span class="number">2020</span>/<span class="number">08</span>/<span class="number">08</span>/jWNPK6e3ucf47LV.png) no-repeat</span><br><span class="line">    right bottom/<span class="number">50px</span> <span class="number">#6a99bf</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">10px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/08/yIVnde16BwN3bSk.png" alt=""></p><h2 id="边框内圆角"><a href="#边框内圆角" class="headerlink" title="边框内圆角"></a>边框内圆角</h2><blockquote><p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9aRVdZTnhl" title="https://codepen.io/youngjuning/pen/ZEWYNxe">codepen<i class="fa fa-external-link"></i></span></p></blockquote><p>有时，我们需要一个容器，只在内侧有圆角，而边框或描边的四个角在外部仍然保持直角的形状。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#d9c2bc</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#655</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">10px</span> solid <span class="number">#655</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/08/jesrqO2BW1yXuDp.png" alt=""></p><p>能实现以上的效果，主要得益于两个事实：描边（outline）不会跟着元素的圆角走（因而显示出直角），但<code>box-shadow</code>却是会的。</p><p>我们把这两者叠加到一起，<code>box-shadow</code> 会刚好填补描边和容器圆角之间的空隙，这两者的组合达成了我们想要的效果。</p><blockquote><p>注意：<code>box-shadow</code> 的颜色需要和 <code>outline</code> 保持一致，<code>box-shadow</code> 的扩张半径设为<code>outline</code>的一半即可。</p></blockquote><h2 id="条纹背景"><a href="#条纹背景" class="headerlink" title="条纹背景"></a>条纹背景</h2><p>条纹背景在CSS中是基于 <code>linear-gradient</code>、<code>repeat-linear-gradient</code> 实现的，本节为大家展示了一些可快速食用的例子。</p><h3 id="1、德国国旗🇩🇪"><a href="#1、德国国旗🇩🇪" class="headerlink" title="1、德国国旗🇩🇪"></a>1、德国国旗🇩🇪</h3><blockquote><p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9nT3JiVkdv" title="https://codepen.io/youngjuning/pen/gOrbVGo">codepen<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">130px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">78px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    #<span class="number">000</span> <span class="number">0</span>,</span><br><span class="line">    #<span class="number">000</span> <span class="number">33.3%</span>,</span><br><span class="line">    #cc2a1d <span class="number">33.3%</span>,</span><br><span class="line">    #cc2a1d <span class="number">66.6%</span>,</span><br><span class="line">    #f8cf47 <span class="number">66.6%</span>,</span><br><span class="line">    #f8cf47 <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/Flag_of_Germany.svg/260px-Flag_of_Germany.svg.png" alt=""></p><h3 id="2、法国国旗🇫🇷"><a href="#2、法国国旗🇫🇷" class="headerlink" title="2、法国国旗🇫🇷"></a>2、法国国旗🇫🇷</h3><blockquote><p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9nT3JiVkdv" title="https://codepen.io/youngjuning/pen/gOrbVGo">codepen<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">130px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">78px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    to right,</span><br><span class="line">    #<span class="number">002590</span> <span class="number">0</span>,</span><br><span class="line">    #<span class="number">002590</span> <span class="number">33.3%</span>,</span><br><span class="line">    #ffffff <span class="number">33.3%</span>,</span><br><span class="line">    #ffffff <span class="number">66.6%</span>,</span><br><span class="line">    #db3c3f <span class="number">66.6%</span>,</span><br><span class="line">    #db3c3f <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Flag_of_France.svg/260px-Flag_of_France.svg.png" alt=""></p><h3 id="3、地址栏红蓝分割线"><a href="#3、地址栏红蓝分割线" class="headerlink" title="3、地址栏红蓝分割线"></a>3、地址栏红蓝分割线</h3><blockquote><p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9tZFB5WkJl" title="https://codepen.io/youngjuning/pen/mdPyZBe">codepen<i class="fa fa-external-link"></i></span></p></blockquote><p>代码搬运自vant的联系人组件，使用了循环式的加强版<code>linear-gradient</code>：<code>repeating-linear-gradient</code>，它的色标是无限循环重复的，直到铺满整个背景。</p><p>重复线性渐变完美适用于——条纹效果！这得益于它们可以无限循环的天赋是，一个渐变图案就可以自动重复并铺满整个背景。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="comment">/* 这里的语法在CSS4中可能会被简化 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">    -<span class="number">45deg</span>,</span><br><span class="line">    #ff6c6c <span class="number">0</span>,</span><br><span class="line">    #ff6c6c <span class="number">20%</span>,</span><br><span class="line">    transparent <span class="number">0</span>,</span><br><span class="line">    transparent <span class="number">25%</span>,</span><br><span class="line">    #<span class="number">1989</span>fa <span class="number">0</span>,</span><br><span class="line">    #<span class="number">1989</span>fa <span class="number">45%</span>,</span><br><span class="line">    transparent <span class="number">0</span>,</span><br><span class="line">    transparent <span class="number">50%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/09/d9olAseI1npxgFw.png" alt=""></p><h3 id="4、老式信封边框样式"><a href="#4、老式信封边框样式" class="headerlink" title="4、老式信封边框样式"></a>4、老式信封边框样式</h3><blockquote><p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9aRVdHWUtO" title="https://codepen.io/youngjuning/pen/ZEWGYKN">codepen<i class="fa fa-external-link"></i></span></p></blockquote><p>使用 <code>border-image</code> + <code>repeating-linear-gradient</code> 很容易实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  My name is 俊宁</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: padding-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-image</span>: <span class="number">5</span></span><br><span class="line">    <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      -<span class="number">45deg</span>,</span><br><span class="line">      #ff6c6c <span class="number">0</span>,</span><br><span class="line">      #ff6c6c <span class="number">10%</span>,</span><br><span class="line">      transparent <span class="number">0</span>,</span><br><span class="line">      transparent <span class="number">15%</span>,</span><br><span class="line">      #<span class="number">1989</span>fa <span class="number">0</span>,</span><br><span class="line">      #<span class="number">1989</span>fa <span class="number">25%</span>,</span><br><span class="line">      transparent <span class="number">0</span>,</span><br><span class="line">      transparent <span class="number">30%</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>border-image 第一个值不能带单位，否则没有效果！</p></blockquote><p><img src="https://i.loli.net/2020/08/09/IXDHzKROQhyLsxu.png" alt=""></p><h3 id="5、🐜蚂蚁行军边框"><a href="#5、🐜蚂蚁行军边框" class="headerlink" title="5、🐜蚂蚁行军边框"></a>5、🐜蚂蚁行军边框</h3><blockquote><p>view demo on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL3lvdW5nanVuaW5nL3Blbi9CYUtOeW14" title="https://codepen.io/youngjuning/pen/BaKNymx">codepen<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(white, white) padding-box,</span><br><span class="line">    <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">        -<span class="number">45deg</span>,</span><br><span class="line">        black <span class="number">0</span>,</span><br><span class="line">        black <span class="number">25%</span>,</span><br><span class="line">        transparent <span class="number">0</span>,</span><br><span class="line">        transparent <span class="number">50%</span></span><br><span class="line">      )</span><br><span class="line">      <span class="number">0%</span> <span class="number">0%</span> / <span class="number">0.6em</span> <span class="number">0.6em</span>;</span><br><span class="line">  <span class="attribute">animation</span>: ants <span class="number">10s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> ants &#123;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先要设置容器的边框宽度为1px，颜色要设置成透明，以便稍后设置的背景能够显示出来。</li><li>可以设置多重背景，并用逗号隔开，设置在前面的总是会覆盖后面的。这里设置了两层背景，第一层背景使用线性渐变<code>linear-gradient</code>设置了从白色到白色的渐变，<code>padding-box</code>是<code>background-clip</code>属性的值，表示背景图片绘制在内边距方框内。其实就是绘制了一个白色的块，用来遮盖第二层背景的中间部分，保留边框部分。</li><li>把 <code>background-size</code> 改为某个合适的值。</li><li>最后将背景图片的位置从左上角（0% 0%）逐渐过渡到右下角（100% 100%），看起来的效果就像边框动起来了一样。</li></ul><blockquote><p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/08/08/NbqGOWrvzUhHY3g.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
      <category term="掘金专栏" scheme="http://youngjuning.js.org/tags/%E6%8E%98%E9%87%91%E4%B8%93%E6%A0%8F/"/>
    
      <category term="CSS" scheme="http://youngjuning.js.org/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker和Jenkins自动构建Android项目</title>
    <link href="http://youngjuning.js.org/2020/08/%E5%9F%BA%E4%BA%8EDocker%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAAndroid%E9%A1%B9%E7%9B%AE/"/>
    <id>http://youngjuning.js.org/2020/08/%E5%9F%BA%E4%BA%8EDocker%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAAndroid%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-08-04T11:16:43.000Z</published>
    <updated>2020-08-04T11:16:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/08/09/M9PfYQahL2F5Z8C.png" alt=""></p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTExMjQzMDAxODY5I2hlYWRpbmctMTE=" title="https://juejin.im/post/6844904111243001869#heading-11">Docker<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTUyMDAzMjQ4MTM2" title="https://juejin.im/post/6844904152003248136">Jenkins<i class="fa fa-external-link"></i></span></li></ul><h2 id="android-sdk"><a href="#android-sdk" class="headerlink" title="android-sdk"></a>android-sdk</h2><h3 id="安装-android-sdk"><a href="#安装-android-sdk" class="headerlink" title="安装 android-sdk"></a>安装 android-sdk</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt update | apt install android-sdk</span></span><br></pre></td></tr></table></figure><h3 id="复制到-jenkins-volume"><a href="#复制到-jenkins-volume" class="headerlink" title="复制到 jenkins volume"></a>复制到 jenkins volume</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp -R /usr/lib/android-sdk/ /var/lib/docker/volume/jenkins_home/_data/</span></span><br></pre></td></tr></table></figure><p>android-sdk 的安装位置可以通过 <code>adb --version</code> 查看：</p><img src="https://user-gold-cdn.xitu.io/2020/5/9/171f7fae7cf4ff7a?w=864&h=230&f=png&s=176444" alt="" style="zoom: 75%;" /><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>将下面的的配置加入到 <code>~/.bash_profile</code> 或 <code>~/.zshrc</code> 中，并执行 <code>srouce ~/.bash_profile</code> 或 <code>srouce ~/.zshrc</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME&#x3D;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;jenkins_home&#x2F;_data&#x2F;android-sdk</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;tools</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;tools&#x2F;bin</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;platform-tools</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;emulator</span><br></pre></td></tr></table></figure><h2 id="sdkmagager"><a href="#sdkmagager" class="headerlink" title="sdkmagager"></a>sdkmagager</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt update | apt install snapd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> snap install androidsdk</span></span><br></pre></td></tr></table></figure><h2 id="accepted-licences"><a href="#accepted-licences" class="headerlink" title="accepted licences"></a>accepted licences</h2><blockquote><p>如果不授权会报错： Failed to install the following Android SDK packages as some licences have not been accepted.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yes | sdkmanager --sdk_root=<span class="variable">$&#123;ANDROID_HOME&#125;</span> --licenses</span></span><br></pre></td></tr></table></figure><blockquote><p>如果不指定 <code>--sdk_root=$&#123;ANDROID_HOME&#125;</code> 会报错：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjA3MzA2MTUvc2RrbWFuYWdlci13YXJuaW5nLWNvdWxkLW5vdC1jcmVhdGUtc2V0dGluZy1qYXZhLWxhbmctaWxsZWdhbGFyZ3VtZW50ZXhjZXB0aQ==" title="https://stackoverflow.com/questions/60730615/sdkmanager-warning-could-not-create-setting-java-lang-illegalargumentexcepti">SDKmanager : Warning: Could not create setting. java.lang.IllegalArgumentException<i class="fa fa-external-link"></i></span></p></blockquote><h2 id="Jenkins-ANDROID-HOME"><a href="#Jenkins-ANDROID-HOME" class="headerlink" title="Jenkins ANDROID_HOME"></a>Jenkins ANDROID_HOME</h2><p>进入 <strong>系统管理</strong> -&gt; <strong>系统配置</strong> -&gt; <strong>全局属性</strong> 新增环境变量 <code>ANDROID_HOME</code>：</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/9/171f7fae8171f318?w=1980&h=486&f=png&s=65179" alt=""></p><h2 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h2><p>然后你就可以为所欲为了！！！</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/9/171f7fae81791d69?w=1890&h=1120&f=png&s=263338" alt=""></p><h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote><p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p></blockquote><table><thead><tr><th align="center">微信</th><th align="center">投食</th><th align="center">公众号</th></tr></thead><tbody><tr><td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td></tr></tbody></table><p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/08/09/M9PfYQahL2F5Z8C.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="http://youngjuning.js.org/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Jenkins" scheme="http://youngjuning.js.org/categories/%E8%BF%90%E7%BB%B4/Jenkins/"/>
    
    
      <category term="android" scheme="http://youngjuning.js.org/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>基于 Deno 构建 HTTP Server 实践指南</title>
    <link href="http://youngjuning.js.org/2020/07/%E5%9F%BA%E4%BA%8E-Deno-%E6%9E%84%E5%BB%BA-HTTP-Server-%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/"/>
    <id>http://youngjuning.js.org/2020/07/%E5%9F%BA%E4%BA%8E-Deno-%E6%9E%84%E5%BB%BA-HTTP-Server-%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</id>
    <published>2020-07-28T22:55:25.000Z</published>
    <updated>2020-07-28T22:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/07/29/Vn7jhOu3Z2c6pTe.png" alt=""></p><a id="more"></a><p>大家好，我是俊宁，这是一篇介绍如何使用 Deno 构建 HTTP Server 的实践指南，如果你还不了解Deno是什么，可以移步我的另一篇 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZjFkNDA2NWYyNjVkYTIyZDgzNDRkYzY=" title="https://juejin.im/post/5f1d4065f265da22d8344dc6">Deno入门文章<i class="fa fa-external-link"></i></span>。</p><p>本文还使用到了 Docker，如果不熟悉可以看一下 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTExMjQzMDAxODY5" title="https://juejin.im/post/6844904111243001869">一个前端工程师的Docker学习笔记【持续更新】<i class="fa fa-external-link"></i></span>。</p><p>mongodb 入门可以看一下 <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9tb25nb2RiL21vbmdvZGItdHV0b3JpYWwuaHRtbA==" title="https://www.runoob.com/mongodb/mongodb-tutorial.html">MongoDB 教程<i class="fa fa-external-link"></i></span>。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>deno: 使用 <code>deno -V</code> 查看是否正确安装了 deno</li><li>VSCode Deno插件: 支持 Deno 开发的 VSCode 插件</li><li>VSCode REST Client插件: 直接在VSCode中进行接口测试的插件</li></ul><h2 id="基础体验"><a href="#基础体验" class="headerlink" title="基础体验"></a>基础体验</h2><h3 id="官方示例解析"><a href="#官方示例解析" class="headerlink" title="官方示例解析"></a>官方示例解析</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; serve &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std/http/server.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = serve(&#123; port: <span class="number">8080</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;http://localhost:8080/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个会等待每一个请求的 for 循环</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> req <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.url);</span><br><span class="line">  req.respond(&#123; body: <span class="string">&quot;Hello World\n&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们来看看上面这段代码做了什么:</p><ol><li><p>首先我们引入 server 模块: 这里使用了 ES 模块，第三方模块通过 URL 导入。</p><blockquote><p>注意：Deno 不支持 <code>require</code> 语法。模块也不是集中管理的，而是通过 URL 导入。</p></blockquote></li><li><p>使用 <code>serve</code> 函数初始化一个 HTTP 服务</p></li><li><p>使用 <span class="exturl" data-url="aHR0cDovL3MwZGV2ZWxvcGVyMG1vemlsbGEwb3JnLmljb3B5LnNpdGUvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9mb3ItYXdhaXQuLi5vZg==" title="http://s0developer0mozilla0org.icopy.site/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of">for-await-of<i class="fa fa-external-link"></i></span> 语法监听请求，<code>for-await-of</code> 语句创建一个循环，循环遍历异步可迭代对象以及同步可迭代对象。</p><blockquote><p>注意：Deno不再捆绑在 async 函数之中，所以可以全局使用</p></blockquote></li></ol><h3 id="解析请求体"><a href="#解析请求体" class="headerlink" title="解析请求体"></a>解析请求体</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> decoder = <span class="keyword">new</span> TextDecoder(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> data: <span class="built_in">Uint8Array</span> = <span class="keyword">await</span> Deno.readAll(req.body);</span><br><span class="line"><span class="keyword">const</span> body = decoder.decode(data) ? <span class="built_in">JSON</span>.parse(decoder.decode(data)) : &#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="简易REST-API"><a href="#简易REST-API" class="headerlink" title="简易REST API"></a>简易REST API</h3><p>1、这个Demo提供了两个api，分别是从文件读取数据返回和从网络获取数据并返回。结合数据库的放到后面使用框架的部分讲解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; serve &#125; <span class="keyword">from</span> <span class="string">&quot;./deps.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = serve(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;http://localhost:8080/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> juejin = <span class="string">&quot;https://xiaoce-timeline-api-ms.juejin.im/v1/getListByLastTime?pageNum=1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> req <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.url === <span class="string">&quot;/books&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="keyword">await</span> Deno.readFile(<span class="string">&quot;./books.json&quot;</span>);</span><br><span class="line">    req.respond(&#123; <span class="attr">body</span>: body &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.url === <span class="string">&quot;/juejin&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(juejin);</span><br><span class="line">    <span class="keyword">const</span> jsonData = <span class="keyword">await</span> response.json();</span><br><span class="line">    req.respond(&#123;</span><br><span class="line">      body: <span class="built_in">JSON</span>.stringify(jsonData), <span class="comment">// body 不能接受对象</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、执行 <code>deno run --allow-read --allow-net index.ts</code></p><p>3、使用 VSCode  REST Client 访问一下试试：</p><blockquote><p>注意：如果 localhost 请求失败，请使用 ip 的形式。4090ok</p></blockquote><img src="https://i.loli.net/2020/07/30/ibwyIrKvjJld5GQ.png" /><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>截止2020年7月30日，GitHub比较热门的 HTTP Server 框架有5个，分别是 oak、servest、deno-drash、abc、pogo（排名分先后）。</p><p>起初我也和大家一样面对这么多框架不知如何选，直到使用了<span class="exturl" data-url="aHR0cHM6Ly9zdGFyLWhpc3RvcnkudDl0LmlvLw==" title="https://star-history.t9t.io/">Star History<i class="fa fa-external-link"></i></span> 对比了他们的star趋势后，毫无犹豫的选择了 oak。</p><p>但是本着技术探究的角度，我们还是分别体验一下这5个框架的 Hello World，然后再利用oak进行实战演习。</p><p><a href="https://star-history.t9t.io/#oakserver/oak&keroxp/servest&drashland/deno-drash&zhmushan/abc&sholladay/pogo"><img src="https://i.loli.net/2020/08/01/w6FZXsfHQ4gydcK.png" style="zoom:45%;" /></a></p><h3 id="Oak"><a href="#Oak" class="headerlink" title="Oak"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29ha3NlcnZlci9vYWs=" title="https://github.com/oakserver/oak">Oak<i class="fa fa-external-link"></i></span></h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Oak 是最有前景的 Deno HTTP server 中间件框架，包含一个 路由中间件，目前能找到的社区资源最多。这款框架的灵感来自 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tvYWpzL2tvYQ==" title="https://github.com/koajs/koa">Koa<i class="fa fa-external-link"></i></span>，路由中间件的灵感来自 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tvYWpzL3JvdXRlci8=" title="https://github.com/koajs/router/">@koa/router<i class="fa fa-external-link"></i></span>。</p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p>创建一个 <code>server.ts</code> 文件并编写一个简单的 server：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Application &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/oak/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Application();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.response.body = <span class="string">&quot;Hello Oak!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`🦕 oak server running at http://127.0.0.1:8001/ 🦕`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> app.listen(<span class="string">&quot;127.0.0.1:8001&quot;</span>);</span><br></pre></td></tr></table></figure><p>执行 <code>deno run --allow-net server.ts</code>开启服务，并使用 VSCode REST Client 测试：</p><p><img src="https://i.loli.net/2020/07/30/8q3AKy4EVLBb6Q1.png" alt=""></p><p>编写一个拥有两个自定义中间件的Demo:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Application &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/oak/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Application();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logger</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="keyword">const</span> rt = ctx.response.headers.get(<span class="string">&quot;X-Response-Time&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;ctx.request.method&#125;</span> <span class="subst">$&#123;ctx.request.url&#125;</span> - <span class="subst">$&#123;rt&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Timing</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start;</span><br><span class="line">  ctx.response.headers.set(<span class="string">&quot;X-Response-Time&quot;</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hello World!</span></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.response.body = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`🦕 oak server running at http://127.0.0.1:8889/ 🦕`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> app.listen(&#123; port: <span class="number">8889</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="servest"><a href="#servest" class="headerlink" title="servest"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tlcm94cC9zZXJ2ZXN0" title="https://github.com/keroxp/servest">servest<i class="fa fa-external-link"></i></span></h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>用于Deno的渐进式http服务器</p></blockquote><p><code>Servest</code> 是一个适用于 Deno 的 http 模块，它由三个主要的 HTTP 协议的 API 组成</p><ul><li>App API: 通用HTTP路由服务器</li><li>Server API: 处理的 HTTP/1.1 请求的低级的 HTTP API</li><li>Agent API: 处理 HTTP/1.1 的 Keep-Alive 连接的低级API</li></ul><p>为了实验和进步，<code>Servest</code> 在 <span class="exturl" data-url="aHR0cHM6Ly9kZW5vLmxhbmQvc3RkL2h0dHA=" title="https://deno.land/std/http">std/http<i class="fa fa-external-link"></i></span> 之外实现了自己的 HTTP/1.1 server。</p><h4 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h4><p>与 std/http 高度兼容：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;https://servestjs.org/@v1.1.1/mod.ts&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = createApp();</span><br><span class="line">app.handle(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (req) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> req.respond(&#123;</span><br><span class="line">    status: <span class="number">200</span>,</span><br><span class="line">    headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">      <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    body: <span class="string">&quot;Hello, Servest!&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(&#123; port: <span class="number">8899</span> &#125;);</span><br></pre></td></tr></table></figure><p>专为实际业务而设计：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;https://servestjs.org/@v1.1.1/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp();</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/post&quot;</span>, <span class="keyword">async</span> (req) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> body = <span class="keyword">await</span> req.json();</span><br><span class="line">  <span class="keyword">await</span> req.respond(&#123;</span><br><span class="line">    status: <span class="number">200</span>,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(body),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(&#123; port: <span class="number">8888</span> &#125;);</span><br></pre></td></tr></table></figure><p>支持websoket：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;https://servestjs.org/@v1.1.1/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp();</span><br><span class="line"></span><br><span class="line">app.ws(<span class="string">&quot;/ws&quot;</span>, <span class="keyword">async</span> (sock) =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> msg <span class="keyword">of</span> sock) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> msg === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;[index]&quot;</span>, msg);</span><br><span class="line">      <span class="comment">// handle messages...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(&#123; port: <span class="number">8888</span> &#125;);</span><br></pre></td></tr></table></figure><p>内置 jsx/tsx 支持，无需任何配置：</p><blockquote><p>默认情况下，JSX文件（<code>.jsx</code>，<code>.tsx</code>）将由 <code>React.createElement()</code>转换。因此，您必须在jsx/tsx文件的头上导入React。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @deno-types=&quot;https://servestjs.org/@v1.1.1/types/react/index.d.ts&quot;</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;https://dev.jspm.io/react/index.js&quot;</span>;</span><br><span class="line"><span class="comment">// @deno-types=&quot;https://servestjs.org/@v1.1.1/types/react-dom/server/index.d.ts&quot;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOMServer <span class="keyword">from</span> <span class="string">&quot;https://dev.jspm.io/react-dom/server.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;https://servestjs.org/@v1.1.1/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp();</span><br><span class="line"></span><br><span class="line">app.handle(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (req) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> req.respond(&#123;</span><br><span class="line">    status: <span class="number">200</span>,</span><br><span class="line">    headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">      <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;text/html; charset=UTF-8&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    body: ReactDOMServer.renderToString(</span><br><span class="line">      &lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">          &lt;meta charSet=<span class="string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="line">          &lt;title&gt;servest&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">          &lt;h1&gt;Hello Servest!&lt;/h1&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">      &lt;/html&gt;,</span><br><span class="line">    ),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(&#123; port: <span class="number">8899</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="deno-drash"><a href="#deno-drash" class="headerlink" title="deno-drash"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RyYXNobGFuZC9kZW5vLWRyYXNo" title="https://github.com/drashland/deno-drash">deno-drash<i class="fa fa-external-link"></i></span></h3><p>A REST microframework for Deno’s HTTP server with zero dependencies.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Drash &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/drash@v1.x/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HomeResource <span class="keyword">extends</span> Drash.Http.Resource &#123;</span><br><span class="line">  <span class="keyword">static</span> paths = [<span class="string">&quot;/&quot;</span>];</span><br><span class="line">  <span class="keyword">public</span> GET() &#123;</span><br><span class="line">    <span class="built_in">this</span>.response.body = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.response;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> Drash.Http.Server(&#123;</span><br><span class="line">  response_output: <span class="string">&quot;text/html&quot;</span>,</span><br><span class="line">  resources: [HomeResource],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.run(&#123;</span><br><span class="line">  hostname: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">  port: <span class="number">8888</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`🦕 drash server running at http://127.0.0.1:8888/ 🦕`</span>);</span><br></pre></td></tr></table></figure><h3 id="abc"><a href="#abc" class="headerlink" title="abc"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pobXVzaGFuL2FiYw==" title="https://github.com/zhmushan/abc">abc<i class="fa fa-external-link"></i></span></h3><p>A better Deno framework to create web application.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Application &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/abc@v1/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Application();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/hello&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, Abc!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.start(&#123; port: <span class="number">8888</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`🦕 abc server running at http://127.0.0.1:8888/ 🦕`</span>);</span><br></pre></td></tr></table></figure><h3 id="Pogo"><a href="#Pogo" class="headerlink" title="Pogo"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nob2xsYWRheS9wb2dv" title="https://github.com/sholladay/pogo">Pogo<i class="fa fa-external-link"></i></span></h3><p>Pogo是用于编写Web服务器和应用程序的易于使用，安全且富有表现力的框架，它的灵感来自 hapi。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;https://dev.jspm.io/react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> pogo <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/pogo/main.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = pogo.server(&#123; port: <span class="number">8888</span> &#125;);</span><br><span class="line"></span><br><span class="line">server.router.get(<span class="string">&quot;/&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;h1&gt;Hello, world!&lt;/h1&gt;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.start();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`🦕 pogo server running at http://127.0.0.1:8888/ 🦕`</span>);</span><br></pre></td></tr></table></figure><h2 id="oak-实战"><a href="#oak-实战" class="headerlink" title="oak 实战"></a>oak 实战</h2><blockquote><p>项目源码已同步开源: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2Rlbm8tb2FrLW1vbmdvLWRlbW8=" title="https://github.com/youngjuning/deno-oak-mongo-demo">youngjuning/deno-oak-mongo-demo<i class="fa fa-external-link"></i></span>，下文只对遇到的坑做介绍，具体代码请查看源码。</p></blockquote><h3 id="项目骨架"><a href="#项目骨架" class="headerlink" title="项目骨架"></a>项目骨架</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .env # 使用 denv 插件来获取</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── config # 配置文件</span><br><span class="line">│   └── db.ts</span><br><span class="line">├── deps.ts # 官方推荐的依赖管理方式</span><br><span class="line">├── controllers # 存放路由处理器</span><br><span class="line">│   ├── createBooks.ts</span><br><span class="line">│   ├── deleteBook.ts</span><br><span class="line">│   ├── getBookDetails.ts</span><br><span class="line">│   ├── getBooks.ts</span><br><span class="line">│   ├── notFound.ts</span><br><span class="line">│   └── updateBook.ts</span><br><span class="line">├── middlewares # 存放中间件，用于处理每个请求</span><br><span class="line">│   └── error.ts</span><br><span class="line">├── models # 存放模型定义</span><br><span class="line">│   └── Book.ts</span><br><span class="line">├── publish.sh # 发布脚本</span><br><span class="line">├── router.ts # 定义路由信息</span><br><span class="line">├── server.ts # 服务入口文件</span><br><span class="line">├── services # 存放模型定义</span><br><span class="line">│   └── books.ts</span><br><span class="line">├── test.http # VSCode REST Client 文件，用来调试接口</span><br><span class="line">└── utils # 工具函数</span><br><span class="line">    └── getParams.ts # 将 ctx.request.url.search 转成对象</span><br></pre></td></tr></table></figure><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><blockquote><p>作为一个前端工程师，为了写这篇文章，专门学了 mongodb。由于第一次接触，遇到最多的坑也是关于它的。</p></blockquote><h4 id="多容器链接"><a href="#多容器链接" class="headerlink" title="多容器链接"></a>多容器链接</h4><p>1、使用 <code>--link</code> 参数链接 mongo 容器，deno_mongo 是我们指定的映射到 juejin 容器内的数据库别名（这个很重要，连接数据库时要用）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --restart always \</span><br><span class="line">  --name mongo \</span><br><span class="line">  -v mongo_configdb:/data/configdb \</span><br><span class="line">  -v mongo_data:/data/db \</span><br><span class="line">  -p 27017:27017 \</span><br><span class="line">  mongo \</span><br><span class="line">  --auth</span><br><span class="line">docker run -d \</span><br><span class="line">  --restart always \</span><br><span class="line">  --name juejin \</span><br><span class="line">  -p 1998:1998 \</span><br><span class="line">  --link mongo:deno_mongo \</span><br><span class="line">  juejin</span><br></pre></td></tr></table></figure><p>2、跨容器连接时不设置身份校验，开启服务端无法连接上mongo数据库，所以必须事先配置好 mongodb 的账号密码，并通过 <code>mongodb://root:123456@deno_mongo:27017/</code> 的形式连接。</p><p>3、虽然不开启 <code>--auth</code> 是可以使用 mongo 的，但是这样不安全，强烈建议启动容器的时候加上 <code>--auth</code> 参数。</p><h4 id="deno-mongo"><a href="#deno-mongo" class="headerlink" title="deno_mongo"></a>deno_mongo</h4><p>这个插件在 run 起来的时候依赖的文件在 github 上，我卡在这里一下午。docker 启动项目后，由于容器内访问不了 github，导致一直失败。</p><p>幸运的是，码云可以同步 github 上的项目，coding 可以上传单文件不超过 20M 的文件，我成功地完成了这篇文章最后的一步：docker 部署项目。</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20veWFuZ2p1bm5pbmcvZGVub19tb25nby9yYXcvbWFzdGVyL21vZC50cw==" title="https://gitee.com/yangjunning/deno_mongo/raw/master/mod.ts">插件地址<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly95b3VuZ3VuaW5nLmNvZGluZy5uZXQvcC9kZW5vX21vbmdvL2QvZGVub19tb25nby9naXQvcmF3L21hc3Rlcg==" title="https://younguning.coding.net/p/deno_mongo/d/deno_mongo/git/raw/master">依赖的文件地址<i class="fa fa-external-link"></i></span></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>其他部分就没什么好说了，clone 代码后，需要先配置一下 mongodb。然后再改代码，就是直接执行 <code>./publish.sh</code> 就可以应用更改。</p><h4 id="mongodb-初始配置"><a href="#mongodb-初始配置" class="headerlink" title="mongodb 初始配置"></a>mongodb 初始配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不带权限校验的模式开启 mongo</span></span><br><span class="line">$ docker run -d \</span><br><span class="line">  --restart always \</span><br><span class="line">  --name mongo \</span><br><span class="line">  -v mongo_data:/data/db \</span><br><span class="line">  -p 27017:27017 \</span><br><span class="line">  mongo \</span><br><span class="line"><span class="comment"># mongodb 默认不开启验证，只要能访问服务器，即可直接登录，所以需要配置一下账号密码进行校验。</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it mongo mongo admin</span><br><span class="line"><span class="comment"># 创建超级管理员</span></span><br><span class="line">&gt; db.createUser(&#123; user: <span class="string">&quot;root&quot;</span> , <span class="built_in">pwd</span>: <span class="string">&quot;123456&quot;</span>, roles: [<span class="string">&quot;root&quot;</span>]&#125;);</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">   <span class="string">&quot;user&quot;</span> : <span class="string">&quot;root&quot;</span>,</span><br><span class="line">   <span class="string">&quot;roles&quot;</span> : [<span class="string">&quot;root&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 尝试使用上面创建的用户信息进行连接。</span></span><br><span class="line">&gt; db.auth(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">1</span><br><span class="line"><span class="comment"># 创建一个名为 admin，密码为 123456 的用户。</span></span><br><span class="line">&gt; db.createUser(&#123; user: <span class="string">&quot;admin&quot;</span>, <span class="built_in">pwd</span>: <span class="string">&quot;123456&quot;</span>, roles:[<span class="string">&quot;userAdminAnyDatabase&quot;</span>, <span class="string">&quot;dbAdminAnyDatabase&quot;</span>, <span class="string">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">   <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">   <span class="string">&quot;roles&quot;</span>: [</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="string">&quot;role&quot;</span>: <span class="string">&quot;userAdminAnyDatabase&quot;</span>,</span><br><span class="line">      <span class="string">&quot;db&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 尝试使用上面创建的用户信息进行连接。</span></span><br><span class="line">&gt; db.auth(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><blockquote><p>完成了 mongodb 的初始化配置，之后就可以使用 <code>./publish.sh</code> 一键发布应用。</p></blockquote><ol><li>给脚本赋予可执行权限：<code>chmod a+x ./publish.sh</code></li><li>构建镜像并发布容器：<code>./publish.sh</code></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzgxYzFlOGU1MWQ0NTUzNWM0ZmU1YzI=" title="https://juejin.im/post/5c81c1e8e51d45535c4fe5c2">我为 VS Code 开发了一个 Deno 插件<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM2Mzg3MS9hcnRpY2xlL2RldGFpbHMvMTA0MDU4ODk4" title="https://blog.csdn.net/weixin_43363871/article/details/104058898">VScode中测试接口代替postman<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzNzQxNTIzNDkyODc3" title="https://juejin.im/post/6844903741523492877">Docker容器化部署尝试——多容器通信（node + mongoDB + nginx）<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTYyMzIxMjUyMzYwI2hlYWRpbmctMjE=" title="https://juejin.im/post/6844904162321252360#heading-21">了不起的 Deno 实战篇<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUE1NDExeDdiZw==" title="https://www.bilibili.com/video/BV1A5411x7bg">Deno快速入门指南<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXYudG8va3J5ei93cml0ZS1hLXNtYWxsLWFwaS11c2luZy1kZW5vLTFjbDA=" title="https://dev.to/kryz/write-a-small-api-using-deno-1cl0">Write a small API using Deno<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B0b21hbmFnbGUvNS13YXlzLXRvLWJ1aWxkLWEtaHR0cC1zZXJ2ZXItd2l0aC1kZW5vLTMxNjkzODkxMThhYQ==" title="https://medium.com/@tomanagle/5-ways-to-build-a-http-server-with-deno-3169389118aa">5 Ways to Build a HTTP Server With Deno<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXYudG8vc2xpbWhtaWRpL2NyZWF0ZS1hLXNlcnZlci13aXRoLWRlbm8tYW5kLW1vbmdvLTIwNmw=" title="https://dev.to/slimhmidi/create-a-server-with-deno-and-mongo-206l">Create a server with deno and mongo.<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvOWxnZHJBWEE3Ml9faTJsa3pqMkdOQQ==" title="https://mp.weixin.qq.com/s/9lgdrAXA72__i2lkzj2GNA">【译】Deno + MongoDB 构建 CRUD API<i class="fa fa-external-link"></i></span></li></ul><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>后续，我想基于本文所述的架构，开发一个婚礼请柬小程序的后台，之前不会操作数据库，曾想使用 leancloud。奋战两天之后，妈妈再也不担心我不会写接口了。最后来放上一只喝奶茶的吉祥物：</p><p><img src="https://i.loli.net/2020/08/03/4VM2kKtZS1Pazwo.png" alt=""></p><h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote><p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p></blockquote><table><thead><tr><th align="center">微信</th><th align="center">投食</th><th align="center">公众号</th></tr></thead><tbody><tr><td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td></tr></tbody></table><p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZjFkMWQ5N2YyNjVkYTIyYjY0OTVlZDI=" title="https://juejin.im/post/5f1d1d97f265da22b6495ed2">🏆 技术专题第一期 | 聊聊 Deno的一些事儿……<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/29/Vn7jhOu3Z2c6pTe.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://youngjuning.js.org/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Deno" scheme="http://youngjuning.js.org/categories/%E5%90%8E%E7%AB%AF/Deno/"/>
    
    
      <category term="掘金专栏" scheme="http://youngjuning.js.org/tags/%E6%8E%98%E9%87%91%E4%B8%93%E6%A0%8F/"/>
    
      <category term="Deno" scheme="http://youngjuning.js.org/tags/Deno/"/>
    
  </entry>
  
  <entry>
    <title>Deno从入门到跑路 | 掘金征文</title>
    <link href="http://youngjuning.js.org/2020/07/Deno%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%B7%91%E8%B7%AF-%E6%8E%98%E9%87%91%E5%BE%81%E6%96%87/"/>
    <id>http://youngjuning.js.org/2020/07/Deno%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%B7%91%E8%B7%AF-%E6%8E%98%E9%87%91%E5%BE%81%E6%96%87/</id>
    <published>2020-07-26T08:30:25.000Z</published>
    <updated>2020-07-26T08:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/07/27/4ltXAYazmVvgWfZ.png" alt=""></p><a id="more"></a><h2 id="印象Deno"><a href="#印象Deno" class="headerlink" title="印象Deno"></a>印象Deno</h2><p>2018 年时，一篇 <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI3OTM0ODI2Ni9hbnN3ZXIvNDA2MTMxNjA1" title="https://www.zhihu.com/question/279348266/answer/406131605">如何看待ry的项目deno的issue被中文刷屏的事件？<i class="fa fa-external-link"></i></span> 的文章成功引起了我对 Deno 的注意，cnode有一篇文章严厉斥责这是中国开发者的耻辱，对此我不敢完全认同，毕竟996的大环境下，是很难孵化出国外这种创新精神的。但我并不否认学不学的动，全看个人。本人近期最敬佩的 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vdXNlci81OTUzMjE3NmYyNjVkYTZjMzE3ZDhlMTQ=" title="https://juejin.im/user/59532176f265da6c317d8e14">蜗牛老湿_大圣<i class="fa fa-external-link"></i></span>坚持每日5点多起床，做到如此勤奋与持久，何愁学不动？</p><h3 id="为什么学Deno？"><a href="#为什么学Deno？" class="headerlink" title="为什么学Deno？"></a>为什么学Deno？</h3><p>1、热度，虽说关于学不动的问题造成了负面影响，但是deno成功地因此赚足了噱头和流量。</p><p><img src="https://i.loli.net/2020/07/27/xnK6EqFH1hGoJSR.png" alt=""></p><p>2、趋势，下图中我们可以清楚地看到，Deno从2018年创建至今已斩获近70K的star，尤其是 2020-05-13 发布 1.0 之后，更是迎来一波高峰。</p><img src="https://i.loli.net/2020/08/03/DszAScVQmYNflg8.png" style="zoom:70%;" /><p>3、掘金征文活动，上次沸点活动有幸获赠豪华升降桌，但是我最想要的其实是掘金周边大礼包。</p><h3 id="Deno-是什么？"><a href="#Deno-是什么？" class="headerlink" title="Deno 是什么？"></a>Deno 是什么？</h3><ul><li>Deno 是一个简单、现代且安全的 JavaScript 和 TypeScript 运行时环境，其基于 V8 引擎并采用 Rust 编程语言构建。</li><li>Deno 由 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J5" title="https://github.com/ry">Ryan Dahl 瑞安·达尔<i class="fa fa-external-link"></i></span> 创建，他同样是 Node.js 的作者。</li></ul><h3 id="功能亮点"><a href="#功能亮点" class="headerlink" title="功能亮点"></a>功能亮点</h3><ul><li>默认安全设置。除非显式开启，否则没有文件、网络，也不能访问运行环境。</li><li>天生支持 TypeScript。</li><li>只有一个单一的可执行文件。</li><li>自带实用工具，例如依赖检查器（deno info）和 代码格式化工具（deno fmt）。</li><li>有一套经过审核（审计）的标准模块，确保与 Deno 兼容： <span class="exturl" data-url="aHR0cHM6Ly9kZW5vLmJvb3Rjc3MuY29tL3N0ZA==" title="https://deno.bootcss.com/std">deno.land/std<i class="fa fa-external-link"></i></span></li><li>脚本代码能被打包为一个单独的 JavaScript 文件。</li><li>去中心化Package：没有 node_modules 和 package.json；Package 通过 URL 来加载–<span class="exturl" data-url="aHR0cDovL2Rlbm8ubGFuZC94L++8m+WKoOi9veaXtue8k+WtmOWIsOehrOebmA==" title="http://deno.land/x/；加载时缓存到硬盘">http://deno.land/x/；加载时缓存到硬盘<i class="fa fa-external-link"></i></span></li><li>Top Level Await：在 Deno 中编写代码，不需要将 await 包裹在异步函数里。真香！</li><li>其他：内置测试、浏览器兼容的API、执行Wasm二进制文件、Modern JS、ES Modules</li></ul><h3 id="为什么开发-Deno？"><a href="#为什么开发-Deno？" class="headerlink" title="为什么开发 Deno？"></a>为什么开发 Deno？</h3><p>从 Deno 的名字就可以看出和 Node 的关系：De（Destroy）no(Node)，销毁Node, ry 在演讲中曾列举了 Node存在的一些问题：</p><ol><li><p>曾放弃原生支持 Promise： 造成了核心 API 的老化问题，得都一一更新成 Promise 版本才能解決。</p></li><li><p>沒有谨慎思考安全性问题：使用 V8 的 Node.js 不需要『授权』，即可访问网络、档案系统，甚至是内存信息，在数据安全考量越来越重要的时代，会是 Node.js 被质疑的问题之一</p></li><li><p>Build System：在 Node 开发早期，Chrome V8 是以 GYP 构建系统，而 Node 也就沿用了 GYP，但不久后 Chrome 放弃 GYP 转而使用 GN，而 Node 已经无法挽回。因此 Node 成了目前在 V8 上唯一使用 GYP 的用戶，而 GN 速度比 GYP 快了将近 20 倍、文件可读性高且支持许多依赖。</p></li><li><p>Package.json 与 Npm 的集权问题</p></li><li><p>node_modules：node_modules 里的每一個 folder 并沒有标准，因此可以放置多余的版本或是任何其他档案和文件，这导致增加了模块解析复杂度。另外社区早已苦 node_modules 久已，嘲讽之是比黑洞更黑的存在：</p></li></ol><img src="https://i.loli.net/2020/07/27/zTDH1eEXtYKpqfs.png" alt="image.png" style="zoom:50%;" /><ol start="6"><li>index.js：若有了 package.json，其实就不需要默认加载 index.js，這确实让模块加载更加地复杂化了。</li></ol><p>基于以上问题，ry 决定利用JavaScript和浏览器最新特性开发一款现代的JavaScript运行时。更多问题，大家请观看参考资料的演讲。</p><h3 id="Deno-正在杀死-Node-js的担忧"><a href="#Deno-正在杀死-Node-js的担忧" class="headerlink" title="Deno 正在杀死 Node.js的担忧"></a>Deno 正在杀死 Node.js的担忧</h3><p>Deno 刚发布的时候，社区除了各种”学不动”的声音之外，还有就是 Deno 是否会取代 Node.js。我认为活在当下（NodeJs），未雨绸缪（Deno）是最佳态度。</p><ul><li>Nodejs远没有到被取代的时候</li><li>Nodejs 非常成熟且有一个巨大的生态</li><li>Deno 是一项崭新的技术，在未来几年它可能会受到更多关注，成为 nodejs 的竞争者</li><li>对于过去用 bash 或 python 编写的工具脚本来说，Deno 是一个优秀的替代品。</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>Deno 没有外部依赖，以单一可以执行文件发布。你可以 使用下面的安装程序安装 Deno，或者先从 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rlbm9sYW5kL2Rlbm8vcmVsZWFzZXM=" title="https://github.com/denoland/deno/releases">版本发布页面<i class="fa fa-external-link"></i></span>下载已发布的二进制可执行文件。</p><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><strong>使用 Shell (Mac, Linux)：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://deno.land/x/install/install.sh | sh</span><br></pre></td></tr></table></figure><p><strong>使用 PowerShell (Windows):</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iwr https://deno.land/x/install/install.ps1 -useb | iex</span><br></pre></td></tr></table></figure><p><strong>使用 Homebrew (Mac):</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install deno</span><br></pre></td></tr></table></figure><h3 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h3><ul><li><p>运行 <code>deno -V</code>，如果它打印出 Deno 版本，说明安装成功。</p></li><li><p>运行 <code>deno help</code> 以查看帮助文档。</p></li><li><p>运行 <code>deno help &lt;subcommand&gt;</code> 以查看子命令的选项。</p></li></ul><h3 id="相关路径"><a href="#相关路径" class="headerlink" title="相关路径"></a>相关路径</h3><ul><li>DENO_DIR location（Deno安装位置）: “/Users/yangjunning/Library/Caches/deno”</li><li>Remote modules cache（远程模块缓存）: “/Users/yangjunning/Library/Caches/deno/deps”</li><li>TypeScript compiler cache（TypeScript编译缓存）: “/Users/yangjunning/Library/Caches/deno/gen”</li></ul><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>要升级已安装的版本，运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deno upgrade</span><br></pre></td></tr></table></figure><p>这会从 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rlbm9sYW5kL2Rlbm8vcmVsZWFzZXM=" title="https://github.com/denoland/deno/releases">github.com/denoland/deno/releases<i class="fa fa-external-link"></i></span> 获取最新的发布版本，然后解压并替换现有的版本。</p><p>您也可以用此来安装一个特定的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deno upgrade --version 1.0.1</span><br></pre></td></tr></table></figure><h3 id="IDE及插件"><a href="#IDE及插件" class="headerlink" title="IDE及插件"></a>IDE及插件</h3><p>推荐使用 VSCode 及 VSCode Deno进行开发，VSCode Deno 是 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vdXNlci81NWI5ZDI1NjAwYjA5ZGIzNmJiZTJlOWE=" title="https://juejin.im/user/55b9d25600b09db36bbe2e9a">justjavac<i class="fa fa-external-link"></i></span> 大佬开发的。</p><p>为了解决与其他正常 node 项目的冲突，建议大家请在项目中新建 <code>.vscode/settings.json</code> 文件并填入以下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;deno.enable&quot;</span>: <span class="literal">true</span>, <span class="comment">// set false for user setting</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;[typescript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;denoland.vscode-deno&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>试着运行如下的简单程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ deno run https://deno.land/std/examples/welcome.ts</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/27/rQOJ7pFbWIXtCTf.png" alt=""></p><h3 id="搭建文件服务器"><a href="#搭建文件服务器" class="headerlink" title="搭建文件服务器"></a>搭建文件服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run --allow-read --allow-net https://deno.land/std@0.62.0/http/file_server.ts</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/07/27/vWp2eqOTbZ9arB7.png" style="zoom:60%;" /><h3 id="创建一个http服务器"><a href="#创建一个http服务器" class="headerlink" title="创建一个http服务器"></a>创建一个http服务器</h3><p>创建一个名为 <code>index.ts</code> 的文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; serve &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std@0.62.0/http/server.ts&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> s = serve(&#123; port: <span class="number">8000</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;http://localhost:8000/&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> req <span class="keyword">of</span> s) &#123;</span><br><span class="line">  req.respond(&#123; body: <span class="string">&quot;Hello World\n&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>deno run xxx</code> 命令执行文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run --allow-net --reload index.ts // --reload 是第一次执行时缓存模块用的</span></span><br></pre></td></tr></table></figure><h3 id="发出一个-HTTP-请求"><a href="#发出一个-HTTP-请求" class="headerlink" title="发出一个 HTTP 请求"></a>发出一个 HTTP 请求</h3><p>通过 HTTP 请求从服务器获取数据是一件很常见的事。让我们编写一个简单的程序来获取文件并打印到终端。</p><p>就像浏览器一样，您可以使用 web 标准的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API"><code>fetch</code></a> API 来发出请求。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们取得了第一个命令行参数，存储到变量 url。</span></span><br><span class="line"><span class="keyword">const</span> url = Deno.args[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 我们向指定的地址发出请求，等待响应，然后存储到变量 res。</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> fetch(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们把响应体解析为一个 ArrayBuffer，等待接收完毕，将其转换为 Uint8Array，最后存储到变量 body。</span></span><br><span class="line"><span class="keyword">const</span> body = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="keyword">await</span> res.arrayBuffer());</span><br><span class="line"><span class="comment">// 我们把 body 的内容写入标准输出流 stdout。</span></span><br><span class="line"><span class="keyword">await</span> Deno.stdout.write(body);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run --allow-net sendHttp.ts http://example.com</span></span><br><span class="line">// 或</span><br><span class="line"><span class="meta">$</span><span class="bash"> deno run --allow-net=example.com https://deno.land/std/examples/curl.ts https://example.com</span></span><br></pre></td></tr></table></figure><h3 id="写一个文件"><a href="#写一个文件" class="headerlink" title="写一个文件"></a>写一个文件</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> encoder = <span class="keyword">new</span> TextEncoder();</span><br><span class="line"><span class="keyword">const</span> greetText = encoder.encode(<span class="string">&quot;Hello World\nMy name is youngjuning!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> Deno.writeFile(<span class="string">&quot;greet.txt&quot;</span>, greetText)</span><br></pre></td></tr></table></figure><h3 id="读取一个文件"><a href="#读取一个文件" class="headerlink" title="读取一个文件"></a>读取一个文件</h3><p>Deno 也提供内置的 API，它们都位于全局变量 <code>Deno</code> 中。您可以在此找到相关文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2MuZGVuby5sYW5kL2h0dHBzL2dpdGh1Yi5jb20vZGVub2xhbmQvZGVuby9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQvbGliLmRlbm8uZC50cw==" title="https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts">doc.deno.land<i class="fa fa-external-link"></i></span>。</p><p>文件系统 API 没有 web 标准形式，所以 Deno 提供了内置的 API。</p><p>在这个程序中，每个命令行参数都是一个文件名，参数对应的文件将被依次打开，打印到标准输出流。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filenames = Deno.args;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> filename <span class="keyword">of</span> filenames) &#123;</span><br><span class="line">  <span class="keyword">const</span> file = <span class="keyword">await</span> Deno.open(filename);</span><br><span class="line">  <span class="keyword">await</span> Deno.copy(file, Deno.stdout);</span><br><span class="line">  file.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了内核到用户空间再到内核的必要拷贝，这里的 <code>copy()</code> 函数不会产生额外的昂贵操作，从文件中读到的数据会原样写入标准输出流。这反映了 Deno I/O 流的通用设计目标。</p><p>尝试一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run cat.ts /etc/passwd</span></span><br></pre></td></tr></table></figure><h3 id="TCP-服务"><a href="#TCP-服务" class="headerlink" title="TCP 服务"></a>TCP 服务</h3><p>新建 <code>cat.ts</code>，这个示例是一个 TCP echo 服务，接收 8080 端口的连接，把接收到的任何数据返回给客户端。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line"><span class="keyword">const</span> listener = Deno.listen(&#123; hostname, port &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Listening on <span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> conn <span class="keyword">of</span> listener) &#123;</span><br><span class="line">  Deno.copy(conn, conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试用 netcat 向它发送数据。</p><p><img src="https://i.loli.net/2020/07/27/XOyv57NVZwbHzKx.png" alt=""></p><p>像示例 <code>cat.ts</code> 一样，<code>copy()</code> 函数不会产生不必要的内存拷贝。它从内核接收数据包，然后发送回去，就这么简单。</p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>在任何地方导入 URL 似乎都不方便。如果其中一个 URL ，链接到了一个稍微不同的库版本呢？在大型项目中，维护 URL 是否容易出错？解决方案是在中心deps.ts文件，导入和重新导出外部库（与 Node 的package.json文件目的相同）。例如，假设您在一个大型项目中，使用了上述测试库。要做的，不是在任何地方导入”<span class="exturl" data-url="aHR0cHM6Ly9kZW5vLmxhbmQvc3RkL3Rlc3RpbmcvbW9kLnRzJnF1b3Q777yM6ICM5piv5Y+v5Lul5Yib5bu65LiA5Liq" title="https://deno.land/std/testing/mod.ts&quot;，而是可以创建一个">https://deno.land/std/testing/mod.ts&quot;，而是可以创建一个<i class="fa fa-external-link"></i></span> <code>deps.ts</code>，用来导出第三方代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std/http/server.ts&quot;</span>; <span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">as</span> Server <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std/http/server.ts&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Server &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std/http/server.ts&quot;</span>;</span><br></pre></td></tr></table></figure><p>在整个项目中，都可以从deps.ts导入，这样就可以避免对同一个 URL 进行多次引用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;test, assertEquals&#125; <span class="keyword">from</span> <span class="string">&#x27;./deps.ts&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这种设计避免了，由于包管理软件、集中的代码库和多余的文件格式，而产生的过多复杂性。</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p><code>deno bundle</code> 自带打包和 tree shaking 功能，可以将我们的代码打包成单文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">deno bundle ./src/index.ts ./dist/index.js</span><br></pre></td></tr></table></figure><p><code>deno install</code> 可以将我们的代码生成可执行文件进行直接使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">deno install --allow-read  --allow-net --allow-write -n youngjuning ./src/index.ts</span><br></pre></td></tr></table></figure><blockquote><p>我们也可以直接安装远程的库: <code>deno install --allow-read --allow-net https://deno.land/std/http/file_server.ts</code></p></blockquote><p>deno的可执行文件默认都放在 <code>/Users/yangjunning/.deno/bin/</code> 目录下，我们需要将它注册到环境变量中:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="string">&quot;/Users/yangjunning/.deno/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>我们已经知道了默认情况下，Deno是安全的。因此 Deno 模块没有文件、网络或环境的访问权限，除非您为它授权。在命令行参数中为 deno 进程授权后才能访问安全敏感的功能。</p><h3 id="权限列表"><a href="#权限列表" class="headerlink" title="权限列表"></a>权限列表</h3><p>以下权限是可用的：</p><ul><li><code>-A</code>, <code>--allow-all</code>：允许所有权限，这将禁用所有安全限制。</li><li><code>--allow-env</code>：允许环境访问，例如读取和设置环境变量。</li><li><code>--allow-hrtime</code>: 允许高精度时间测量，高精度时间能够在计时攻击和特征识别中使用。</li><li><code>--allow-net=&lt;allow-net&gt;</code>： 允许网络访问。您可以指定一系列用逗号分隔的域名，来提供域名白名单。</li><li><code>--allow-plugin</code>： 允许加载插件。请注意：这是一个不稳定功能。</li><li><code>--allow-read=&lt;allow-read&gt;</code> 允许读取文件系统。您可以指定一系列用逗号分隔的目录或文件，来提供文件系统白名单。</li><li><code>--allow-run</code> 允许运行子进程。请注意，子进程不在沙箱中运行，因此没有与 deno 进程相同的安全限制，请谨慎使用。</li><li><code>--allow-write=&lt;allow-write&gt;</code> 允许写入文件系统。您可以指定一系列用逗号分隔的目录或文件，来提供文件系统白名单。</li></ul><h3 id="权限白名单"><a href="#权限白名单" class="headerlink" title="权限白名单"></a>权限白名单</h3><p>Deno 还允许您使用白名单控制权限的粒度。</p><p>这是一个用白名单限制文件系统访问权限的示例，仅允许访问 <code>/usr</code> 目录，但它会在尝试访问 <code>/etc</code> 目录时失败。</p><p><img src="https://i.loli.net/2020/07/27/pztu5K3H2N7lWy8.png" alt=""></p><p><code>--allow-write</code> 也一样，代表写入权限。</p><h3 id="网络访问"><a href="#网络访问" class="headerlink" title="网络访问"></a>网络访问</h3><p><code>fetch.ts</code>:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> fetch(<span class="string">&quot;https://deno.land/&quot;</span>);</span><br></pre></td></tr></table></figure><p>这是一个设置 host 或 url 白名单的示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run --allow-net=github.com,deno.land fetch.ts</span></span><br></pre></td></tr></table></figure><p>如果 <code>fetch.ts</code> 尝试与其他域名建立网络连接，那么这个进程将会失败。</p><p>允许访问任意地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run --allow-net fetch.ts</span></span><br></pre></td></tr></table></figure><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="denv"><a href="#denv" class="headerlink" title="denv"></a><span class="exturl" data-url="aHR0cHM6Ly9kZW5vLmxhbmQveC9kZW52I2RlbnY=" title="https://deno.land/x/denv#denv">denv<i class="fa fa-external-link"></i></span></h3><p>一个适用于 Deno 的类似于 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vdGRvdGxhL2RvdGVudg==" title="https://github.com/motdotla/dotenv">dotenv<i class="fa fa-external-link"></i></span>的插件</p><p><strong>使用</strong></p><p>你可以直接导入它，然后就可以使用和它同级目录的<code>.env</code> 文件：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; load &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/denv/mod.ts&quot;</span>;</span><br><span class="line"><span class="keyword">await</span> load();</span><br><span class="line"><span class="built_in">console</span>.log(Deno.env.get(<span class="string">&quot;HOME&quot;</span>));  <span class="comment">// e.g. outputs &quot;/home/alice&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(Deno.env.get(<span class="string">&quot;MADE_UP_VAR&quot;</span>));  <span class="comment">// outputs &quot;Undefined&quot;</span></span><br></pre></td></tr></table></figure><p><strong>Env File 规则</strong></p><p>除了 <code>double quoted values expand new lines</code> 没有实现，其他的规则和 dotenv 一样。</p><h2 id="打包-1"><a href="#打包-1" class="headerlink" title="打包"></a>打包</h2><p><code>deno bundle</code> 自带打包和 tree shaking 功能，可以将我们的代码打包成单文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno bundle ./src/index.ts ./dist/index.js</span></span><br></pre></td></tr></table></figure><p><code>deno install</code> 可以将我们的代码生成可执行文件进行直接使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno install --allow-read  --allow-net --allow-write -n youngjuning ./src/index.ts</span></span><br></pre></td></tr></table></figure><p>deno的可执行文件默认都放在 <code>/Users/yangjunning/.deno/bin/</code> 目录下，我们需要将它注册到环境变量中:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="string">&quot;/Users/yangjunning/.deno/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="1、权限标志符位置的问题"><a href="#1、权限标志符位置的问题" class="headerlink" title="1、权限标志符位置的问题"></a>1、权限标志符位置的问题</h3><p>我们都知道， deno 默认是安全的，就是导致了默认情况下是不允许访问网络、读写文件等。比如有个名为 index.ts 的文件内容如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; serve &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std@0.50.0/http/server.ts&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> s = serve(&#123; port: <span class="number">8000</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;http://localhost:8000/&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> req <span class="keyword">of</span> s) &#123;</span><br><span class="line">  req.respond(&#123; body: <span class="string">&quot;Hello World\n&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接执行 <code>deno run index.ts</code>, 会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Uncaught PermissionDenied: network access to &quot;0.0.0.0:8000&quot;, run again with the --allow-net flag</span><br></pre></td></tr></table></figure><p>所以我们很自然的就会在启动命令的最后加上 <code>--allow-net</code> ，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run index.ts --allow-net</span></span><br></pre></td></tr></table></figure><p>但是，这样仍然会报错。查了资料才知道 ，<code>--allow-net</code> 、<code>--allow-read</code> 之类的标志是不可以放到文件名后面的，必须紧跟在 <code>deno run</code> 后面，比如，如下才是正确的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deno run --alow-net index.ts</span></span><br></pre></td></tr></table></figure><h3 id="2、远程模块缓存"><a href="#2、远程模块缓存" class="headerlink" title="2、远程模块缓存"></a>2、远程模块缓存</h3><ol><li>远程代码在第一次运行时获取并缓存，直到代码通过 <code>--reload</code> 刷新缓存。（所以它在飞机上也能工作）。</li><li>从远程 URL 加载的模块或文件应当是不可变且可缓存的。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWZwNHkxUTdiaS8=" title="https://www.bilibili.com/video/BV1fp4y1Q7bi/">我对 Node.js 遗憾的十件事 - Ryan Dahl - JSConf EU 2018<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUE1NDExeDdiZw==" title="https://www.bilibili.com/video/BV1A5411x7bg">Deno快速入门指南<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDIwLzAxL2Rlbm8taW50cm8uaHRtbA==" title="https://www.ruanyifeng.com/blog/2020/01/deno-intro.html">Deno 运行时入门教程：Node.js 的替代品<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly91cmxpZnkuY24vSlJyTTMy" title="https://urlify.cn/JRrM32">深入理解-node-js-的設計錯誤-從-ryan-dahl-的演講中反思<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW5mb3EuY24vYXJ0aWNsZS8yMDE3LzA5L05vZGUtUnlhbi1EYWhs" title="https://www.infoq.cn/article/2017/09/Node-Ryan-Dahl">Node 之父 Ryan Dahl：我不想被定义<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZW5vLmJvb3Rjc3MuY29tLw==" title="https://deno.bootcss.com/">Deno中文网<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZW5vY24ub3JnLw==" title="https://denocn.org/">Deno中文社区<i class="fa fa-external-link"></i></span></li></ul><h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote><p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p></blockquote><table><thead><tr><th align="center">微信</th><th align="center">投食</th><th align="center">公众号</th></tr></thead><tbody><tr><td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/07/29/BiWte5F2xjnI1f8.jpg" width="200px"/></td></tr></tbody></table><p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍评论是我坚持的动力！！！</p><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZjFkMWQ5N2YyNjVkYTIyYjY0OTVlZDI=" title="https://juejin.im/post/5f1d1d97f265da22b6495ed2">🏆 技术专题第一期 | 聊聊 Deno的一些事儿……<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/27/4ltXAYazmVvgWfZ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://youngjuning.js.org/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Deno" scheme="http://youngjuning.js.org/categories/%E5%90%8E%E7%AB%AF/Deno/"/>
    
    
      <category term="掘金专栏" scheme="http://youngjuning.js.org/tags/%E6%8E%98%E9%87%91%E4%B8%93%E6%A0%8F/"/>
    
      <category term="Deno" scheme="http://youngjuning.js.org/tags/Deno/"/>
    
  </entry>
  
  <entry>
    <title>装它|再也不用操心ESLint配置</title>
    <link href="http://youngjuning.js.org/2020/07/%E8%A3%85%E5%AE%83-%E4%BD%A0%E5%86%8D%E4%B9%9F%E4%B8%8D%E7%94%A8%E6%93%8D%E5%BF%83ESLint%E9%85%8D%E7%BD%AE/"/>
    <id>http://youngjuning.js.org/2020/07/%E8%A3%85%E5%AE%83-%E4%BD%A0%E5%86%8D%E4%B9%9F%E4%B8%8D%E7%94%A8%E6%93%8D%E5%BF%83ESLint%E9%85%8D%E7%BD%AE/</id>
    <published>2020-07-23T23:33:15.000Z</published>
    <updated>2020-07-23T23:33:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/07/24/aGtwAFpOXledCUc.png" alt=""></p><a id="more"></a><p>大家是否像我一样苦 ESlint 久已呢？只是配置一个代码格式化工具，动辄10几个依赖。依赖之间又相互依赖，版本错误，配置顺序错误都会导致失效。</p><p>就算熟练掌握了 ESLint 配置，但是换了项目，又要重新配置。如果是从React切换到Vue项目，情况会更糟糕，你不得不额外做一些无意义的配置工作。而我今天带来的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL2VzbGludC1jb25maWctYWlyYm5i" title="https://github.com/youngjuning/eslint-config-airbnb">@youngjuning/eslint-config-airbnb<i class="fa fa-external-link"></i></span> 便是用来把你从繁琐的 ESLint 配置工作中解放出来的一款插件。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一款基于 airbnb 的强大的 eslint 配置插件，支持 vue、jsx、js、ts、tsx、html、jest，致力于把你从繁琐的 ESLint 配置工作中解放出来。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>首先，为了避免冲突，请移除项目中已存在的配置，你可以保留 rules</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D @youngjuning/eslint-config-airbnb</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Add to your eslint config (<code>.eslintrc.js</code>):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">extends</span>: <span class="string">&#x27;@youngjuning/airbnb&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="react-native"><a href="#react-native" class="headerlink" title="react native"></a>react native</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">extends</span>: <span class="string">&#x27;@youngjuning/airbnb&#x27;</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    <span class="string">&#x27;react-native/react-native&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vue-with-typescript"><a href="#vue-with-typescript" class="headerlink" title="vue with typescript"></a>vue with typescript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">extends</span>: <span class="string">&#x27;@youngjuning/airbnb&#x27;</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><h3 id="eslintignore"><a href="#eslintignore" class="headerlink" title=".eslintignore"></a>.eslintignore</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!.eslintrc.js</span><br><span class="line">!.prettierrc.js</span><br></pre></td></tr></table></figure><h3 id="prettierrc-js"><a href="#prettierrc-js" class="headerlink" title=".prettierrc.js"></a>.prettierrc.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...require(<span class="string">&#x27;@youngjuning/eslint-config-airbnb/.prettierrc.js&#x27;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="prettierignore"><a href="#prettierignore" class="headerlink" title=".prettierignore"></a>.prettierignore</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**&#x2F;node_modules&#x2F;*</span><br></pre></td></tr></table></figure><h3 id="editorconfig"><a href="#editorconfig" class="headerlink" title=".editorconfig"></a>.editorconfig</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># EditorConfig is awesome: http:&#x2F;&#x2F;EditorConfig.org</span><br><span class="line"></span><br><span class="line"># top-most EditorConfig file</span><br><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line"># Unix-style newlines with a newline ending every file</span><br><span class="line">[*]</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 2</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">trim_trailing_whitespace &#x3D; true</span><br><span class="line">insert_final_newline &#x3D; true</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace &#x3D; false</span><br><span class="line"></span><br><span class="line">[*.gradle]</span><br><span class="line">indent_size &#x3D; 4</span><br><span class="line"></span><br><span class="line">[BUCK]</span><br><span class="line">indent_size &#x3D; 4</span><br></pre></td></tr></table></figure><h2 id="yorkie-amp-lint-staged"><a href="#yorkie-amp-lint-staged" class="headerlink" title="yorkie &amp; lint-staged"></a>yorkie &amp; lint-staged</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D yorkie lint-staged</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;gitHooks&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// you can add wxml/html...</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;less,md,json&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;prettier --write&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote><p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p></blockquote><table><thead><tr><th align="center">微信</th><th align="center">投食</th><th align="center">公众号</th></tr></thead><tbody><tr><td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td></tr></tbody></table><p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/24/aGtwAFpOXledCUc.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="掘金专栏" scheme="http://youngjuning.js.org/tags/%E6%8E%98%E9%87%91%E4%B8%93%E6%A0%8F/"/>
    
      <category term="ESLint" scheme="http://youngjuning.js.org/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>怕什么真理无穷，进一寸有一寸的欢喜 | 掘金征文</title>
    <link href="http://youngjuning.js.org/2020/07/%E6%80%95%E4%BB%80%E4%B9%88%E7%9C%9F%E7%90%86%E6%97%A0%E7%A9%B7%EF%BC%8C%E8%BF%9B%E4%B8%80%E5%AF%B8%E6%9C%89%E4%B8%80%E5%AF%B8%E7%9A%84%E6%AC%A2%E5%96%9C-%E6%8E%98%E9%87%91%E5%BE%81%E6%96%87/"/>
    <id>http://youngjuning.js.org/2020/07/%E6%80%95%E4%BB%80%E4%B9%88%E7%9C%9F%E7%90%86%E6%97%A0%E7%A9%B7%EF%BC%8C%E8%BF%9B%E4%B8%80%E5%AF%B8%E6%9C%89%E4%B8%80%E5%AF%B8%E7%9A%84%E6%AC%A2%E5%96%9C-%E6%8E%98%E9%87%91%E5%BE%81%E6%96%87/</id>
    <published>2020-07-16T05:06:51.000Z</published>
    <updated>2020-07-16T05:06:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/07/16/zxg29fl1ptGhIAb.png" alt=""></p><a id="more"></a><p>大家好，我是俊宁，也是我的名字，不是我自恋，是我朋友同事都这么叫我（懒的起花名🐶），<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL3d4LXByb21pc2UtcHJv" title="https://github.com/youngjuning/wx-promise-pro">wx-promise-pro<i class="fa fa-external-link"></i></span> 的作者，微信是 <code>yang_jun_ning</code>。</p><h2 id="我的现状"><a href="#我的现状" class="headerlink" title="我的现状"></a>我的现状</h2><ol><li>专注于：React、React Native、Node</li><li>目标：成为全栈工程师（非全干工程师）</li></ol><h2 id="上半年总结"><a href="#上半年总结" class="headerlink" title="上半年总结"></a>上半年总结</h2><p>2020 的上半年注定是不平凡的一年，不管什么谈话基本都可以从疫情聊起：</p><ul><li>朋友A：你们公司复工了吗？还在家办公吗？</li><li>朋友B：你们工资及时发了吗？公司不会倒闭了吧？</li><li>某亲戚：今年这疫情弄得，办个婚礼都没人去，好多都推了。</li><li>面试官：你为什么从之前公司离职？<ul><li>我：教育行业，因为疫情拖欠了俩月工资</li></ul></li></ul><p>总的来说，疫情对我的直接影响还挺大。工作上来说，如果不是被拖欠工资，大概率不会这么快离职；生活上来说，订婚从2月份推迟到了4月底才办…</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>上家公司是从 2018年3月干到2020年5月的，整整两年，写过小程序，负责过公众号、参与过基于element 和 vue 的后台程序开发、基于React Native开发过业务，搞过React Native 项目的架构。离职时，职位停留在了移动端开发负责人，实现了月薪过万的小目标。</p><p>离职原因一方面是因为薪资拖欠，另一方面是在公司也摸到了天花板。第二方面是最让我难受的，这天花板离我的心理预期太远。之前之所以一直拖着没跳槽是信了leader的核心人员以后不会亏待。长期的境况与心理预期不符不管是对公司还是对自己都是不负责任的，再加上疫情拖欠薪资，直接造成了房贷的还款困难（年前刚开始自己承担全部贷款），我最终下定决心离开工作了两年的公司。</p><p>再来说一下新工作吧，本人找工作的base是郑州，一个互联网三线城市。刚开始主动打招呼的和海投回应的都很多，9成都是 Vue 开发，甚至需要维护 jquery 项目。我心想还是主动投投 React Native 岗位吧，现实再次打了我的脸，郑州这边 RN 岗位两个手数的过来，并且范围都是 8-10K，甚至 4-8K。抱着快要放弃的心态，再次缩小范围投递了几家 React 技术栈的公司，最终实现了试用期工资高于上家的目标。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>在 4月初与小女友定亲啦，当时的沸点也得到了掘友的祝福，证明了掘金是一个有爱的有温度的技术社区。</p><blockquote><p> 多图预警！！！！！！</p></blockquote><p><img src="https://i.loli.net/2020/07/17/bSTtBd25R8DQgxc.jpg" alt=""></p><p><img src="https://i.loli.net/2020/07/17/KTA5E8pIHlCcmYt.jpg" alt=""></p><p><img src="https://i.loli.net/2020/07/17/VJE1z9hnwGLWy7S.jpg" alt=""></p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ol><li><p>看完了一个关于 Linux 的视频教程，并写下了<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTgxZTJkYjUxODgyNTczN2I0YWQ5MTE=" title="https://juejin.im/post/5e81e2db518825737b4ad911">写给前端工程师的Linux实战教程【持续更新】<i class="fa fa-external-link"></i></span>。</p></li><li><p>看完了《Docker从入门到实践》，并写下<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTgzOWYyODUxODgyNTczYWI0NGYxYjQ=" title="https://juejin.im/post/5e839f2851882573ab44f1b4">一个前端工程师的Docker学习笔记【持续更新】<i class="fa fa-external-link"></i></span>，感谢掘金编写的推荐，获得了不少流量扶持。</p></li><li><p>工作需要，总结了React Native 开发经验并输出了<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTUzNWUwZGYyNjVkYTU3NmI1NjYzOTc=" title="https://juejin.im/post/5e535e0df265da576b566397">React Native 项目架构面面观【持续更新】<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTUwZjNhY2U1MWQ0NTI2ZWY1ZjhkNTY=" title="https://juejin.im/post/5e50f3ace51d4526ef5f8d56">react-navigation 5.x 最佳实践<i class="fa fa-external-link"></i></span> 等多篇相关博文，这几篇也成为了几十篇文章中阅读量和点赞最多的。果然我还是个只能靠实力的蓝孩子。这个系列还有更多的存货没有放出来。待我新工作转正继续输出。</p></li><li><p>新公司入职有两个月了，独立负责了两个不大的中台项目，技术栈是基于 umijs 的，而 umijs 基于 dva、antd、react-router，而 dva 又基于 redux。两个项目下来，我的水平停留在了熟练基于 umijs 开发业务。为后续研究源码和性能优化打下了基础。这方面的经验我写了一篇<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZWYxZGQ2MmYyNjVkYTAyOTgxZjAyNjY=" title="https://juejin.im/post/5ef1dd62f265da02981f0266">UmiJS开发技巧【持续更新】<i class="fa fa-external-link"></i></span> 做了总结。</p></li></ol><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><p>我现在混得社区比较少，一个是GitHub，一个是掘金。短期内也没计划再混其他的社区（不想精力分散太多）。</p><h4 id="掘金"><a href="#掘金" class="headerlink" title="掘金"></a>掘金</h4><p>从2月份到现在共发布了30篇博客。</p><p><img src="https://i.loli.net/2020/07/25/B4hfwZtiTGWmuga.png" alt=""></p><p>很多朋友都是通过<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTUzNWUwZGYyNjVkYTU3NmI1NjYzOTc=" title="https://juejin.im/post/5e535e0df265da576b566397">React Native 项目架构面面观【持续更新】<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZTUwZjNhY2U1MWQ0NTI2ZWY1ZjhkNTY=" title="https://juejin.im/post/5e50f3ace51d4526ef5f8d56">react-navigation 5.x 最佳实践<i class="fa fa-external-link"></i></span> 这两篇文章认识我的，从推送来看，都是在点赞这两篇文章之后关注我。后期我也会继续输出Hybrid相关的技术分享。</p><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p>假期的时候，我更新了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5nL3d4LXByb21pc2UtcHJv" title="https://github.com/youngjuning/wx-promise-pro">wx-promise-pro<i class="fa fa-external-link"></i></span>，支持了TS，并优化了内部实现。更新之后到现在累计增加100star。这是一个微信小程序的增强插件，年前已被 <span class="exturl" data-url="aHR0cHM6Ly9oZWxsb2dpdGh1Yi5jb20vcGVyaW9kaWNhbC92b2x1bWUvNDcvI3d4LXByb21pc2UtcHJv" title="https://hellogithub.com/periodical/volume/47/#wx-promise-pro">HelloGitHub 47期<i class="fa fa-external-link"></i></span> 收录，有 20+ 的 github 库在使用，欢迎尝试。</p><p>最后，秀一波我的 README：</p><p><img src="https://i.loli.net/2020/07/17/jkGrLHhA8lP57Bx.png" alt=""></p><h2 id="下半年愿景"><a href="#下半年愿景" class="headerlink" title="下半年愿景"></a>下半年愿景</h2><ol><li>每天看 React 文档、视频、博客、源码以达到精通 React 的程度</li><li>不间断读 Lodash 源码并输入系列源码解析文章</li><li>每天一道算法题训练大脑</li><li>把自己的 React Native 开发经验总结输出</li><li>若有余力，学习 Node 后端开发</li></ol><h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote><p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p></blockquote><table><thead><tr><th align="center">微信</th><th align="center">投食</th><th align="center">公众号</th></tr></thead><tbody><tr><td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td></tr></tbody></table><p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/16/zxg29fl1ptGhIAb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="总结" scheme="http://youngjuning.js.org/categories/%E6%80%BB%E7%BB%93/"/>
    
      <category term="年中总结" scheme="http://youngjuning.js.org/categories/%E6%80%BB%E7%BB%93/%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="掘金专栏" scheme="http://youngjuning.js.org/tags/%E6%8E%98%E9%87%91%E4%B8%93%E6%A0%8F/"/>
    
      <category term="年中总结" scheme="http://youngjuning.js.org/tags/%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>微精通之Vue移动端开发【持续更新】</title>
    <link href="http://youngjuning.js.org/2020/07/%E5%BE%AE%E7%B2%BE%E9%80%9A%E4%B9%8BVue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>http://youngjuning.js.org/2020/07/%E5%BE%AE%E7%B2%BE%E9%80%9A%E4%B9%8BVue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/</id>
    <published>2020-07-13T07:37:03.000Z</published>
    <updated>2020-07-13T07:37:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mubu.com/doc/7ZqGKUzpwrH"><img src="https://i.loli.net/2020/07/13/B1Hlcn3iazQ9fxs.png" alt=""></a></p><p>精通任何技能都是需要时间的，但是往往工作中是不会给你这个时间的，尤其是开发工作。新技术层出不穷，每个项目都可能技术栈不一样。</p><p>无法改变环境，那么就只能改变我们自身。如果让公司等你精通再开发，那你只能被淘汰。但如果毫无准备进入开发，项目质量又无从谈起，而且项目也可能失控。而微精通就是框定一个最小范围，快速熟悉完成任务所涉及的内容。今天我就拿 Vue 移动端开发做一个实验。</p><a id="more"></a><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Vue Cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个项目</span></span><br><span class="line">vue create zhiliao-vant</span><br></pre></td></tr></table></figure><h3 id="配置Prettier"><a href="#配置Prettier" class="headerlink" title="配置Prettier"></a>配置Prettier</h3><p>1、安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add prettier eslint-plugin-prettier eslint-config-prettier -D</span><br></pre></td></tr></table></figure><ul><li>prettier: Prettier CLI</li><li>eslint-plugin-prettier: 以 ESLint 插件的形式运行 prettier</li><li>eslint-config-prettier: 关闭所有不必要或可能与 prettier 的规则冲突的 ESLint 规则。一定要放到最后。</li></ul><p>2、配置  <code>.eslintrc.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/airbnb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:prettier/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;prettier/vue&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">&#x27;babel-eslint&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="comment">// add your rules</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3、新建 <code>/.prettierrc.js</code>，并写入如下配置</p><blockquote><p>注意: 要不要加分号的原则是<strong>领导为大，喜好为小</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  printWidth: <span class="number">120</span>, <span class="comment">// 一行的字符数，如果超过会进行换行，默认为80</span></span><br><span class="line">  tabWidth: <span class="number">2</span>, <span class="comment">// tab缩进大小,默认为2</span></span><br><span class="line">  useTabs: <span class="literal">false</span>, <span class="comment">// 使用tab缩进，默认false</span></span><br><span class="line">  semi: <span class="literal">false</span>, <span class="comment">// 使用分号, 默认true</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 行尾逗号,默认none,可选 none|es5|all</span></span><br><span class="line"><span class="comment">   * es5 包括es5中的数组、对象</span></span><br><span class="line"><span class="comment">   * all 包括函数对象等所有可选</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  trailingComma: <span class="string">&#x27;es5&#x27;</span>,</span><br><span class="line">  singleQuote: <span class="literal">true</span>, <span class="comment">// 使用单引号, 默认false(在jsx中配置无效, 默认都是双引号)</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 对象中的空格 默认true</span></span><br><span class="line"><span class="comment">   * true: &#123; foo: bar &#125;</span></span><br><span class="line"><span class="comment">   * false: &#123;foo: bar&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  bracketSpacing: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * JSX标签闭合位置 默认false</span></span><br><span class="line"><span class="comment">   * false:</span></span><br><span class="line"><span class="comment">   * &lt;div</span></span><br><span class="line"><span class="comment">   *  className=&quot;&quot;</span></span><br><span class="line"><span class="comment">   *  style=&#123;&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">   * &gt;</span></span><br><span class="line"><span class="comment">   * true:</span></span><br><span class="line"><span class="comment">   * &lt;div</span></span><br><span class="line"><span class="comment">   *  className=&quot;&quot;</span></span><br><span class="line"><span class="comment">   * style=&#123;&#123;&#125;&#125; &gt;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  jsxBracketSameLine: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 箭头函数参数括号 默认avoid 可选 avoid| always</span></span><br><span class="line"><span class="comment">   * avoid 能省略括号的时候就省略 例如x =&gt; x</span></span><br><span class="line"><span class="comment">   * always 总是有括号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  arrowParens: <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">  vueIndentScriptAndStyle: <span class="literal">false</span>, <span class="comment">// vue 文件 script 和 style 标签缩进，默认false</span></span><br><span class="line">  endOfLine: <span class="string">&#x27;lf&#x27;</span>, <span class="comment">// 强制使用 unix 风格的换行符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vscode-配置"><a href="#vscode-配置" class="headerlink" title="vscode 配置"></a>vscode 配置</h3><p>新建 <code>/.vscode/settings.json</code> 并写入以下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span>, <span class="comment">// 关闭保存时自动格式化，防止与 eslint 冲突</span></span><br><span class="line">  <span class="attr">&quot;files.eol&quot;</span>: <span class="string">&quot;\n&quot;</span>, <span class="comment">// 统一默认行尾字符为 LF</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span> <span class="comment">// 保存时自动修复</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 关闭 vetur 验证功能</span></span><br><span class="line">  <span class="attr">&quot;vetur.validation.script&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;vetur.validation.style&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;vetur.validation.template&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;vetur.format.enable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 禁用 prettier 插件，避免与 eslint 冲突，建议删除 vscode-prettier</span></span><br><span class="line">  <span class="attr">&quot;prettier.disableLanguages&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescriptreact&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jsonc&quot;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果是团队协作的项目，请删除 <code>.gitignore</code> 中的 <code>.vscode</code> ，将配置加入到代码库。</p></blockquote><h3 id="Format初始代码"><a href="#Format初始代码" class="headerlink" title="Format初始代码"></a>Format初始代码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn lint</span><br></pre></td></tr></table></figure><h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="@vue/cli"></a>@vue/cli</h2><h3 id="vuerc"><a href="#vuerc" class="headerlink" title="~/.vuerc"></a>~/.vuerc</h3><p>被保存的 preset 将会存在用户的 home 目录下一个名为 <code>.vuerc</code> 的 JSON 文件里。如果你想要修改被保存的 <code>preset/</code> 选项，可以编辑这个文件。</p><p>在项目创建的过程中，你也会被提示选择喜欢的包管理器或使用<span class="exturl" data-url="aHR0cHM6Ly9ucG0udGFvYmFvLm9yZy8=" title="https://npm.taobao.org/">淘宝 npm 镜像源<i class="fa fa-external-link"></i></span>以更快地安装依赖。这些选择也将会存入 <code>~/.vuerc</code>。下面是我的配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;useTaobaoRegistry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span>: <span class="string">&quot;yarn&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;javascript&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;useConfigFiles&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;plugins&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@vue/cli-plugin-babel&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">&quot;@vue/cli-plugin-router&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;historyMode&quot;</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;@vue/cli-plugin-vuex&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;config&quot;</span>: <span class="string">&quot;airbnb&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;lintOn&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;save&quot;</span>,</span><br><span class="line">            <span class="string">&quot;commit&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;cssPreprocessor&quot;</span>: <span class="string">&quot;less&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="git-hooks"><a href="#git-hooks" class="headerlink" title="git hooks"></a>git hooks</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;gitHooks&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;*.&#123;js,jsx,vue&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;vue-cli-service lint&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;*.&#123;md,json&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;prettier --write&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="vue-cli3出现Invalid-Host-header的解决方案"><a href="#vue-cli3出现Invalid-Host-header的解决方案" class="headerlink" title="vue-cli3出现Invalid Host header的解决方案"></a>vue-cli3出现Invalid Host header的解决方案</h4><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1emhhbzU5My9hcnRpY2xlL2RldGFpbHMvODU5MTg4Njk=" title="https://blog.csdn.net/guzhao593/article/details/85918869">vue-cli3出现Invalid Host header的解决方案<i class="fa fa-external-link"></i></span></p></blockquote><p><strong>产生原因</strong></p><p>新版的 <code>webpack-dev-server</code> 增加了安全验证，默认检查<code>hostname</code>，如果<code>hostname</code>不是配置内的，将中断访问。</p><p><strong>解决方案</strong></p><p>对<code>vue.config.js</code>进行如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vant-UI"><a href="#Vant-UI" class="headerlink" title="Vant UI"></a>Vant UI</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add vant</span><br></pre></td></tr></table></figure><h3 id="按需引入组件"><a href="#按需引入组件" class="headerlink" title="按需引入组件"></a>按需引入组件</h3><p>安装 <code>babel-import-plugin</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add babel-plugin-import -D</span><br></pre></td></tr></table></figure><p>对于使用 babel7 的用户，可以在 <code>babel.config.js</code> 中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [<span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>],</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;import&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        libraryName: <span class="string">&#x27;vant&#x27;</span>,</span><br><span class="line">        libraryDirectory: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">        style: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;vant&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着你可以在代码中直接引入 Vant 组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line">Vue.use(Button);</span><br></pre></td></tr></table></figure><h3 id="配置基于-Rem-的适配方案"><a href="#配置基于-Rem-的适配方案" class="headerlink" title="配置基于 Rem 的适配方案"></a>配置基于 Rem 的适配方案</h3><p>Vant 中的样式默认使用<code>px</code>作为单位，如果需要使用<code>rem</code>单位，推荐使用以下两个工具：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2N1dGgvcG9zdGNzcy1weHRvcmVt" title="https://github.com/cuth/postcss-pxtorem">postcss-pxtorem<i class="fa fa-external-link"></i></span> 是一款 postcss 插件，用于将单位转化为 rem</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZmUvbGliLWZsZXhpYmxl" title="https://github.com/amfe/lib-flexible">lib-flexible<i class="fa fa-external-link"></i></span> 用于设置 rem 基准值</li></ul><p>1、安装依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add amfe-flexible</span><br><span class="line">$ yarn add postcss-pxtorem -D</span><br></pre></td></tr></table></figure><p>2、在根目录新建 <code>postcss.config.js</code>，并写入以下配置：</p><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdXphbi92YW50L2lzc3Vlcy8xMTgx" title="https://github.com/youzan/vant/issues/1181">设计稿是750px，根元素应该设置75，但是vant转换后好小，要改成35才行<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWltZWkvcC8xMTMxOTY1Ny5odG1s" title="https://www.cnblogs.com/yimei/p/11319657.html">使用vue vantUi框架 根字体是37.5 和默认根字体75不一致，导致页面组件样式变小<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">&#123; file &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> designWidth = file.dirname.includes(<span class="string">&#x27;node_modules/vant&#x27;</span>) ? <span class="number">37.5</span> : <span class="number">75</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    plugins: &#123;</span><br><span class="line">      autoprefixer: &#123;</span><br><span class="line">        overrideBrowserslist: [<span class="string">&#x27;Android 4.1&#x27;</span>, <span class="string">&#x27;iOS 7.1&#x27;</span>, <span class="string">&#x27;Chrome &gt; 31&#x27;</span>, <span class="string">&#x27;ff &gt; 31&#x27;</span>, <span class="string">&#x27;ie &gt;= 8&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;postcss-pxtorem&#x27;</span>: &#123;</span><br><span class="line">        rootValue: designWidth,</span><br><span class="line">        propList: [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;!border&#x27;</span>],</span><br><span class="line">        selectorBlackList: [<span class="string">&#x27;.ignore&#x27;</span>, <span class="string">&#x27;.hairlines&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意: 你可以使用 <code>Px</code> 或 <code>PX</code> 来让 <code>postcss-pxtorem</code> 忽略转换，而且这样浏览器也能识别。</p></blockquote><p>3、在 <code>src/main.js</code> 中引入 <code>amfe-flexible</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">import &#39;amfe-flexible&#39;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="底部安全区适配"><a href="#底部安全区适配" class="headerlink" title="底部安全区适配"></a>底部安全区适配</h3><p>iPhone X 等机型底部存在底部指示条，指示条的操作区域与页面底部存在重合，容易导致用户误操作，因此我们需要针对这些机型进行底部安全区适配。Vant 中部分组件提供了<code>safe-area-inset-bottom</code>属性，设置该属性后，即可在对应的机型上开启适配，如下示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 head 标签中添加 meta 标签，并设置 viewport-fit=cover 值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, viewport-fit=cover&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启 safe-area-inset-bottom 属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-number-keyboard</span> <span class="attr">safe-area-inset-bottom</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置自定义主题色方案"><a href="#配置自定义主题色方案" class="headerlink" title="配置自定义主题色方案"></a>配置自定义主题色方案</h3><h4 id="1、按需引入样式"><a href="#1、按需引入样式" class="headerlink" title="1、按需引入样式"></a>1、按需引入样式</h4><p>在 <code>babel.config.js</code> 中配置按需引入样式源文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;import&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        libraryName: <span class="string">&#x27;vant&#x27;</span>,</span><br><span class="line">        libraryDirectory: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">        <span class="comment">// 指定样式路径</span></span><br><span class="line">        style: <span class="function">(<span class="params">name</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>/style/less`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;vant&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2、-修改样式变量"><a href="#2、-修改样式变量" class="headerlink" title="2、 修改样式变量"></a>2、 修改样式变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add less less-loader</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      less: &#123;</span><br><span class="line">        modifyVars: &#123;</span><br><span class="line">          <span class="comment">// 直接覆盖变量</span></span><br><span class="line">          <span class="string">&#x27;text-color&#x27;</span>: <span class="string">&#x27;#111&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;border-color&#x27;</span>: <span class="string">&#x27;#eee&#x27;</span>,</span><br><span class="line">          <span class="comment">// 或者可以通过 less 文件覆盖（文件路径为绝对路径）</span></span><br><span class="line">          hack: <span class="string">&#x27;true; @import &quot;your-less-file-path.less&quot;;&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Vant 使用了 <span class="exturl" data-url="aHR0cDovL2xlc3Njc3Mub3JnLw==" title="http://lesscss.org/">Less<i class="fa fa-external-link"></i></span> 对样式进行预处理，并内置了一些样式变量，下面是一些基本的样式变量，所有可用的颜色变量请参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdXphbi92YW50L2Jsb2IvZGV2L3NyYy9zdHlsZS92YXIubGVzcw==" title="https://github.com/youzan/vant/blob/dev/src/style/var.less">配置文件<i class="fa fa-external-link"></i></span>。</p></blockquote><h3 id="配置基于-Viewport-的适配方案（推荐）"><a href="#配置基于-Viewport-的适配方案（推荐）" class="headerlink" title="配置基于 Viewport 的适配方案（推荐）"></a>配置基于 Viewport 的适配方案（推荐）</h3><p>该方案和<strong>配置基于 Rem 的适配方案</strong>是互斥的，请二选一。</p><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC91LzQzODIzODYvYmxvZy80MjkwNzA3" title="https://my.oschina.net/u/4382386/blog/4290707">移动端布局之postcss-px-to-viewport（兼容vant）<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY25sb29wL3AvOTY5NzIyOS5odG1s" title="https://www.cnblogs.com/cnloop/p/9697229.html">vue —— 利用 viewport 进行适配<i class="fa fa-external-link"></i></span></p></blockquote><p>1、安装 postcss-px-to-viewport</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add postcss-px-to-viewport -D</span></span><br></pre></td></tr></table></figure><p>2、配置<code>postcss.config.js</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">&#123; file &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> designWidth = file.dirname.includes(<span class="string">&#x27;node_modules/vant&#x27;</span>) ? <span class="number">375</span> : <span class="number">750</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    plugins: &#123;</span><br><span class="line">      autoprefixer: &#123;</span><br><span class="line">        <span class="comment">// 用来给不同的浏览器自动添加相应前缀，如-webkit-，-moz-等等</span></span><br><span class="line">        overrideBrowserslist: [</span><br><span class="line">          <span class="string">&#x27;Android 4.1&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;iOS 7.1&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;Chrome &gt; 31&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;ff &gt; 31&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;ie &gt;= 8&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;postcss-px-to-viewport&quot;</span>: &#123;</span><br><span class="line">          unitToConvert: <span class="string">&quot;px&quot;</span>, <span class="comment">// 要转化的单位</span></span><br><span class="line">        viewportWidth: designWidth, <span class="comment">// UI设计稿的宽度</span></span><br><span class="line">        unitPrecision: <span class="number">6</span>, <span class="comment">// 转换后的精度，即小数点位数</span></span><br><span class="line">        propList: [<span class="string">&quot;*&quot;</span>,<span class="string">&quot;!border&quot;</span>], <span class="comment">// 指定转换的css属性的单位，*代表全部css属性的单位都进行转换</span></span><br><span class="line">        viewportUnit: <span class="string">&quot;vw&quot;</span>, <span class="comment">// 指定需要转换成的视窗单位，默认vw</span></span><br><span class="line">        fontViewportUnit: <span class="string">&quot;vw&quot;</span>, <span class="comment">// 指定字体需要转换成的视窗单位，默认vw</span></span><br><span class="line">        selectorBlackList: [<span class="string">&#x27;.ignore&#x27;</span>, <span class="string">&#x27;.hairlines&#x27;</span>], <span class="comment">// 指定不转换为视窗单位的类名</span></span><br><span class="line">        minPixelValue: <span class="number">1</span>, <span class="comment">// 默认值1，小于或等于1px则不进行转换</span></span><br><span class="line">        landscape: <span class="literal">false</span> <span class="comment">// 是否处理横屏情况</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>propList</code>: 当有些属性的单位我们不希望转换的时候，可以添加在数组后面，并在前面加上<code>!</code>号，如<code>propList: [&quot;*&quot;,&quot;!border&quot;]</code>,这表示：所有css属性的属性的单位都进行转化，除了<code>border</code>的</li><li><code>selectorBlackList</code>：转换的黑名单，在黑名单里面的我们可以写入字符串，只要类名包含有这个字符串，就不会被匹配。比如<code>selectorBlackList: [&#39;wrap&#39;]</code>,它表示形如<code>wrap</code>,<code>my-wrap</code>,<code>wrapper</code>这样的类名的单位，都不会被转换</li></ul><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><h3 id="vue中style-scope深度访问新方式-v-deep"><a href="#vue中style-scope深度访问新方式-v-deep" class="headerlink" title="vue中style scope深度访问新方式(::v-deep)"></a>vue中style scope深度访问新方式(<code>::v-deep</code>)</h3><blockquote><p>参考： <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMTU3NjM0OA==" title="https://segmentfault.com/a/1190000021576348">vue中style scope深度访问新方式(::v-deep)<i class="fa fa-external-link"></i></span></p></blockquote><p>由于使用 scoped 后，父组件的样式将不会渗透到子组件中。官方引入了 <span class="exturl" data-url="aHR0cHM6Ly92dWUtbG9hZGVyLnZ1ZWpzLm9yZy96aC9ndWlkZS9zY29wZWQtY3NzLmh0bWwj5rex5bqm5L2c55So6YCJ5oup5Zmo" title="https://vue-loader.vuejs.org/zh/guide/scoped-css.html#深度作用选择器">深度作用选择器<i class="fa fa-external-link"></i></span>，来解决这个问题。记得之前使用的是 <code>/deep/</code>，据说这个属性有兼容问题，现在引入了新方式：<code>::v-deep</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#editDoctorAdvice</span> &#123;</span><br><span class="line">  .topSearch &#123;</span><br><span class="line">    <span class="selector-tag">float</span>: <span class="selector-tag">left</span>;</span><br><span class="line">    <span class="selector-tag">margin-right</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">::v-deep</span> <span class="selector-class">.el-input__inner</span> &#123;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">6px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.dateTimeClass</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzlmMjI4NzZmYjlhMDVlNDI1NTU2ZWQ=" title="https://juejin.im/post/5c9f22876fb9a05e425556ed">Vue入门指南(快速上手vue)<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTBjMTkxZjZmYjlhMDQ1MTQ2Mzk0MTk=" title="https://juejin.im/post/5a0c191f6fb9a04514639419">vue快速入门的三个小实例<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NoaW11cmFpL2h0dHAtcHJveHktbWlkZGxld2FyZQ==" title="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware<i class="fa fa-external-link"></i></span></li></ul><h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote><p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p></blockquote><table><thead><tr><th align="center">微信</th><th align="center">投食</th><th align="center">公众号</th></tr></thead><tbody><tr><td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td></tr></tbody></table><p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://mubu.com/doc/7ZqGKUzpwrH&quot;&gt;&lt;img src=&quot;https://i.loli.net/2020/07/13/B1Hlcn3iazQ9fxs.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;精通任何技能都是需要时间的，但是往往工作中是不会给你这个时间的，尤其是开发工作。新技术层出不穷，每个项目都可能技术栈不一样。&lt;/p&gt;
&lt;p&gt;无法改变环境，那么就只能改变我们自身。如果让公司等你精通再开发，那你只能被淘汰。但如果毫无准备进入开发，项目质量又无从谈起，而且项目也可能失控。而微精通就是框定一个最小范围，快速熟悉完成任务所涉及的内容。今天我就拿 Vue 移动端开发做一个实验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="掘金专栏" scheme="http://youngjuning.js.org/tags/%E6%8E%98%E9%87%91%E4%B8%93%E6%A0%8F/"/>
    
      <category term="vant" scheme="http://youngjuning.js.org/tags/vant/"/>
    
      <category term="微精通" scheme="http://youngjuning.js.org/tags/%E5%BE%AE%E7%B2%BE%E9%80%9A/"/>
    
  </entry>
  
  <entry>
    <title>使用 wml 进行模块调试</title>
    <link href="http://youngjuning.js.org/2020/07/%E4%BD%BF%E7%94%A8-wml-%E8%BF%9B%E8%A1%8C%E6%A8%A1%E5%9D%97%E8%B0%83%E8%AF%95/"/>
    <id>http://youngjuning.js.org/2020/07/%E4%BD%BF%E7%94%A8-wml-%E8%BF%9B%E8%A1%8C%E6%A8%A1%E5%9D%97%E8%B0%83%E8%AF%95/</id>
    <published>2020-07-10T08:15:07.000Z</published>
    <updated>2020-07-10T08:15:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/07/10/U9HfpMmCqe3ZV25.jpg" alt=""></p><p>前端模块开发已经成为了开发标准。模块开发带来的一大便利就是让我们可以跨页面甚至跨应用复用代码。当我们跨应用复用模块时，就需要借助 npm 把模块发布出去供各个系统调用。今天介绍的 wml 是一个进行模块调试的利器。</p><a id="more"></a><h2 id="wml-是什么"><a href="#wml-是什么" class="headerlink" title="wml 是什么"></a>wml 是什么</h2><p>wml 侦听某个文件夹中的更改（使用<span class="exturl" data-url="aHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vd2F0Y2htYW4v" title="https://facebook.github.io/watchman/">Watchman<i class="fa fa-external-link"></i></span>），然后将更改的文件复制到另一个文件夹中。</p><p>wml 是一个 CLI 工具，其工作方式与ln -s非常相似。首先，使用 <code>wml add</code> 命令设置链接，然后运行wml服务（<code>wml start</code>）开始监听。仅此而已！</p><h2 id="为什么使用-wml"><a href="#为什么使用-wml" class="headerlink" title="为什么使用 wml"></a>为什么使用 wml</h2><p>让我们面对现实吧，有时符号链接还不够。Github中有超过 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlYXJjaD91dGY4PSVFMiU5QyU5MyZxPXN1cHBvcnQrZm9yK3N5bWxpbmtzJnR5cGU9SXNzdWVz" title="https://github.com/search?utf8=%E2%9C%93&q=support+for+symlinks&type=Issues">1万个<i class="fa fa-external-link"></i></span> 关于 <strong>“support for symlinks”</strong>。</p><p>到目前为止，我遇到的两个例子是: React Native 的包管理器<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9pc3N1ZXMvNjM3" title="https://github.com/facebook/react-native/issues/637">缺失对 symlinks 的支持<i class="fa fa-external-link"></i></span> 和Webpack的 <span class="exturl" data-url="aHR0cDovL3dlYnBhY2suZ2l0aHViLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWwjbnBtLWxpbmtlZC1tb2R1bGVzLWRvZXNuLXQtZmluZC10aGVpci1kZXBlbmRlbmNpZXM=" title="http://webpack.github.io/docs/troubleshooting.html#npm-linked-modules-doesn-t-find-their-dependencies">inability to find linked modules dependencies<i class="fa fa-external-link"></i></span>。很多人的办法就是直接修改 <strong>node_modules</strong> 下的文件夹，但是这会造成很多问题：</p><ol><li>当同时有两个项目依赖你的模块时，就搞砸了</li><li>当不小心执行了 <code>npm install</code>，就又搞砸了</li><li>总之就是感觉这样不对</li></ol><p>wml 使用 Facebook 的超快 Watchman 来监视源文件夹中的更改，并将它们（并且仅复制）复制到目标文件夹中。</p><h2 id="安装-watchman"><a href="#安装-watchman" class="headerlink" title="安装 watchman"></a>安装 watchman</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vd2F0Y2htYW4vZG9jcy9pbnN0YWxs" title="https://facebook.github.io/watchman/docs/install">watchmamn Installation<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzg0NTE3NjQvaG93LXRvLWluc3RhbGwtd2F0Y2htYW4tb24td2luZG93cy13aW4xMA==" title="https://stackoverflow.com/questions/38451764/how-to-install-watchman-on-windows-win10">How to install Watchman on Windows (win10)?<i class="fa fa-external-link"></i></span></li></ul><p>windows 下为了让 <code>wml start</code> 能够工作需要执行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npmGlobalPrefix 可以通过 `npm prefix -g` 获取</span></span><br><span class="line">$ watchman watch <span class="variable">$&#123;npmGlobalPrefix&#125;</span>\node_modules\wml\src</span><br><span class="line"><span class="comment"># 一定要重启电脑让配置生效！</span></span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g wml</span><br></pre></td></tr></table></figure><h3 id="wml-命令"><a href="#wml-命令" class="headerlink" title="wml 命令"></a>wml 命令</h3><ul><li><code>wml add|a &lt;src&gt; &lt;dest&gt;</code>: 添加链接</li><li><code>wml start|s</code>: 开启 wml</li><li><code>wml list|ls</code>: 显示所有的链接</li><li><code>wml rm &lt;linkId&gt;</code>: 删除一个链接，传递 <code>all</code> 可以删除所有链接</li><li><code>wml enable|e</code>: 启用一个链接，传递 <code>all</code> 一键启用所有链接</li><li><code>wml disable|d</code>: 禁用一个链接，传递 <code>all</code> 一键禁用所有链接</li><li><code>watchman watch-del-all</code>: 修改 <code>.watchmanconfig</code> 之后需要清空 watchman 缓存</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="npm-scripts"><a href="#npm-scripts" class="headerlink" title="npm scripts"></a>npm scripts</h3><p>这是我的习惯，写脚本能提高工作效率：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;wml start&quot;</span>,</span><br><span class="line">    <span class="comment">// yarn wml:add &lt;dest&gt;</span></span><br><span class="line">    <span class="attr">&quot;wml:add&quot;</span>: <span class="string">&quot;wml add ./&quot;</span>,</span><br><span class="line">    <span class="comment">// 修改 `.watchmanconfig` 之后需要清空 watchman 缓存</span></span><br><span class="line">    <span class="attr">&quot;wml:clean&quot;</span>:<span class="string">&quot;watchman watch-del-all&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo-在模块中"><a href="#demo-在模块中" class="headerlink" title="demo 在模块中"></a>demo 在模块中</h3><p>你可能为了演示你的模块，而把演示项目放在模块项目中，这也很常见的。我们需要做一下配置：</p><p>1、修改 package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;zhiliao&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;wml start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;wml:add&quot;</span>: <span class="string">&quot;wml add ./ ./Example/node_modules/zhiliao/&quot;</span>,</span><br><span class="line">    <span class="comment">// 修改 `.watchmanconfig` 之后需要清空 watchman 缓存</span></span><br><span class="line">    <span class="attr">&quot;wml:clean&quot;</span>:<span class="string">&quot;watchman watch-del-all&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、配置 .watchmanconfig 文件把 Example 文件夹忽略掉</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;ignore_dirs&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;.git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yarn-error.log&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yarn.lock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;README.md&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Example&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote><p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p></blockquote><table><thead><tr><th align="center">微信</th><th align="center">投食</th><th align="center">公众号</th></tr></thead><tbody><tr><td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/07/28/6AyutjZ1XI4aUDV.jpg" width="200px"/></td></tr></tbody></table><p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/10/U9HfpMmCqe3ZV25.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;前端模块开发已经成为了开发标准。模块开发带来的一大便利就是让我们可以跨页面甚至跨应用复用代码。当我们跨应用复用模块时，就需要借助 npm 把模块发布出去供各个系统调用。今天介绍的 wml 是一个进行模块调试的利器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="掘金专栏" scheme="http://youngjuning.js.org/tags/%E6%8E%98%E9%87%91%E4%B8%93%E6%A0%8F/"/>
    
      <category term="vant" scheme="http://youngjuning.js.org/tags/vant/"/>
    
      <category term="微精通" scheme="http://youngjuning.js.org/tags/%E5%BE%AE%E7%B2%BE%E9%80%9A/"/>
    
  </entry>
  
  <entry>
    <title>UmiJS开发技巧</title>
    <link href="http://youngjuning.js.org/2020/06/UmiJS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    <id>http://youngjuning.js.org/2020/06/UmiJS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</id>
    <published>2020-06-08T02:17:55.000Z</published>
    <updated>2020-06-08T02:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/23/LYNpFyiax7mT1ZB.png" alt=""></p><a id="more"></a><p>鉴于 UmiJS 是重度的封装了很多工具和功能，对于刚接触的人形成了一层技术壁垒（大佬请忽略这句话）。所以我总结了使用UmiJS 开发中遇到的坑和技巧。</p><h2 id="本地开发-umi-dev-时关闭-mock"><a href="#本地开发-umi-dev-时关闭-mock" class="headerlink" title="本地开发 umi dev 时关闭 mock"></a>本地开发 umi dev 时关闭 mock</h2><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtaWpzL3VtaS9pc3N1ZXMvNDg2" title="https://github.com/umijs/umi/issues/486">希望本地开发 umi dev 时可以关闭 mock<i class="fa fa-external-link"></i></span></p></blockquote><p>方案一（推荐）：在 npm scripts 中加入以下指令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;MOCK=none umi dev&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案二：在 <code>.env</code> 文件里 设置 <code>MOCK=none</code> 也可以关闭</p><h2 id="jsx无法转到定义处"><a href="#jsx无法转到定义处" class="headerlink" title="jsx无法转到定义处"></a>jsx无法转到定义处</h2><p>在 <code>jsconfig.json</code> 文件中进行如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在umi中如何访问静态资源"><a href="#在umi中如何访问静态资源" class="headerlink" title="在umi中如何访问静态资源"></a>在umi中如何访问静态资源</h2><p>在umi框架中，图片等静态资源主要放到三个地方：</p><ol><li>在 <code>/public</code> 目录下，一般放共享资源。</li><li>在 <code>/src/assets/</code> 目录下，一般放全局静态资源。</li><li>在 <code>/src/pages/</code> 里的各个页面目录下，放在这里的好处是更符合组件化开发的思想，便于拷贝复用。</li></ol><p>由于静态资源会受 <code>context.config.publicPath</code> 的影响，所以在 <code>document.ejs</code> 中应该这样引入比较安全：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= context.config.publicPath %&gt;ol.js&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何访问静态图片"><a href="#如何访问静态图片" class="headerlink" title="如何访问静态图片"></a>如何访问静态图片</h2><p>1、如果在/public目录下的静态图片，可以直接输入绝对路径，假设/public/yay.jpg,访问方式如下：</p><p><code>&lt;img src=&quot;/yay.jpg&quot; /&gt;</code></p><p>注意：以上必须构建后在dist中才能看到。</p><p>2、在 <code>/src/assets</code> 和 <code>/src/pages/</code> 目录下的图片，不能通过输入绝对路径访问，必须先 <code>import</code> 导入，才能访问。或者 <code>require</code> 导入。比如 <code>/src/assets/yay.jpg</code> 需：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yayImg <span class="keyword">from</span> <span class="string">&#x27;/src/assets/yay.jpg&#x27;</span>;</span><br><span class="line">&lt;img src=&#123;yayImg&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&#123;<span class="built_in">require</span>(<span class="string">&#x27;/src/assets/yay.jpg&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure><p>为什么会这样呢？主要是因为构建时，<code>/public</code> 目录下的文件会原样复制到 <code>/dist/</code> 目录下，而 <code>/src/assets/</code> 和 <code>/src/pages/</code> 目录下的文件会被改名并复制到 <code>/dist/</code> 下。</p><h2 id="react-router三种传参方式"><a href="#react-router三种传参方式" class="headerlink" title="react-router三种传参方式"></a>react-router三种传参方式</h2><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly93d3cua2VsZWRlLndpbi9wb3N0cy9yZWFjdC1yb3V0ZXIlRTQlQjglODklRTclQTclOEQlRTQlQkMlQTAlRTUlOEYlODIlRTYlOTYlQjklRTUlQkMlOEYv" title="https://www.kelede.win/posts/react-router%E4%B8%89%E7%A7%8D%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/">react-router三种传参方式<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;umi/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RouterDemo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> onOk = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    router.push(&#123;</span><br><span class="line">      pathname: <span class="string">&#x27;test/router&#x27;</span>,</span><br><span class="line">      <span class="comment">// 点击之后，页面会跳转且地址上会跟上query的参数，?id=1&amp;code=123</span></span><br><span class="line">      <span class="comment">// 获取方式传值内容的方式: this.props.location.query</span></span><br><span class="line">      query: &#123;</span><br><span class="line">        id: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        code: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 点击之后，页面会跳转</span></span><br><span class="line">      <span class="comment">// 通过this.props.location.params可以获得params的值</span></span><br><span class="line">      <span class="comment">// params可以为其他名字，如text、nihao等，不一定是params</span></span><br><span class="line">      <span class="comment">// 刷新页面后，params的值会丢失。</span></span><br><span class="line">      params: &#123;</span><br><span class="line">        d: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        code: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 使用state传值和params传值一样，都不会再url中显示出来</span></span><br><span class="line">      <span class="comment">// state传值与params传值的区别是state传值刷新页面值还在，而使用params传值刷新后值不没有了。</span></span><br><span class="line">      state: &#123;</span><br><span class="line">        d: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        code: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onOk&#125;</span>&gt;</span>点击测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改浏览器上方图标"><a href="#修改浏览器上方图标" class="headerlink" title="修改浏览器上方图标"></a>修改浏览器上方图标</h2><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly92Mi51bWlqcy5vcmcvemgvZ3VpZGUvaHRtbC10ZW1wbGF0ZS5odG1sI+mFjee9ruaooeadvw==" title="https://v2.umijs.org/zh/guide/html-template.html#配置模板">HTML 配置模板<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 图片在 /public 下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= context.publicPath %&gt;favicon.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 图片在 /src/assets/ 下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= context.publicPath %&gt;static/favicon.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="支持-ie11"><a href="#支持-ie11" class="headerlink" title="支持 ie11"></a>支持 ie11</h2><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtaWpzL3VtaS9pc3N1ZXMvMTM5NA==" title="https://github.com/umijs/umi/issues/1394">ie11兼容问题<i class="fa fa-external-link"></i></span></p></blockquote><p>配置浏览器最低版本，会自动引入 polyfill 和做语法转换，配置的 targets 会和合并到默认值，所以不需要重复配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// umi默认兼容最低浏览器版本</span></span><br><span class="line"><span class="comment">// Default: &#123; chrome: 49, firefox: 45, safari: 10, edge: 13, ios: 10 &#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  targets: &#123;</span><br><span class="line">    ie: <span class="number">11</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="编译-node-modules-下的包"><a href="#编译-node-modules-下的包" class="headerlink" title="编译 node_modules 下的包"></a>编译 node_modules 下的包</h2><h3 id="UmiJS-2-x"><a href="#UmiJS-2-x" class="headerlink" title="UmiJS 2.x"></a>UmiJS 2.x</h3><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtaWpzL3VtaS9pc3N1ZXMvMjExNyNpc3N1ZWNvbW1lbnQtNTM5OTgyNDM0" title="https://github.com/umijs/umi/issues/2117#issuecomment-539982434">How to configure extraBabelIncludes<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">&#123;</span><br><span class="line">  extraBabelIncludes: [path.resolve(__dirname, <span class="string">&#x27;node_modules/&lt;package_name&gt;&#x27;</span>)],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UmiJS-3-1"><a href="#UmiJS-3-1" class="headerlink" title="UmiJS 3.1+"></a>UmiJS 3.1+</h3><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly91bWlqcy5vcmcvemgtQ04vY29uZmlnI25vZGVtb2R1bGVzdHJhbnNmb3JtLTMx" title="https://umijs.org/zh-CN/config#nodemodulestransform-31">nodeModulesTransform<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly91bWlqcy5vcmcvemgtQ04vZ3VpZGUvYm9vc3QtY29tcGlsZS1zcGVlZA==" title="https://umijs.org/zh-CN/guide/boost-compile-speed">如何做编译提速<i class="fa fa-external-link"></i></span></p></blockquote><p>UmiJS 3 删除了 <code>extraBabelIncludes</code> 和 <code>es5ImcompatibleVersions</code>，<code>node_modules</code> 也走 babel 编译后就没有意义了，无需配置</p><p>UmiJS 3 默认编译 <code>node_modules</code> 下的文件，带来一些收益的同时，也增加了额外的编译时间。如果不希望 <code>node_modules</code> 下的文件走 babel 编译，可通过以下配置减少 40% 到 60% 的编译时间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  nodeModulesTransform: &#123;</span><br><span class="line">    type: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">    exclude: [], <span class="comment">// 忽略的依赖库，包名，暂不支持绝对路径；可通过 exclude 配置添加额外需要编译的</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并行运行任务"><a href="#并行运行任务" class="headerlink" title="并行运行任务"></a>并行运行任务</h2><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2R2YWpzL2R2YS9pc3N1ZXMvNzU2I2lzc3VlY29tbWVudC0zMTc3NzA2MDg=" title="https://github.com/dvajs/dva/issues/756#issuecomment-317770608">求教多个异步的请求问题？<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9yZWR1eC1zYWdhLWluLWNoaW5lc2UuanMub3JnL2RvY3MvYWR2YW5jZWQvUnVubmluZ1Rhc2tzSW5QYXJhbGxlbC5odG1s" title="https://redux-saga-in-chinese.js.org/docs/advanced/RunningTasksInParallel.html">同时执行多个任务<i class="fa fa-external-link"></i></span></p></blockquote><p><code>yield</code> 指令可以很简单的将异步控制流以同步的写法表现出来，但与此同时我们将也会需要同时执行多个任务，我们不能直接这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误写法，effects 将按照顺序执行</span></span><br><span class="line"><span class="keyword">const</span> users = <span class="keyword">yield</span> call(fetch, <span class="string">&#x27;/users&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> repos = <span class="keyword">yield</span> call(fetch, <span class="string">&#x27;/repos&#x27;</span>)</span><br></pre></td></tr></table></figure><p>由于第二个 effect 将会在第一个 call 执行完毕才开始。所以我们需要这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确写法, effects 将会同步执行</span></span><br><span class="line">*effects(&#123;&#125;, &#123; all, call &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, repos] = <span class="keyword">yield</span> all([</span><br><span class="line">    call(fetch, <span class="string">&#x27;/users&#x27;</span>),</span><br><span class="line">    call(fetch, <span class="string">&#x27;/repos&#x27;</span>)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们需要 <code>yield</code> 一个包含 effects 的数组， generator 会被阻塞直到所有的 effects 都执行完毕，或者当一个 effect 被拒绝 （就像 <code>Promise.all</code> 的行为）。</p><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2R2YWpzL2R2YS9pc3N1ZXMvMjA5NA==" title="https://github.com/dvajs/dva/issues/2094">yield all中放put而出现的问题<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*effects(&#123;&#125;, &#123; all, call &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, repos] = <span class="keyword">yield</span> all([</span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">&#x27;getUsers&#x27;</span> &#125;),</span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">&#x27;getRepos&#x27;</span> &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者使用 <code>put.resolve</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*effects(&#123;&#125;, &#123; all, call &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, repos] = <span class="keyword">yield</span> all([</span><br><span class="line">    put.resolve(&#123; <span class="attr">type</span>: <span class="string">&#x27;getUsers&#x27;</span> &#125;),</span><br><span class="line">    put.resolve(&#123; <span class="attr">type</span>: <span class="string">&#x27;getRepos&#x27;</span> &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部覆盖antd-样式"><a href="#局部覆盖antd-样式" class="headerlink" title="局部覆盖antd 样式"></a>局部覆盖antd 样式</h2><p>由于业务的个性化需求，我们经常会遇到需要覆盖组件样式的情况，这里举个简单的例子。</p><p>antd Select 在多选状态下，默认会展示所有选中项，这里我们给它加一个限制高度，超过此高度就出滚动条。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Select</span><br><span class="line">  mode&#x3D;&quot;multiple&quot;</span><br><span class="line">  style&#x3D;&#123;&#123; width: 300 &#125;&#125;</span><br><span class="line">  placeholder&#x3D;&quot;Please select&quot;</span><br><span class="line">  className&#x3D;&#123;styles.customSelect&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;children&#125;</span><br><span class="line">&lt;&#x2F;Select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.customSelect</span> &#123;</span><br><span class="line">  :global &#123;</span><br><span class="line">    <span class="selector-class">.ant-select-selection</span> &#123;</span><br><span class="line">      <span class="attribute">max-height</span>: <span class="number">51px</span>;</span><br><span class="line">      <span class="attribute">overflow</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单，有两点需要注意：</p><ul><li>引入的 antd 组件类名没有被 CSS Modules 转化，所以被覆盖的类名 <code>.ant-select-selection</code> 必须放到 <code>:global</code> 中。</li><li>因为覆盖是全局性的。为了防止对其他 Select 组件造成影响，所以需要包裹额外的 className 限制样式的生效范围。</li></ul><h2 id="优化包大小"><a href="#优化包大小" class="headerlink" title="优化包大小"></a>优化包大小</h2><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZWY4NTgxY2U1MWQ0NTM0YzE0ZDlhNWY=" title="https://juejin.im/post/5ef8581ce51d4534c14d9a5f">H5 分包实现首屏加载时间优化<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzA4ZmU3ZDZmYjlhMDRhMGQ1NmE3MDI=" title="https://juejin.im/post/5c08fe7d6fb9a04a0d56a702">webapck4 玄妙的 SplitChunks Plugin<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtaWpzL3VtaS9pc3N1ZXMvMzUzNSNpc3N1ZWNvbW1lbnQtNjE3NTkwNTc5" title="https://github.com/umijs/umi/issues/3535#issuecomment-617590579">请问如何单独打包组件<i class="fa fa-external-link"></i></span></p></blockquote><h3 id="UmiJS-2-x-1"><a href="#UmiJS-2-x-1" class="headerlink" title="UmiJS 2.x"></a>UmiJS 2.x</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 忽略 moment 的 locale 文件，用于减少尺寸。</span></span><br><span class="line">  <span class="comment">// https://v2.umijs.org/zh/config/#ignoremomentlocale</span></span><br><span class="line">  ignoreMomentLocale: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 配置是否开启 treeShaking，默认关闭。</span></span><br><span class="line">  <span class="comment">// https://v2.umijs.org/zh/config/#treeshaking</span></span><br><span class="line">  treeShaking: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 通过 [webpack-chain](https://github.com/mozilla-neutrino/webpack-chain) 的 API 扩展或修改 webpack 配置。</span></span><br><span class="line">  <span class="comment">// https://v2.umijs.org/zh/config/#chainwebpack</span></span><br><span class="line">  chainWebpack(config) &#123;</span><br><span class="line">    config.optimization.splitChunks(&#123;</span><br><span class="line">      chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">      automaticNameDelimiter: <span class="string">&#x27;～&#x27;</span>,</span><br><span class="line">      name: <span class="literal">true</span>,</span><br><span class="line">      minSize: <span class="number">30000</span>,</span><br><span class="line">      minChunks: <span class="number">1</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        echarts: &#123;</span><br><span class="line">          name: <span class="string">&#x27;echarts&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/](echarts)[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-9</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        antd: &#123;</span><br><span class="line">          name: <span class="string">&#x27;antd&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/](@ant-design|antd|antd-mobile)[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-10</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          name: <span class="string">&#x27;vendors&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-11</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="comment">// 这是官方封装的一个插件集，包含 18 个常用的进阶功能。</span></span><br><span class="line">      <span class="comment">// https://v2.umijs.org/zh/plugin/umi-plugin-react.html#%E5%AE%89%E8%A3%85</span></span><br><span class="line">      <span class="string">&#x27;umi-plugin-react&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 默认是 [&#x27;umi&#x27;]，可修改，比如做了 vendors 依赖提取之后，会需要在 umi.js 之前加载 vendors.js</span></span><br><span class="line">        <span class="comment">// https://v2.umijs.org/zh/plugin/umi-plugin-react.html#chunks</span></span><br><span class="line">        chunks: [<span class="string">&#x27;vendors&#x27;</span>, <span class="string">&#x27;antd&#x27;</span>, <span class="string">&#x27;echarts&#x27;</span>, <span class="string">&#x27;umi&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UmiJS-3-x"><a href="#UmiJS-3-x" class="headerlink" title="UmiJS 3.x"></a>UmiJS 3.x</h3><blockquote><p>参考 <span class="exturl" data-url="aHR0cHM6Ly91bWlqcy5vcmcvemgtQ04vZG9jcy91cGdyYWRlLXRvLXVtaS0zIyVFNSU4RCU4NyVFNyVCQSVBNy11bWktcGx1Z2luLXJlYWN0LSVFNCVCOCVCQS11bWlqc3ByZXNldC1yZWFjdA==" title="https://umijs.org/zh-CN/docs/upgrade-to-umi-3#%E5%8D%87%E7%BA%A7-umi-plugin-react-%E4%B8%BA-umijspreset-react">升级 umi-plugin-react 为 @umijs/preset-react<i class="fa fa-external-link"></i></span></p></blockquote><p>由于 Umi 3 的配置方式是拍平的方式，还需要修改配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 忽略 moment 的 locale 文件，用于减少尺寸。</span></span><br><span class="line">  <span class="comment">// https://v2.umijs.org/zh/config/#ignoremomentlocale</span></span><br><span class="line">  ignoreMomentLocale: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 配置是否开启 treeShaking，默认关闭。</span></span><br><span class="line">  <span class="comment">// https://v2.umijs.org/zh/config/#treeshaking</span></span><br><span class="line">  treeShaking: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 通过 [webpack-chain](https://github.com/mozilla-neutrino/webpack-chain) 的 API 扩展或修改 webpack 配置。</span></span><br><span class="line">  <span class="comment">// https://v2.umijs.org/zh/config/#chainwebpack</span></span><br><span class="line">  chainWebpack(config) &#123;</span><br><span class="line">    config.optimization.splitChunks(&#123;</span><br><span class="line">      chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">      automaticNameDelimiter: <span class="string">&#x27;～&#x27;</span>,</span><br><span class="line">      name: <span class="literal">true</span>,</span><br><span class="line">      minSize: <span class="number">30000</span>,</span><br><span class="line">      minChunks: <span class="number">1</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        echarts: &#123;</span><br><span class="line">          name: <span class="string">&#x27;echarts&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/](echarts)[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-9</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        antd: &#123;</span><br><span class="line">          name: <span class="string">&#x27;antd&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/](@ant-design|antd|antd-mobile)[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-10</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          name: <span class="string">&#x27;vendors&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-11</span>,</span><br><span class="line">          enforce: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// https://umijs.org/zh-CN/config#chunks</span></span><br><span class="line">  chunks: [<span class="string">&#x27;vendors&#x27;</span>, <span class="string">&#x27;antd&#x27;</span>, <span class="string">&#x27;echarts&#x27;</span>, <span class="string">&#x27;umi&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="momentjs"><a href="#momentjs" class="headerlink" title="momentjs"></a>momentjs</h2><h3 id="使用中文配置"><a href="#使用中文配置" class="headerlink" title="使用中文配置"></a>使用中文配置</h3><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1X2xhbmxhbi9hcnRpY2xlL2RldGFpbHMvOTEwNDM2OTY=" title="https://blog.csdn.net/hu_lanlan/article/details/91043696">antd design国际化配置为中文时，日期组件中月与星期显示为英文，其他显示为中文<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LocaleProvider &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> zh_CN <span class="keyword">from</span> <span class="string">&#x27;antd/lib/locale-provider/zh_CN&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;moment/locale/zh-cn&#x27;</span>;</span><br><span class="line"></span><br><span class="line">moment.locale(<span class="string">&#x27;zh-cn&#x27;</span>);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">LocaleProvider</span> <span class="attr">locale</span>=<span class="string">&#123;zh_CN&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">App</span> /&gt;</span><span class="tag">&lt;/<span class="name">LocaleProvider</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><h3 id="替换-momentjs"><a href="#替换-momentjs" class="headerlink" title="替换 momentjs"></a>替换 momentjs</h3><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50ZC1kYXlqcy13ZWJwYWNrLXBsdWdpbg==" title="https://github.com/ant-design/antd-dayjs-webpack-plugin">antd-dayjs-webpack-plugin<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2RvY3MvcmVhY3QvcmVwbGFjZS1tb21lbnQtY24=" title="https://ant.design/docs/react/replace-moment-cn">替换 Moment.js<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMzY1MTA2MjA=" title="https://zhuanlan.zhihu.com/p/136510620">基于umi、antd的前端工程优化实践<i class="fa fa-external-link"></i></span></p></blockquote><p>请先删除 <code>ignoreMomentLocale: true</code> 配置再进行以下操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add antd-dayjs-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  chainWebpack(config) &#123;</span><br><span class="line">    <span class="comment">// antd moment -&gt; dayjs</span></span><br><span class="line">    <span class="comment">// 如果在 Ant Design 3.x 的项目中使用本插件，需要传入以下配置，指定 preset。</span></span><br><span class="line">    config.plugin(<span class="string">&#x27;moment2dayjs&#x27;</span>).use(<span class="string">&#x27;antd-dayjs-webpack-plugin&#x27;</span>, [</span><br><span class="line">      &#123;</span><br><span class="line">        preset: <span class="string">&#x27;antdv3&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果项目中需要使用中文语言，还要引入dayjs的中文语言包并与antd的ConfigProvider配合服用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置dayjs中文</span></span><br><span class="line"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">&#x27;dayjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dayjs/locale/zh-cn&#x27;</span></span><br><span class="line">dayjs.locale(<span class="string">&#x27;zh-cn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ConfigProvider &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhCN <span class="keyword">from</span> <span class="string">&#x27;antd/lib/locale-provider/zh_CN&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123;children&#125;) =&gt; <span class="xml"><span class="tag">&lt;<span class="name">ConfigProvider</span> <span class="attr">locale</span>=<span class="string">&#123;zhCN&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">ConfigProvider</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>通过上述配置后，使用DatePicker组件拿到的日期与之前一致，但可以直接使用dayjs的API操作日期，moment不复存在。最终dayjs打包体积为14.64KB，减小了330KB之多。</p><p>注：目前<span class="exturl" data-url="bWFpbHRvOmRheWpzQDEuOC4yMA==" title="mailto:dayjs@1.8.20">dayjs@1.8.20<i class="fa fa-external-link"></i></span>后有个bug会导致替换后WeekPicker显示不正常，1.8.21版本之后已修复。</p><h2 id="dva-loading-使用"><a href="#dva-loading-使用" class="headerlink" title="dva-loading 使用"></a>dva-loading 使用</h2><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82MWZlN2E1N2ZhZDQ=" title="https://www.jianshu.com/p/61fe7a57fad4">dva-loading 实践用法<i class="fa fa-external-link"></i></span></p></blockquote><p>loading 分为四种使用情况，下面依次用代码展示：</p><p><strong>1、全局</strong></p><p>监听的是应用中所有 effect 是否执行完毕，若执行完毕。loading 的值就变为 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;useSelector,useDispatch&#125; = <span class="string">&#x27;dva&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Spin&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">const</span> DemoPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;loading&#125; = useSelector(<span class="function"><span class="params">stores</span> =&gt;</span> (&#123;</span><br><span class="line">    loading: stores.loading</span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Spin spinning=&#123;loading.global&#125;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、model</strong></p><p>监听某个模块的所有 effect 是否执行完毕，若执行完毕。loading 的值就变为 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;useSelector,useDispatch&#125; = <span class="string">&#x27;dva&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Spin&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">const</span> DemoPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;loading,demoModel&#125; = useSelector(<span class="function"><span class="params">stores</span> =&gt;</span> (&#123;</span><br><span class="line">    loading: stores.loading,</span><br><span class="line">    demoModel: stores.loading,</span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Spin spinning=&#123;loading.models.demoModel&#125;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、effect:</strong></p><p>监听某个 effect 是否执行完毕，若执行完毕。loading 的值就变为 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;useSelector,useDispatch&#125; = <span class="string">&#x27;dva&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Spin&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">const</span> DemoPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;loading,demoModel&#125; = useSelector(<span class="function"><span class="params">stores</span> =&gt;</span> (&#123;</span><br><span class="line">    loading: stores.loading,</span><br><span class="line">    demoModel: stores.loading,</span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Spin spinning=&#123;loading.effects[<span class="string">&#x27;demoModel/effect1&#x27;</span>]/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、effects</strong></p><p>如果想监听某个 model 中的某几个 effect，可以使用 <code>||</code> 连接，当全部执行完毕时，返回的是 <code>undefined</code>，所以必须在末尾拼接 <code>|| false</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;useSelector,useDispatch&#125; = <span class="string">&#x27;dva&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Spin&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">const</span> DemoPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;loading,demoModel&#125; = useSelector(<span class="function"><span class="params">stores</span> =&gt;</span> (&#123;</span><br><span class="line">    loading: stores.loading,</span><br><span class="line">    demoModel: stores.loading,</span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Spin spinning=&#123;</span><br><span class="line">      loading.effects[<span class="string">&#x27;demoModel/effect1&#x27;</span>] ||</span><br><span class="line">      loading.effects[<span class="string">&#x27;demoModel/effect3&#x27;</span>] ||</span><br><span class="line">      loading.effects[<span class="string">&#x27;demoModel/effect4&#x27;</span>] || <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关闭-Umi-UI"><a href="#关闭-Umi-UI" class="headerlink" title="关闭 Umi UI"></a>关闭 Umi UI</h2><p>umi 项目默认启动 <code>umi ui</code>，会出现一个mini图标气泡浮在右下角，关闭有两种方式，一种是直接用样式 <code>display none</code>。另一种是在启动时加上 <code>UMI_UI=none</code> 环境变量。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;UMI_UI=none umi dev&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;MOCK=none UMI_UI=none umi dev&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置多环境"><a href="#配置多环境" class="headerlink" title="配置多环境"></a>配置多环境</h2><blockquote><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VtaWpzL3VtaS9pc3N1ZXMvMTE0MiNpc3N1ZWNvbW1lbnQtNDM1ODAzNzQ2" title="https://github.com/umijs/umi/issues/1142#issuecomment-435803746">umi如何配置多环境<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly91bWlqcy5vcmcvemgtQ04vY29uZmlnI2RlZmluZQ==" title="https://umijs.org/zh-CN/config#define">umi define config<i class="fa fa-external-link"></i></span></p></blockquote><p>1、安装 cross-env 插件: <code>yarn add cross-env -D</code></p><p>2、在 <code>.umirc.js</code> 文件中添加 <code>define</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  define: &#123;</span><br><span class="line">    <span class="comment">// 添加这个自定义的环境变量</span></span><br><span class="line">    <span class="comment">// 本地开发环境：dev，test环境：test，生产环境：prod</span></span><br><span class="line">    <span class="string">&quot;process.env.PRO_ENV&quot;</span>: process.env.PRO_ENV</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、package.json 添加 npm scripts</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;cross-env PRO_ENV=dev umi dev&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;cross-env PRO_ENV=test umi dev&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;cross-env PRO_ENV=prod umi build&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Catch-Me"><a href="#Catch-Me" class="headerlink" title="Catch Me"></a>Catch Me</h2><blockquote><p>GitHub: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nanVuaW5n" title="https://github.com/youngjuning">youngjuning<i class="fa fa-external-link"></i></span> | 微信: <code>yang_jun_ning</code> | 公众号: <code>前端早茶馆</code> | 邮箱: <span class="exturl" data-url="bWFpbHRvOnlvdW5nanVuaW5nQGFsaXl1bi5jb20=" title="mailto:youngjuning@aliyun.com">youngjuning@aliyun.com<i class="fa fa-external-link"></i></span></p></blockquote><table><thead><tr><th align="center">微信</th><th align="center">投食</th></tr></thead><tbody><tr><td align="center"><img src="https://i.loli.net/2020/02/22/q2tLiGYvhIxm3Fl.jpg" width="200px"/></td><td align="center"><img src="https://i.loli.net/2020/02/23/q56X1eYZuITQpsj.png" width="200px"/></td></tr></tbody></table><p>本文首发于<a href="https://youngjuning.js.org/">杨俊宁的博客</a>，创作不易，您的点赞👍是我坚持的动力</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/06/23/LYNpFyiax7mT1ZB.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="http://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
      <category term="UmiJS" scheme="http://youngjuning.js.org/tags/UmiJS/"/>
    
  </entry>
  
  <entry>
    <title>CSS中的居中操作</title>
    <link href="http://youngjuning.js.org/2020/06/CSS%E4%B8%AD%E7%9A%84%E5%B1%85%E4%B8%AD%E6%93%8D%E4%BD%9C/"/>
    <id>http://youngjuning.js.org/2020/06/CSS%E4%B8%AD%E7%9A%84%E5%B1%85%E4%B8%AD%E6%93%8D%E4%BD%9C/</id>
    <published>2020-06-03T05:35:13.000Z</published>
    <updated>2020-06-03T05:35:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/03/RVGzPKoXgYINsAc.jpg" alt=""></p><p>居中的效果是Web开发中常见的需求，几乎和阴影、圆角可以并列为产品三大法宝，本文的目的是捋顺开发中常用的居中计较，方便记忆和日后查阅。为了方便演示，本文所有 demo 使用 React 的 CSS-in-JS 语法完成。</p><a id="more"></a><h2 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h2><h3 id="height、lineHeight、textAlign"><a href="#height、lineHeight、textAlign" class="headerlink" title="height、lineHeight、textAlign"></a>height、lineHeight、textAlign</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    boxSizing: <span class="string">&#x27;border-box&#x27;</span>,</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    color: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    textAlign: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    lineHeight: <span class="string">&#x27;98px&#x27;</span>,</span><br><span class="line">    border: <span class="string">&#x27;1px solid red&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  单行文本</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    color: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;flex&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  单行文本</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="多行文本居中"><a href="#多行文本居中" class="headerlink" title="多行文本居中"></a>多行文本居中</h2><h3 id="table-cell、vertical-align"><a href="#table-cell、vertical-align" class="headerlink" title="table-cell、vertical-align"></a>table-cell、vertical-align</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    boxSizing: <span class="string">&#x27;border-box&#x27;</span>,</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    color: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;table-cell&#x27;</span>,</span><br><span class="line">    verticalAlign: <span class="string">&#x27;middle&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="Flex-1"><a href="#Flex-1" class="headerlink" title="Flex"></a>Flex</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    color: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;flex&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="图片居中"><a href="#图片居中" class="headerlink" title="图片居中"></a>图片居中</h2><h3 id="table-cell、verticalAlign、textAlign"><a href="#table-cell、verticalAlign、textAlign" class="headerlink" title="table-cell、verticalAlign、textAlign"></a>table-cell、verticalAlign、textAlign</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;table-cell&#x27;</span>,</span><br><span class="line">    verticalAlign: <span class="string">&#x27;middle&#x27;</span>,</span><br><span class="line">    textAlign: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;img src=<span class="string">&quot;http://iph.href.lu/50x50&quot;</span> alt=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="Flex-2"><a href="#Flex-2" class="headerlink" title="Flex"></a>Flex</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;flex&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;img src=<span class="string">&quot;http://iph.href.lu/50x50&quot;</span> alt=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    position: <span class="string">&#x27;relative&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">      background: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">      width: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">      height: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">      position: <span class="string">&#x27;absolute&#x27;</span>,</span><br><span class="line">      left: <span class="string">&#x27;50%&#x27;</span>,</span><br><span class="line">      top: <span class="string">&#x27;50%&#x27;</span>,</span><br><span class="line">      transform: <span class="string">&#x27;translate(-50%,-50%)&#x27;</span>,</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="Flex-3"><a href="#Flex-3" class="headerlink" title="Flex"></a>Flex</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    height: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    width: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;flex&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">      background: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">      width: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">      height: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><blockquote><p>本文首发于个人博客：<a href="https://youngjuning.js.org/">https://youngjuning.js.org/</a></p></blockquote><table><thead><tr><th align="center">作者微信</th><th align="center">知识星球</th><th align="center">赞赏作者</th></tr></thead><tbody><tr><td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb24c7412?w=200&h=200&f=jpeg&s=17183" style="width:200px"/></td><td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb26af8e1?w=200&h=200&f=png&s=39093" style="width:200px"/></td><td align="center"><img src="https://user-gold-cdn.xitu.io/2020/2/24/17074acbb338c643?w=698&h=700&f=png&s=315492" style="width:200px"/></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/06/03/RVGzPKoXgYINsAc.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;居中的效果是Web开发中常见的需求，几乎和阴影、圆角可以并列为产品三大法宝，本文的目的是捋顺开发中常用的居中计较，方便记忆和日后查阅。为了方便演示，本文所有 demo 使用 React 的 CSS-in-JS 语法完成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
  </entry>
  
</feed>
